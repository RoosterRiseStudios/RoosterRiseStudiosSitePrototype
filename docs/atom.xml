<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LambdaBlog: lambda is not a four letter word</title>
    <link href="https://thma.github.io//atom.xml" rel="self" />
    <link href="https://thma.github.io/" />
    <id>https://thma.github.io//atom.xml</id>
    <author>
        <name>Thomas Mahler</name>
        <email>Thomas.Mahler@ista.com</email>
    </author>
    <updated>2021-01-30T00:00:00Z</updated>
    <entry>
    <title>Fuzzing me wrong — How QuickCheck destroyed my favourite theory</title>
    <link href="https://thma.github.io//posts/2021-01-30-How-QuickCheck-destroyed-my-favourite-theory.html" />
    <id>https://thma.github.io//posts/2021-01-30-How-QuickCheck-destroyed-my-favourite-theory.html</id>
    <published>2021-01-30T00:00:00Z</published>
    <updated>2021-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on January 30, 2021
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<h2 id="introduction">Introduction</h2>
<p>Quite a while back I wrote a larger article on the algebraic foundation of software patterns which also covered the <a href="https://thma.github.io/posts/2018-11-24-lambda-the-ultimate-pattern-factory.html#map-reduce">MapReduce algorithm</a>.</p>
<p>During the research digged out a paper on <a href="https://pdfs.semanticscholar.org/0498/3a1c0d6343e21129aaffca2a1b3eec419523.pdf">algebraic properties of distributed big data analytics</a>, which explained that a MapReduce will always work correctly when the intermediate data structure resulting from the <code>map</code>-phase is a Monoid under the <code>reduce</code>-operation.</p>
<p>For some reason, I was not convinced that this Monoid-condition was enough, because all the typical examples like word-frequency maps are even <strong>commutative</strong> Monoids under the respective reduce operation.</p>
<p>So I came up with the following personal theory:</p>
<blockquote>
<p>Only if the intermediate data structure resulting from the <code>map</code>-phase is a <strong>commutative Monoid</strong> under the <code>reduce</code>-operation, then a parallel MapReduce will produce correct results.</p>
</blockquote>
<p>I tried to validate this property using the <a href="https://wiki.haskell.org/Introduction_to_QuickCheck2">QuickCheck test framework</a>.</p>
<p>Interestingly the QuickCheck tests failed! This finally convinced me that my theory was wrong, and after a little deeper thought, I could understand why.</p>
<p>I was impressed with the power of QuickCheck, so I thought it would be a good idea to share this lesson in falsification.</p>
<p>The code shown in this blog <a href="https://github.com/thma/CommutativeMonoid">is also available on GitHub</a></p>
<h2 id="commutative-monoids">Commutative Monoids</h2>
<p>In abstract algebra, a monoid is a <em>set</em> equipped with an <em>associative binary operation</em> and an <em>identity element</em>.</p>
<p>The simplest example for a <em>commutative Monoid</em> is <span class="math inline">\((\mathbb{N}_0, +, 0)\)</span>: the natural numbers under addition with <span class="math inline">\(0\)</span> as the identity (or neutral) element. We can use QuickCheck to verify that indeed the Monoid laws plus commutativity are maintained.</p>
<p>If we want to use <code>GHC.Natural</code> type to represent natural numbers, we first have to make <code>Natural</code> instantiate the <code>Arbitrary</code> type class which is used by QuickCheck to automatically generate test data:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Test.QuickCheck</span> (<span class="dt">Arbitrary</span>, arbitrary, <span class="dt">NonNegative</span> (..))</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">GHC.Natural</span>     (<span class="dt">Natural</span>, naturalFromInteger)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Natural</span> <span class="kw">where</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  arbitrary <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    <span class="dt">NonNegative</span> nonNegative <span class="ot">&lt;-</span> arbitrary</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    <span class="fu">return</span> <span class="op">$</span> naturalFromInteger nonNegative</span></code></pre></div>
<p>Now we can start to write our property based tests. For algebraic structures it is straightforward to come up with properties: we just write the required laws (associativity, 0 is identity element and commutativity) as properties.</p>
<p>I am using Hspec as a wrapper around QuickCheck as it provides a very nice testing DSL which makes it easy to read the code and the output of the test suite:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Test.Hspec</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>spec <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  describe <span class="st">&quot;The Monoid &#39;Natural Numbers under Addition&#39;&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    it <span class="st">&quot;is associative&quot;</span> <span class="op">$</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>      property <span class="op">$</span> \x y z <span class="ot">-&gt;</span> ((x <span class="op">+</span> y) <span class="op">+</span> z) <span class="ot">`shouldBe`</span> ((x <span class="op">+</span> (y <span class="op">+</span> z))<span class="ot"> ::</span> <span class="dt">Natural</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>      </span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    it <span class="st">&quot;has 0 as left and right identity element&quot;</span> <span class="op">$</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>      property <span class="op">$</span> \x <span class="ot">-&gt;</span> (x <span class="op">+</span> <span class="dv">0</span> <span class="ot">`shouldBe`</span> (<span class="ot">x ::</span> <span class="dt">Natural</span>)) <span class="op">.&amp;&amp;.</span> (<span class="dv">0</span> <span class="op">+</span> x <span class="ot">`shouldBe`</span> x)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>      </span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    it <span class="st">&quot;is commutative&quot;</span> <span class="op">$</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>      property <span class="op">$</span> \x y <span class="ot">-&gt;</span> x <span class="op">+</span> y <span class="ot">`shouldBe`</span> (y <span class="op">+</span><span class="ot"> x ::</span> <span class="dt">Natural</span>)</span></code></pre></div>
<p>The output of these tests will be as follows:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ex">Monoid</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  <span class="ex">The</span> Monoid <span class="st">&#39;Natural Numbers under Addition&#39;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="ex">is</span> associative</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    <span class="ex">has</span> 0 as identity (or neutral) <span class="ex">element</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    <span class="ex">is</span> commutative</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span></code></pre></div>
<p>So behind the scenes, QuickCheck has generated test data for 100 tests for each property under test. For all these data the test cases passed.</p>
<p>This is definitely not a proof. But it gives us some confidence that our math text-books are correct when giving Natural Numbers under addition as an example for a commutative Monoid.</p>
<p>OK, that was easy! Now let’s move to non-commutative Monoids.</p>
<h2 id="non-commutative-monoids">Non-commutative Monoids</h2>
<p>Strings (or any other Lists) under concatenation are a typical example. It’s easy to see that <code>"hello" ++ ("dear" ++ "people")</code> equals <code>"(hello" ++ "dear") ++ "people"</code>, but that <code>"hello" ++ "world"</code> differs from <code>"world" ++ "hello"</code>.</p>
<p>Now let’s try to formalize these intuitions as QuickCheck property based tests again.</p>
<p>First I’m introducing an alias for <code>(++)</code>, as it is defined on any list type, it would be required to have type signatures in all properties (as we had all those <code>:: Natural</code> signatures in the examples above). So I define an operation <code>(⊕)</code> which is only defined on <code>String</code> instances:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>(⊕)<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>(⊕) a b <span class="ot">=</span> a <span class="op">++</span> b</span></code></pre></div>
<p>Now we can extend our test suite with the following test cases:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>  describe <span class="st">&quot;The Monoid &#39;Strings under concatenation&#39;&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    </span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    it <span class="st">&quot;is associative&quot;</span> <span class="op">$</span> </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>      property <span class="op">$</span> \x y z <span class="ot">-&gt;</span> ((x ⊕ y) ⊕ z) <span class="ot">`shouldBe`</span> (x ⊕ (y ⊕ z))</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>      </span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    it <span class="st">&quot;has \&quot;\&quot; as left and right identity element&quot;</span> <span class="op">$</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>      property <span class="op">$</span> \x <span class="ot">-&gt;</span> (x ⊕ <span class="st">&quot;&quot;</span> <span class="ot">`shouldBe`</span> x) <span class="op">.&amp;&amp;.</span> (<span class="st">&quot;&quot;</span> ⊕ x <span class="ot">`shouldBe`</span> x)</span></code></pre></div>
<p>The output looks promising:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>  <span class="ex">The</span> Monoid <span class="st">&#39;Strings under concatenation&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="ex">is</span> associative</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    <span class="ex">has</span> <span class="st">&quot;&quot;</span> as left and right identity element</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span></code></pre></div>
<p>Now let’s try to test the non-commutativity:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>    it <span class="st">&quot;is NOT commutative&quot;</span> <span class="op">$</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>      property <span class="op">$</span> \x y <span class="ot">-&gt;</span> x ⊕ y <span class="ot">`shouldNotBe`</span> y ⊕ x</span></code></pre></div>
<p>But unfortunately the output tells us that this is not true:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>    <span class="ex">is</span> NOT commutative FAILED [1]</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  <span class="ex">1</span>) <span class="ex">Monoid</span>, The Monoid <span class="st">&#39;Strings under concatenation&#39;</span>, is NOT commutative</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>       <span class="ex">Falsifiable</span> (after 1 test)<span class="bu">:</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>         <span class="st">&quot;&quot;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>         <span class="st">&quot;&quot;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>       <span class="ex">not</span> expected: <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>We formulated the property in the wrong way. The <code>(⊕)</code> <em>may be commutative for some</em> edge cases, e.g. when one or both of the arguments are <code>""</code>. But it is not commutative <em>in general</em> – that is for all possible arguments.</p>
<p>We could rephrase this property as <em>“There exists at least one pair of arguments <span class="math inline">\((x, y)\)</span> for which <span class="math inline">\(\oplus\)</span> is not commutative”</em>:</p>
<p><span class="math display">\[\exists (x,y) \left [  x \oplus y \neq y \oplus x \right ]\]</span></p>
<p>QuickCheck does not come with a mechanism for <em>existential quantification</em>. But as is has <code>forAll</code>, that is <em>universal quantification</em>. So we can try to make use of the following equivalence:</p>
<p><span class="math display">\[\exists (x,y) \left [  x \oplus y \neq y \oplus x \right ] 
  \equiv 
  \neg \forall (x,y) \left [ x \oplus y = y \oplus x \right ]\]</span></p>
<p>Unfortunately we can not write this simply as <code>not forAll</code>, as <code>forAll</code> returns a <code>Property</code> but <code>not</code> expects a <code>Bool</code>. But as explained in <a href="https://stackoverflow.com/questions/42764847/is-there-a-there-exists-quantifier-in-quickcheck">this discussion on Stackoverflow</a> it is still posible to implement our own <code>exists</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">exists ::</span> (<span class="dt">Show</span> a, <span class="dt">Arbitrary</span> a) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>exists <span class="ot">=</span> forSome <span class="op">$</span> resize <span class="dv">1000</span> arbitrary</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="ot">forSome ::</span> (<span class="dt">Show</span> a, <span class="dt">Testable</span> prop) <span class="ot">=&gt;</span> <span class="dt">Gen</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> prop) <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>forSome gen prop <span class="ot">=</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>  mapResult (\r <span class="ot">-&gt;</span> r {P.reason <span class="ot">=</span> <span class="st">&quot;No witness found.&quot;</span>, P.callbacks <span class="ot">=</span> []}) <span class="op">$</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>    once <span class="op">$</span> disjoin <span class="op">$</span> <span class="fu">replicate</span> <span class="dv">1000</span> <span class="op">$</span> forAll gen prop</span></code></pre></div>
<p>Now we can rewrite the property <span class="math inline">\(\exists (x,y) \left [ x \oplus y \neq y \oplus x \right ]\)</span> as follows:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>    it <span class="st">&quot;is not commutative (via exists)&quot;</span> <span class="op">$</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>      exists <span class="op">$</span> \(x,y) <span class="ot">-&gt;</span> x ⊕ y <span class="op">/=</span> y ⊕ x</span></code></pre></div>
<p>I like how close the Haskell code stays to the concise mathematical formulation! The output of this test fits much better into our intuitive understanding:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>    <span class="ex">is</span> not commutative (via exists)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 1 test.</span></code></pre></div>
<h2 id="sequential-mapreduce">Sequential MapReduce</h2>
<blockquote>
<p>MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify <strong>a map function</strong> that processes a key/value pair to generate a set of intermediate key/value pairs, <strong>and a reduce function</strong> that merges all intermediate values associated with the same intermediate key.</p>
<p>[This] abstraction is inspired by the map and reduce primitives present in Lisp and many other functional languages. <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/16cb30b4b92fd4989b8619a61752a2387c6dd474.pdf">Quoted from Google Research</a></p>
</blockquote>
<p>I’m not going into more details here, as You’ll find detailed information on this approach and a working example <a href="https://thma.github.io/posts/2018-11-24-lambda-the-ultimate-pattern-factory.html#map-reduce">in my original article</a>.</p>
<p>Here is the definition of a sequential MapReduce:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>simpleMapReduce </span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a>simpleMapReduce mapFunc reduceFunc <span class="ot">=</span> reduceFunc <span class="op">.</span> <span class="fu">map</span> mapFunc</span></code></pre></div>
<p>We can test the sequential MapReduce algorithm with the following property based test:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>    it <span class="st">&quot;works correctly with a sequential map-reduce&quot;</span> <span class="op">$</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>      property <span class="op">$</span> \a b c d <span class="ot">-&gt;</span> (simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [a,b,c,d]) </span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>                     <span class="ot">`shouldBe`</span> (<span class="fu">reverse</span> a) ⊕ (<span class="fu">reverse</span> b) ⊕ (<span class="fu">reverse</span> c) ⊕ (<span class="fu">reverse</span> d)</span></code></pre></div>
<h2 id="parallel-mapreduce">Parallel MapReduce</h2>
<p>Now we come to the tricky part that kicked off this whole discussion: parallelism.</p>
<p>As an example we consider a simple sequential MapReduce, taking an input list of <code>Int</code>s, computing their squares and computing the sum of these squares:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> simpleMapReduce (<span class="op">^</span><span class="dv">2</span>) (<span class="fu">foldr</span> (<span class="op">+</span>) <span class="dv">0</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="dv">30</span></span></code></pre></div>
<p>Let’s try to design this as a massively parallelized algorithm:</p>
<ol type="1">
<li><p>Mapping of <code>(^2)</code> over the input-list <code>[1,2,3,4]</code> would be started in parallel to the reduction of the intermediary list of squares by <code>(foldr (+) 0)</code>.</p></li>
<li><p>The mapping phase will be executed as a set of parallel computations (one for each element of the input list).</p></li>
<li><p>The reduction phase will also be executed as a set of parallel computations (one for each addition).</p></li>
</ol>
<p>Of course the reduction phase can begin only when at least one list element is squared. So in effect the mapping process would have to start first. The parallel computation of squares will result in a non-deterministic sequence of computations. In particular it is not guaranteed that all elements of the input list are processed in the original list order. So it might for example happen that <code>3</code> is squared first. Now the reduction phase would receive it’s first input <code>9</code>, and would start reduction, that is compute <code>9 + 0</code>.</p>
<p>Let’s assume the following random sequence of mapping steps: Next the first element of the input <code>1</code>, then the fourth <code>4</code> and finally the second element <code>2</code> would be squared, resulting in a reduction sequence of <code>4 + 16 + 1 + 9 + 0</code>. As this sums up to <code>30</code> everything is fine. Addition is commutative, so changing the sequence of reduction steps does not affect the overall result.</p>
<p>But now imagine we would parallelize:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [<span class="st">&quot; olleh&quot;</span>,<span class="st">&quot; ym&quot;</span>,<span class="st">&quot; raed&quot;</span>,<span class="st">&quot; sklof&quot;</span>]</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a><span class="st">&quot;hello my dear folks &quot;</span></span></code></pre></div>
<p>If we assume the same sequence as above, the third element of the input list would be reversed first, resulting in a first reduction step <code>"dear " ⊕ ""</code>. Next the first, the fourth and finally the second element would be reversed, resulting in a reduction sequence of <code>"my " ⊕ "folks " ⊕ "hello " ⊕ "dear " ⊕ "" = "my folks hello dear "</code>. As string concatenation is not commutative it does not really come as a surprise that random changes to the reduction sequence will eventually result in wrong computations.</p>
<p>So our conclusion is:</p>
<blockquote>
<p>If the MapReduce algorithm is parallelized in the way that I outlined above — which may result in random changes of the order of list elements in the reduction phase — it will only work correct if the intermediary data structure is a <em>commutative</em> Monoid under the reduce operation.</p>
</blockquote>
<p>In the following section we will implement a parallel MapReduce in Haskell in order to validate our theory with property based testing.</p>
<h2 id="parallel-mapreduce-in-haskell">Parallel MapReduce in Haskell</h2>
<p>We can define a parallel MapReduce implementation as follows (for more details see <a href="http://book.realworldhaskell.org/read/concurrent-and-multicore-programming.html">Real World Haskell, Chapter 24</a>):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel</span> (par)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel.Strategies</span> (using, parMap, rpar)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>parMapReduce </span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>parMapReduce mapFunc reduceFunc input <span class="ot">=</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a>    mapResult <span class="ot">`par`</span> reduceResult</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true"></a>    <span class="kw">where</span> mapResult    <span class="ot">=</span> parMap rpar mapFunc input</span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true"></a>          reduceResult <span class="ot">=</span> reduceFunc mapResult <span class="ot">`using`</span> rpar</span></code></pre></div>
<p>This implementation will start computing <code>mapResult</code> and <code>reduceResult</code> in parallel and finally return <code>reduceResult</code>. The <code>mapResult</code> is computed with a parallelized <code>map</code> function <code>parMap</code>. The <code>reduceResult</code> is computed by applying a parallel reduction strategy <code>rpar</code>.</p>
<p>Next we will write a property based test to valdate our theory:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>    it <span class="st">&quot;has some cases where parallel reduction deviates from sequential reduction&quot;</span> <span class="op">$</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>      exists <span class="op">$</span> \text <span class="ot">-&gt;</span> parMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) text</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>                <span class="op">/=</span> simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) text</span></code></pre></div>
<p>But it turns out that QuickCheck does not find any evidence for this assumption:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>    <span class="ex">has</span> some cases where parallel reduction deviates from sequential reduction FAILED [1]</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="ex">Failures</span>:</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>  <span class="bu">test</span>\MonoidSpec.hs:69:5: </span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>  <span class="ex">1</span>) <span class="ex">Monoid</span>, The Monoid <span class="st">&#39;Strings under concatenation&#39;</span>, has some cases where parallel reduction deviates from sequential reduction</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>       <span class="ex">***</span> Failed! No witness found. (after 1 test)<span class="bu">:</span></span></code></pre></div>
<p>After seeing this result I had to deal with some growing cognitive dissonance, much like <a href="https://www.youtube.com/watch?v=EBtx1MDi5tY">a flat earther confronted with experimental evidence…</a></p>
<p>I began verifying my setup. I made sure that the <code>package.yaml</code> contains the right GHC options to provide parallel execution of the test suite:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -O2</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -eventlog</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span></code></pre></div>
<p>I also made sure that all cores of my CPU were actually running at 100% utilization during the parallel tests.</p>
<p>I also inspected the runtime behaviour with the amazing <a href="https://wiki.haskell.org/ThreadScope">ThreadScope tool</a> (A ThreadScope eventlog can be produced by adding the runtime flags <code>+RTS -ls -N</code> when executing an application).</p>
<p>I also increased the number of test executions to give better chances to hit any rare cases.</p>
<p>But to no avail.</p>
<p>Since QuickCheck kept telling me, “You’re wrong,” I finally started to admit, “Well, maybe I am <em>indeed</em> wrong and should take a closer look at the problem.”</p>
<h2 id="rethinking-parallel-evaluation-in-haskell">Rethinking parallel evaluation in Haskell</h2>
<p>Taking a closer look at the definition of the parallel MapReduce will allow us to better understand what’s actually going on:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel</span> (par)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel.Strategies</span> (using, parMap, rpar)</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>parMapReduce </span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true"></a>parMapReduce mapFunc reduceFunc input <span class="ot">=</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true"></a>    mapResult <span class="ot">`par`</span> reduceResult</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true"></a>    <span class="kw">where</span> mapResult    <span class="ot">=</span> parMap rpar mapFunc input</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true"></a>          reduceResult <span class="ot">=</span> reduceFunc mapResult <span class="ot">`using`</span> rpar</span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true"></a></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true"></a><span class="co">-- and now an actual example usage:</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true"></a>x <span class="ot">=</span> parMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [<span class="st">&quot; olleh&quot;</span>,<span class="st">&quot; ym&quot;</span>,<span class="st">&quot; raed&quot;</span>,<span class="st">&quot; sklof&quot;</span>]     </span></code></pre></div>
<p>In this concrete example <code>mapResult</code> will be:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a>mapResult    <span class="ot">=</span> parMap rpar <span class="fu">reverse</span> [<span class="st">&quot; olleh&quot;</span>,<span class="st">&quot; ym&quot;</span>,<span class="st">&quot; raed&quot;</span>,<span class="st">&quot; sklof&quot;</span>]</span></code></pre></div>
<p>parMap is defined as follows:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ot">parMap ::</span> <span class="dt">Strategy</span> b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>parMap strat f <span class="ot">=</span> (<span class="ot">`using`</span> parList strat) <span class="op">.</span> <span class="fu">map</span> f</span></code></pre></div>
<p>The <code>parMap</code> evaluation strategy will spark a parallel evaluation for each element of the <code>input</code> list. Nevertheless the actual order of elements will not be changed as internally the classical sequential <code>map</code> function is used which will not change the order of elements. So the reduce phase will never receive a changed order of elements from the map phase, even if <code>map</code>-computations for the individual list elements might be executed in random order!</p>
<p><code>mapResult</code> will always be <code>["hello", "my ", "dear ", "folks"]</code>.</p>
<p>Thus <code>reduceResult</code> will be:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a>reduceResult <span class="ot">=</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [<span class="st">&quot;hello&quot;</span>, <span class="st">&quot;my &quot;</span>, <span class="st">&quot;dear &quot;</span>, <span class="st">&quot;folks&quot;</span>] <span class="ot">`using`</span> rpar</span></code></pre></div>
<p>Again the traditional semantics of <code>foldr</code> is maintained — in particular the order of arguments of all <code>(⊕)</code> operations, only we allow for parallel evaluation of those <code>(⊕)</code> operations during the reduction phase.</p>
<p>So the final output will always be <code>"hello my dear folks"</code>. The parallelism introduced by the <code>Control.Parallel</code> package does not in any way change the semantics of pure functional programs as our example. This is exactly what the failed test cased kept telling me:</p>
<blockquote>
<p>There do not exist any cases where sequential and parallel MapReduce result in deviating results!</p>
</blockquote>
<p>We can again evaluate our improved theory with a QuickCheck test:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a>    it <span class="st">&quot;parallel reduction always equals sequential reduction&quot;</span> <span class="op">$</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>      property <span class="op">$</span> \l <span class="ot">-&gt;</span> simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) l</span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>                     <span class="ot">`shouldBe`</span> parMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) l</span></code></pre></div>
<p>And — not so surprisingly — this test succeeds!</p>
<p>If you want to know more about parallel evaluation in Haskell I highly recommend the exellent <a href="https://www.oreilly.com/library/view/parallel-and-concurrent/9781449335939/ch02.html">Parallel and Concurrent Programming in Haskell by Simon Marlow</a>.</p>
<h2 id="conclusions">Conclusions</h2>
<ol type="1">
<li><p>The parallelism as provided by the Haskell <code>Control.Parallel</code> package maintains the semantics of pure functional code and thus a parallel MapReduce maintains the same properties as its sequential counterpart. So a parallel MapReduce will still work correctly if the intermediate data structure resulting from the <code>map</code>-phase is just a <strong>Monoid</strong> — not necessarily a <em>commutative</em> Monoid.</p></li>
<li><p>Nevertheless there may be implementations that do not strictly maintain the original order of the input data during the <code>map</code>- and <code>reduce</code>-phases. With such implementations the intermediate data structure resulting from the <code>map</code>-phase must be a <strong>commutative Monoid</strong> under the <code>reduce</code>-operation to produce correct results.</p></li>
<li><p>Property based testing with QuickCheck is a powerful tool to verify assumptions about a given code-base. I really like using it as intended by <a href="https://en.wikipedia.org/wiki/Falsifiability">Karl Poppers Theory of Falsifiability</a>:</p>
<ul>
<li>Derive hypotheses from your theory which can be experimentally tested.</li>
<li>Perform experiments (property based tests) that test your hypotheses</li>
<li>If the experimental results contradict the hypotheses, the theory must be false.</li>
</ul></li>
</ol>
]]></summary>
</entry>
<entry>
    <title>What's awesome about functional programming</title>
    <link href="https://thma.github.io//posts/2021-01-17-Whats-awesome-about-functional-programming.html" />
    <id>https://thma.github.io//posts/2021-01-17-Whats-awesome-about-functional-programming.html</id>
    <published>2021-01-17T00:00:00Z</published>
    <updated>2021-01-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on January 17, 2021
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>Some weeks ago I gave an introductory talk on functional programming at an in-house mini-conference where I tried to explain basic concepts of functional programming to a crowd of developers with their backgrounds mostly in imperative and OO languages.</p>
<p>Initially I had planned to present the contents of my <a href="https://thma.github.io/posts/2020-04-01-why-haskell-matters.html">Why Haskell Matters article</a> but that turned out impractical because of the time constraints of my talk.</p>
<p>So I prepared a condensed slide deck focussing on the more elementary sections, which worked quite well.</p>
<p>Recently I stumbled across <a href="https://github.com/gibiansky/IHaskell">IHaskell</a>, a Haskell kernel for the Jupyter Notebook platform. As I like the interactive approach of Jupyter notebooks I transferred my presentation into the Jupyter notebook format.</p>
<p>As I’m quite happy with the result I’d like to make it available to a wider audience. I have prepared three different versions:</p>
<ol type="1">
<li><p><a href="https://raw.githubusercontent.com/thma/IHaskellExperiments/main/WhatsAwesomeAboutFunctionalProgramming.ipynb">The raw notebook</a>. You can open it in your local Jupyter + IHaskell setup <a href="https://github.com/gibiansky/IHaskell#installation">(Please follow this installation guide)</a> to enjoy the full interactivity that Jupyter notebooks provide.</p></li>
<li><p>The notebook as rendered by <a href="https://nbviewer.jupyter.org/github/thma/IHaskellExperiments/blob/main/WhatsAwesomeAboutFunctionalProgramming.ipynb">nbviewer.jupyter.org</a>. Unfortunately it’s not interactive. But you won’t need a local Jupyter installation.</p></li>
<li><p>A <a href="/static/WhatsAwesomeAboutFunctionalProgramming.slides.html">reveal.js presentation</a> which I generated from the notebook. This version just needs a web-browser.</p></li>
</ol>
]]></summary>
</entry>
<entry>
    <title>Reconciling concepts from FP and OOP</title>
    <link href="https://thma.github.io//posts/2020-12-20-reconciling-fp-and-oop-concepts.html" />
    <id>https://thma.github.io//posts/2020-12-20-reconciling-fp-and-oop-concepts.html</id>
    <published>2020-12-20T00:00:00Z</published>
    <updated>2020-12-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on December 20, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>This post is part of the <a href="https://adventofhaskell.com/">Advent of Haskell 2020 series</a>. Hence, I tried to keep the content easy and enjoyable but still present some food for thought!</p>
<p>Some time ago I came across an interesting post on the Clean-Coder-Blog, which kept me busy for weeks until I finally decided to write this article.</p>
<p>In his blog-post Uncle Bob tries to reconcile concepts from both Functional Programming and Object Oriented Programming by explaining that both approaches are not mutually exclusive but both provide useful principles that go very well together and in fact are complementary:</p>
<blockquote>
<p>In this blog I will make the case that while OO and FP are orthogonal, they are not mutually exclusive. That a good functional program can (and should) be object oriented. And that a good object oriented program can (and should) be functional.</p>
<p><a href="https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html">quoted from Uncle Bob’s Clean Coder Blog</a></p>
</blockquote>
<p>He begins his argument by reducing FP and OOP each to a single central guiding principle in order to contrast the essential features of these two approaches as clearly as possible:</p>
<h2 id="oop-condensed">OOP condensed</h2>
<p>He gives the following characterisation of OOP:</p>
<blockquote>
<p>The technique of using dynamic polymorphism to call functions without the source code of the caller depending upon the source code of the callee.</p>
</blockquote>
<p>With this short statement Uncle Bob points to the core of object orientation since its first incarnation in the Smalltalk language:</p>
<p>In an OO language a call of methods on a target object is dispatched based on the target object’s type, its <code>class</code>. So a method call <code>shape.draw()</code> may invoke different code based on the <code>class</code> of the actual shape object:</p>
<p>The code of the <code>draw</code> method of class <code>Rectangle</code> may be different from the code in <code>Circle.draw()</code>.</p>
<p>Client code will just call <code>shape.draw()</code>, not even knowing which actual <code>Shape</code> sub-class it’s working on. This kind of polymorphism provides a very useful decoupling of clients from the target objects by using the methods of the baseclass <code>Shape</code> as the API for all Objects inheriting <code>Shape</code>.</p>
<p>This mechanism allows to build elegant design like the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller (MVC)</a> pattern which is at the core of Smalltalks GUI and which influenced many similar designs in other OO-languages.</p>
<blockquote>
<p>MVC is the seminal insight of the whole field of graphical user interfaces. I believe the MVC work was the first to <strong>describe</strong> and implement <strong>software constructs in terms of their responsibilities.</strong> I also believe that MVC was the first significant <strong>use of protocols to define components</strong> instead of using concrete implementations — each controller class had a certain set of messages it had to respond to, as did each view class, but otherwise there were no constraints on what they did and how they did it.</p>
<p><a href="http://wiki.c2.com/?ModelViewControllerHistory">quoted from the C2 Wiki</a></p>
</blockquote>
<p>This quote conveys two major achievements of OOP:</p>
<ol type="1">
<li>Decomposing software into separate components with distinct responsibilities</li>
<li>Using protocols - APIs or interfaces in todays lingo - to decouple those components and allow for varying implementations.</li>
</ol>
<p>It’s interesting to note that Uncle Bob does not consider Inheritance or Encapsulation to be the most important and central concepts in OOP.</p>
<h2 id="fp-boiled-down">FP boiled down</h2>
<p>Next he gives a very brief characterization of functional programming:</p>
<blockquote>
<p>Referential Transparency – no reassignment of values.</p>
<p><a href="https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html">quoted from Uncle Bob’s Clean Coder Blog</a></p>
</blockquote>
<p>Referential transparency is implying <strong>purity</strong> as explained in the following definition from Wikipedia:</p>
<blockquote>
<p>An expression is called <strong>referentially transparent if it can be replaced with its corresponding value</strong> (and vice-versa) without changing the program’s behavior. This <strong>requires that the expression be pure</strong>, that is to say <strong>the expression value must be the same for the same inputs</strong> and its <strong>evaluation must have no side effects</strong>.</p>
<p><a href="https://en.wikipedia.org/wiki/Referential_transparency">quoted from Wikipedia</a></p>
</blockquote>
<p>The second part of Uncle Bob’s statement may be implied by this definition, but I prefer to see it as separate yet closely related principle, namely <strong>immutability</strong>:</p>
<blockquote>
<p>In object-oriented and functional programming, an immutable object (unchangeable object) is an object whose <strong>state cannot be modified after it is created</strong>. […]</p>
<p><a href="https://en.wikipedia.org/wiki/Immutable_object">Quoted from Wikipedia</a></p>
</blockquote>
<h2 id="there-is-no-fp-vs-oop">There is no FP vs OOP</h2>
<p>After this dense characterization of the two programming paradigms Uncle Bob continues his arguments like follows:</p>
<p>The concepts of Polymorphism and Referential Transparency are orthogonal. You can have Polymorphism without Referential Transparency – and vice versa.</p>
<p>But orthogonality does not imply that both concepts are mutually exclusive. It is possible to have languages that support both Dynamic Polymorphism and Referential Transparency. It is not only possible, but even desirable to combine both concepts:</p>
<ol type="1">
<li><p>Dynamic Polymorphism is desirable as it allows building strongly decoupled designs:</p>
<blockquote>
<p>Dependencies can be inverted across architectural boundaries. They are testable using Mocks and Fakes and other kinds of Test Doubles. Modules can be modified without forcing changes to other modules. This makes such systems much easier to change and improve.</p>
<p>Uncle Bob</p>
</blockquote></li>
<li><p>Referential Transparency is desirable as it allows designs that are much easier to understand, to reason about, to change and to improve. It also allows designs that are much better suited for scalability and concurrency as the chances of race conditions etc. are drastically reduced.</p></li>
</ol>
<p>Uncle Bob concludes that Dynamic Polymorphism and Referential Transparency are both desirable as part of software systems:</p>
<blockquote>
<p>A system that is built on both OO and FP principles will <strong>maximize flexibility, maintainability, testability, simplicity, and robustness</strong>.</p>
<p>Uncle Bob</p>
</blockquote>
<p>In the following sections I will have a look at the Haskell language to see how the principles of Ad-hoc Polymorphism and Referential Transparency are covered in our favourite language.</p>
<h2 id="ad-hoc-polymorphism-and-referential-transparency-in-haskell">Ad-hoc Polymorphism and Referential Transparency in Haskell</h2>
<ol type="1">
<li><p><strong>Referential Transparency</strong></p>
<p>Haskell is one of the rare incarnations of a purely functional language. So it goes without saying that Referential Transparency, Purity and Immutability are a given in Haskell. Yes, there are things like <code>unsafePerformIO</code> or <code>IORef</code> but overall it’s very easy to write clean code in Haskell due to the strict separation of pure and impure code by making side effects directly visibly in functions type signatures.</p>
<p>Referential Transparency in Haskell is so much a given that it’s quite possible to apply equational reasoning to proof certain properties of Haskell programs. See for example the following <a href="https://thma.github.io/LambdaBlog/posts/2020-04-17-maybe-functor-law-proof.html">Proof of Functor laws for the Maybe type</a>. What’s remarkable here is that you can use the same language to write your code and to reason about it. This is not possible in languages that do not provide Referential Transparency and Immutability. To reason about programs in such languages you have to use external models like an abstract stack + register machine.</p></li>
<li><p><strong>Ad-hoc Polymorphism</strong></p>
<p>Being able to overload functions and operators with different implementations depending on the type of its arguments is called Ad-hoc Polymorphism. For example, the <code>+</code> operator does something entirely different when applied to floating-point values as compared to when applied to integers. In Haskell, this kind of polymorphism is achieved with type classes and class instances.</p>
<p>Haskell’s type classes are quite different from the classes in OOP languages. They have more in common with interfaces in that they specify a set of functions with their respective type signatures to be implemented by instance declarations.</p></li>
</ol>
<h2 id="a-short-case-study">A short case study</h2>
<p>In this section I’m showcasing how these two concepts are supported in Haskell and how they can be combined without sacrificing FP principles.</p>
<p>Let’s have a look at a simple example that is frequently used in introductions to OOP: a class hierarchy representing geometrical shapes. In a typical OO language, we would have an abstract base class <code>Shape</code> which specifies a set of methods, and concrete classes <code>Rect</code>, <code>Circle</code>, <code>Triangle</code>, etc. which would implement specific behaviour.</p>
<p>This simple class hierarchy is shown in the following UML diagram:</p>
<figure>
<img src="/img/classes.png" alt="" /><figcaption>Shape class hierarchy</figcaption>
</figure>
<p>In Haskell there is no inheritance between types. But with type classes we can specify an <em>interface</em> which must be implemented by concrete types that wish to instantiate the type class. So we start with a <code>Shape</code> type class:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- | The Shape type class. It defines four functions that all concrete Shape types must implement.</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Shape</span> a <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  <span class="co">-- | render a Shape</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">  draw   ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="co">-- | move a Shape by an x and y amount</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="ot">  move   ::</span> (<span class="dt">Double</span>,<span class="dt">Double</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  <span class="co">-- | compute the area of a Shape</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="ot">  area   ::</span> a <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  <span class="co">-- | compute the circumference of a Shape</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="ot">  circum ::</span> a <span class="ot">-&gt;</span> <span class="dt">Double</span></span></code></pre></div>
<p>Any concrete type <code>a</code> instantiating <code>Shape</code> must implement the four functions <code>draw</code>, <code>move</code>, <code>area</code> and <code>circum</code>.</p>
<p>We start with a <code>Circle</code> type:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">-- | a circle defined by the centre point and a radius</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Circle</span> <span class="ot">=</span> <span class="dt">Circle</span> <span class="dt">Point</span> <span class="dt">Double</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">-- | a point in the two-dimensional plane</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Point</span> <span class="ot">=</span> <span class="dt">Point</span> <span class="dt">Double</span> <span class="dt">Double</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">-- | making Circle an instance of Shape</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">Circle</span> <span class="kw">where</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>  draw       (<span class="dt">Circle</span> centre radius) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Circle [&quot;</span> <span class="op">++</span> <span class="fu">show</span> centre <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> radius <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>  move (x,y) (<span class="dt">Circle</span> centre radius) <span class="ot">=</span> <span class="dt">Circle</span> (movePoint x y centre) radius</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>  area   (<span class="dt">Circle</span> _ r) <span class="ot">=</span> r <span class="op">^</span> <span class="dv">2</span> <span class="op">*</span> <span class="fu">pi</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>  circum (<span class="dt">Circle</span> _ r) <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> r <span class="op">*</span> <span class="fu">pi</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="co">-- | move a Point by an x and y amount</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="ot">movePoint ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>movePoint x y (<span class="dt">Point</span> x_a y_a) <span class="ot">=</span> <span class="dt">Point</span> (x_a <span class="op">+</span> x) (y_a <span class="op">+</span> y)</span></code></pre></div>
<p>As you can see, I’m not going to implement any real graphical rendering in <code>draw</code> but simply printing out the coordinates of the centre point and the radius. But at least <code>area</code> and <code>circum</code> implement the well-known geometrical properties of a circle.</p>
<p>Following this approach it’s straightforward to implement data types <code>Rect</code> and <code>Triangle</code>. Let’s start with <code>Rect</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | a rectangle defined by to points (bottom left and top right corners) </span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Rect</span> <span class="ot">=</span> <span class="dt">Rect</span> <span class="dt">Point</span> <span class="dt">Point</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">-- | making Rect an instance of Shape</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">Rect</span> <span class="kw">where</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>  draw       (<span class="dt">Rect</span> a b) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Rectangle [&quot;</span> <span class="op">++</span> <span class="fu">show</span> a <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> b <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>  move (x,y) (<span class="dt">Rect</span> a b) <span class="ot">=</span> <span class="dt">Rect</span> a&#39; b&#39;</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>      a&#39; <span class="ot">=</span> movePoint x y a</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>      b&#39; <span class="ot">=</span> movePoint x y b</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>  area rect   <span class="ot">=</span> width <span class="op">*</span> height</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>      (width, height) <span class="ot">=</span> widthAndHeight rect</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>  circum rect <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> (width <span class="op">+</span> height)</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>      (width, height) <span class="ot">=</span> widthAndHeight rect</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a><span class="co">-- | computes the width and height of a rectangle, returns them as a tuple</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a><span class="ot">widthAndHeight ::</span> <span class="dt">Rect</span> <span class="ot">-&gt;</span> (<span class="dt">Double</span>, <span class="dt">Double</span>)</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a>widthAndHeight (<span class="dt">Rect</span> (<span class="dt">Point</span> x_a y_a) (<span class="dt">Point</span> x_b y_b)) <span class="ot">=</span> (<span class="fu">abs</span> (x_b <span class="op">-</span> x_a), <span class="fu">abs</span> (y_b <span class="op">-</span> y_a))</span></code></pre></div>
<p>There is nothing special here, we are just implementing the functions specified by the <code>Shape</code> type class in a most simple way.</p>
<p>On to <code>Triangle</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">-- | a triangle defined by three points</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Triangle</span> <span class="ot">=</span> <span class="dt">Triangle</span> <span class="dt">Point</span> <span class="dt">Point</span> <span class="dt">Point</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">-- | making Triangle an instance of Shape</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">Triangle</span> <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>  draw       (<span class="dt">Triangle</span> a b c) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Triangle [&quot;</span> <span class="op">++</span> <span class="fu">show</span> a <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> b <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> c <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>  move (x,y) (<span class="dt">Triangle</span> a b c) <span class="ot">=</span> <span class="dt">Triangle</span> a&#39; b&#39; c&#39;</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>      a&#39; <span class="ot">=</span> movePoint x y a</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>      b&#39; <span class="ot">=</span> movePoint x y b</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>      c&#39; <span class="ot">=</span> movePoint x y c</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>  area   triangle <span class="ot">=</span> <span class="fu">sqrt</span> (s <span class="op">*</span> (s <span class="op">-</span> a) <span class="op">*</span> (s <span class="op">-</span> b) <span class="op">*</span> (s <span class="op">-</span> c)) <span class="co">-- using Heron&#39;s formula</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>      s <span class="ot">=</span> <span class="fl">0.5</span> <span class="op">*</span> (a <span class="op">+</span> b <span class="op">+</span> c)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>      (a, b, c) <span class="ot">=</span> sides triangle</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>  circum triangle <span class="ot">=</span> a <span class="op">+</span> b <span class="op">+</span> c</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>      (a, b, c) <span class="ot">=</span> sides triangle</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a><span class="co">-- | computing the length of all sides of a triangle, returns them as a triple</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a><span class="ot">sides ::</span> <span class="dt">Triangle</span> <span class="ot">-&gt;</span> (<span class="dt">Double</span>, <span class="dt">Double</span>, <span class="dt">Double</span>)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>sides (<span class="dt">Triangle</span> x y z) <span class="ot">=</span> (distance x y, distance y z, distance x z)</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true"></a><span class="co">-- | compute the distance between two points</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true"></a><span class="ot">distance ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true"></a>distance (<span class="dt">Point</span> x_a y_a) (<span class="dt">Point</span> x_b y_b) <span class="ot">=</span> <span class="fu">sqrt</span> ((x_b <span class="op">-</span> x_a) <span class="op">^</span> <span class="dv">2</span> <span class="op">+</span> (y_b <span class="op">-</span> y_a) <span class="op">^</span> <span class="dv">2</span>)</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true"></a></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true"></a><span class="co">-- | provide a more dense representation of a point</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Point</span> <span class="kw">where</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true"></a>  <span class="fu">show</span> (<span class="dt">Point</span> x y) <span class="ot">=</span> <span class="st">&quot;(&quot;</span> <span class="op">++</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot;,&quot;</span> <span class="op">++</span> <span class="fu">show</span> y <span class="op">++</span> <span class="st">&quot;)&quot;</span></span></code></pre></div>
<p>Let’s create three sample instances:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">rect ::</span> <span class="dt">Rect</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>rect <span class="ot">=</span> <span class="dt">Rect</span> (<span class="dt">Point</span> <span class="dv">0</span> <span class="dv">0</span>) (<span class="dt">Point</span> <span class="dv">5</span> <span class="dv">4</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="ot">circle ::</span> <span class="dt">Circle</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>circle <span class="ot">=</span> <span class="dt">Circle</span> (<span class="dt">Point</span> <span class="dv">4</span> <span class="dv">5</span>) <span class="dv">4</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="ot">triangle ::</span> <span class="dt">Triangle</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>triangle <span class="ot">=</span> <span class="dt">Triangle</span> (<span class="dt">Point</span> <span class="dv">0</span> <span class="dv">0</span>) (<span class="dt">Point</span> <span class="dv">4</span> <span class="dv">0</span>) (<span class="dt">Point</span> <span class="dv">4</span> <span class="dv">3</span>)</span></code></pre></div>
<p>Now we have all ingredients at hand for a little demo.</p>
<p>The type class <code>Shape</code> specifies a function <code>draw :: Shape a =&gt; a -&gt; IO ()</code>. This function is polymorphic in its argument: it will take an argument of any type <code>a</code> instantiating <code>Shape</code> and will perform an <code>IO ()</code> action, rendering the shape to the console in our case.</p>
<p>Let’s try it in GHCi:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="op">&gt;</span> draw circle</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="op">&gt;</span> draw rect</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">5.0</span>,<span class="fl">4.0</span>)]</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="op">&gt;</span> draw triangle</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="dt">Triangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">3.0</span>)]</span></code></pre></div>
<p>This code makes use of Haskell’s Ad-hoc polymorphism and elegantly fulfils the requirements given for Dynamic Polymorphism in Uncle Bob’s blog post: <em>“call functions without the source code of the caller depending upon the source code of the callee”</em>. On the call site, we just rely on the function <code>draw :: (Shape a) =&gt; a -&gt; IO ()</code>. This type signature assures us that it will work on any concrete type <code>a</code> that instantiates the <code>Shape</code> type class.</p>
<p>By making use of the reversed application operator <code>(&amp;)</code> we can create a more OOP look-and-feel to our code. Depending on the context it may be more convenient to write and read code using <code>(&amp;)</code> even when you are not after an OOP look-and-feel.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Function</span> ((&amp;))</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="op">&gt;</span> circle <span class="op">&amp;</span> draw</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span></code></pre></div>
<p>We can use the <code>(&amp;)</code> operator to even work in a <strong>fluent api</strong> style:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  rect</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="op">&amp;</span> move (<span class="dv">4</span>,<span class="dv">2</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>  </span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>  rect</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>  circle</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="op">&amp;</span> move (<span class="dv">4</span>,<span class="dv">2</span>)</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>  circle</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a><span class="op">&gt;</span> main</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">4.0</span>,<span class="fl">2.0</span>), (<span class="fl">9.0</span>,<span class="fl">6.0</span>)]</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">5.0</span>,<span class="fl">4.0</span>)]</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">8.0</span>,<span class="fl">7.0</span>), <span class="fl">4.0</span>]</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span></code></pre></div>
<p>In Haskell all values are immutable: printing the original shapes a second time demonstrates that operations like <code>move</code> are not destructive.</p>
<p>With this little setup we have shown that Haskell allows us to have both: Referential Transparency plus ad-hoc polymorphism. That is, we can use the essential elements of OOP and FP in one language. And: we are doing it all the time, as it’s quite <a href="https://www.haskell.org/tutorial/classes.html">common to use class types in this way.</a></p>
<h2 id="heterogeneous-collections">Heterogeneous collections</h2>
<p>In Haskell, container types like lists are polymorphic, but it is <strong>not</strong> possible to define a list like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">shapes ::</span> [<span class="dt">Shape</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>shapes <span class="ot">=</span> [circle,rect,triangle]</span></code></pre></div>
<p>because <strong>type classes are</strong> not types, but <strong>constraints on types</strong>.</p>
<p>So in haskell a list like <code>[circle,rect,triangle]</code> is considered to be heterogeneous, as the concrete types of all the elements differ.</p>
<p>There are <a href="https://wiki.haskell.org/Heterogenous_collections">several ways to have heterogeneous collections in Haskell</a>. I will demonstrate just one of them, which is based on <em>existential types</em>. (I have chosen this approach as it keeps the code easier to read and allows to add more <code>Shape</code> types whenever needed.</p>
<p>There is also a recent blog post on <a href="https://blog.sumtypeofway.com/posts/existential-haskell.html">Existential Haskell</a> which demonstrates some interesting use cases for existential types.</p>
<p>However, the <a href="https://github.com/thma/FPvsOO/blob/master/src/Lib.hs">sourcecode for this example</a> also demonstrates a solution based on a simple sum type.)</p>
<p>Once we activate the <code>ExistentialQuantification</code> language extension, we can define a data type <code>ShapeType</code> with a single constructor <code>MkShape</code> that will take any instance of a concrete type instantiating the <code>Shape</code> type class:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ExistentialQuantification #-}</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">ShapeType</span> <span class="ot">=</span> <span class="kw">forall</span> a <span class="op">.</span> (<span class="dt">Show</span> a, <span class="dt">Shape</span> a) <span class="ot">=&gt;</span> <span class="dt">MkShape</span> a</span></code></pre></div>
<p>Now we can make <code>ShapeType</code> an instance of <code>Shape</code> which will delegate all function calls to the wrapped types:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">ShapeType</span> <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>  area     (<span class="dt">MkShape</span> s) <span class="ot">=</span> area s</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>  circum   (<span class="dt">MkShape</span> s) <span class="ot">=</span> circum s</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>  draw     (<span class="dt">MkShape</span> s) <span class="ot">=</span> draw s</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>  move vec (<span class="dt">MkShape</span> s) <span class="ot">=</span> <span class="dt">MkShape</span> (move vec s)</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="co">-- we also have to manually derive a Show instance as auto deriving is not possible on the existential type</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">ShapeType</span> <span class="kw">where</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>  <span class="fu">show</span> (<span class="dt">MkShape</span> s) <span class="ot">=</span> <span class="fu">show</span> s</span></code></pre></div>
<p>With this setup we can define a list of shapes as follows:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="ot">shapes ::</span> [<span class="dt">ShapeType</span>]</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>shapes <span class="ot">=</span> [<span class="dt">MkShape</span> rect, <span class="dt">MkShape</span> circle, <span class="dt">MkShape</span> triangle]</span></code></pre></div>
<p>Finally, we are able to use this list just as any other:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> area shapes</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> circum shapes</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> (move (<span class="dv">4</span>,<span class="dv">10</span>)) shapes</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;&quot;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>  <span class="fu">mapM_</span> draw shapes</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a><span class="op">&gt;</span> main</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a>[<span class="fl">20.0</span>,<span class="fl">50.26548245743669</span>,<span class="fl">6.0</span>]</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>[<span class="fl">18.0</span>,<span class="fl">25.132741228718345</span>,<span class="fl">12.0</span>]</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a>[<span class="dt">Rect</span> (<span class="fl">4.0</span>,<span class="fl">10.0</span>) (<span class="fl">9.0</span>,<span class="fl">14.0</span>),<span class="dt">Circle</span> (<span class="fl">8.0</span>,<span class="fl">15.0</span>) <span class="fl">4.0</span>,<span class="dt">Triangle</span> (<span class="fl">4.0</span>,<span class="fl">10.0</span>) (<span class="fl">8.0</span>,<span class="fl">10.0</span>) (<span class="fl">8.0</span>,<span class="fl">13.0</span>)]</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">5.0</span>,<span class="fl">4.0</span>)]</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true"></a><span class="dt">Triangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">3.0</span>)]</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>In our short Demo we have seen that Haskell supports both Referential Transparency and Polymorphism. We have also seen that the reversed application operator <code>(&amp;)</code> allows us to structure code in a way that even has some kind of OOP look-and-feel while remaining purely functional.</p>
<p>If we follow Uncle Bob’s argumentation to view Polymorphism to be the central concept of OOP (and in consequence regard other important OO features like Inheritance or Encapsulation as not so distinctive), we can conclude that Haskell is already well prepared to implement programs in the hybrid way proposed by him.</p>
<p>In fact, the benefits associated with this approach (flexibility, maintainability, testability, simplicity, and robustness) are typical key features of systems implemented in Haskell.</p>
<hr />
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Thanks to <a href="https://github.com/treeowl">David Feuer</a> for helping me with a stupid error in the existential type code!</p>
<p>Thanks to the <a href="https://adventofhaskell.com/">Advent Of Haskell 2020 team</a> for having this blog post in their advents calendar!</p>
]]></summary>
</entry>
<entry>
    <title>Using Hakyll with GitHub Pages has become even easier!</title>
    <link href="https://thma.github.io//posts/2020-11-15-using-hakyll-with-github-pages.html" />
    <id>https://thma.github.io//posts/2020-11-15-using-hakyll-with-github-pages.html</id>
    <published>2020-11-15T00:00:00Z</published>
    <updated>2020-11-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on November 15, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>Over the weekend I’ve set up a <a href="https://jaspervdj.be/hakyll/">hakyll</a> powered blog on github pages (actually the one you are reading right now).</p>
<p>I’d like to share my findings, as I found an easier way to integrate Hakyll with GitHub Pages.</p>
<h2 id="the-documented-way">The documented way</h2>
<p>I followed the tutorial <a href="https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html">Using Hakyll with GitHub Pages</a>. This tutorial assumes that the GitHub pages must always be served from the root folder of a github repository.</p>
<p>It then describes a way to achieve this by using a <code>develop</code> branch to do all the Hakyll work and finally writing the contents to the default <code>_site</code> folder. This folder is excluded from version control by entries in the <code>.gitignore</code> file both in the <code>develop</code> and <code>master</code> branches.</p>
<p>So to finally publish the generated site you’ll have to switch to the <code>master</code> branch and copy the contents of the <code>_site</code> folder to the root folder of your project.</p>
<p>I tried this approach and it works nicely.</p>
<p>But then I found out that GitHub pages also allows to use a <code>docs</code> folder as the document root of your GitHub Pages site.</p>
<p>This makes things significantly easier, as you can do all the necessary hakyll tasks and the final publishing on the same <code>master</code> branch.</p>
<h2 id="the-easier-way">The easier way</h2>
<h3 id="github-setup">GitHub setup</h3>
<ol type="1">
<li>If required, create a new GitHub repository for your blog.</li>
<li>If required, create a master branch.</li>
<li>in the Settings of your GitHub project define that the <code>/docs</code> folder from the <code>master</code> branch should be used as document-root of your site. Please refer to the <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source">documentation</a> in case of problems.</li>
<li>Create a .gitignore file with at a minimum, the following entries:</li>
</ol>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">_cache/</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ex">.stack-work/</span></span></code></pre></div>
<h3 id="local-setup">Local setup</h3>
<p>If required, create a new Hakyll project. If you’re a stack user, there is a Hakyll template available that makes this step easy:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ex">stack</span> new myblog hakyll-template</span></code></pre></div>
<p>Create a .gitignore file in your blog’s directory with at a minimum, the same directories listed as in the GitHub repository. Use the following git commands to setup your local repository:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">git</span> init</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co"># track all the source files for our blog.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="fu">git</span> add .</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co"># make our first commit</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="fu">git</span> commit -m <span class="st">&quot;initial commit.&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="co"># and add the GitHub repository as a remote.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="fu">git</span> remote add origin <span class="op">&lt;</span>URL to your GitHub pages repository<span class="op">&gt;</span></span></code></pre></div>
<h3 id="modify-site.hs">Modify site.hs</h3>
<p>In order to make Hakyll generate the site into the <code>docs</code> folder we have to edit the Hakyll Main module (<code>site.hs</code> if you use the stack template) slightly:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">config ::</span> <span class="dt">Configuration</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>config <span class="ot">=</span> defaultConfiguration</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  { destinationDirectory <span class="ot">=</span> <span class="st">&quot;docs&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>  }</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>  hakyllWith config <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>  <span class="op">...</span></span></code></pre></div>
<h3 id="deployment">Deployment</h3>
<p>So everything’s all setup, and we’re ready to deploy.</p>
<p>We need to be able to run the executable that generates the website, so we need to compile it first. If you are using stack, this can be done using:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">stack</span> build</span></code></pre></div>
<p>Next we get a clean build of our site:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ex">stack</span> exec myblog clean</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ex">stack</span> exec myblog build</span></code></pre></div>
<p>After this step you should see a folder <code>docs</code> under your projects root folder, which contains the generated Hakyll site.</p>
<p>Now we commit our changes:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="fu">git</span> add -A</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="fu">git</span> commit -m <span class="st">&quot;Publish.&quot;</span></span></code></pre></div>
<p>And send them to GitHub:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">git</span> push origin master:master</span></code></pre></div>
<p>That’s all.</p>
<p>Now your Hakyll site should be visible under your GitHub Pages URL!</p>
<h2 id="view-the-source">View the source</h2>
<p>The source code for this blog post lies under my <a href="https://github.com/thma/thma.github.io">thma.github.io</a> GitHub project. I’ve adopted the composeconference css from <a href="http://katychuang.com/hakyll-cssgarden/gallery/">Katy Chuangs great Hakyll CSS Garden</a> and tweaked it a little bit to look more like GitHub markdown style and to provide some basic responsive design.</p>
<h2 id="update-nov.-24th-2020">Update Nov. 24th 2020</h2>
<p>The Hakyll project has just accepted my pull request for the Using Hakyll with GitHub Pages tutorial, which updates the text according to the findings presented in this post.</p>
<p>The amended version will thus be online shortly, rendering this blog entry kind of obsolete…</p>
]]></summary>
</entry>
<entry>
    <title>Implementing Clean Architecture with Haskell and Polysemy</title>
    <link href="https://thma.github.io//posts/2020-05-29-polysemy-clean-architecture.html" />
    <id>https://thma.github.io//posts/2020-05-29-polysemy-clean-architecture.html</id>
    <published>2020-05-29T00:00:00Z</published>
    <updated>2020-05-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on May 29, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p><a href="https://github.com/thma/PolysemyCleanArchitecture/actions"><img src="https://github.com/thma/PolysemyCleanArchitecture/workflows/Haskell%20CI/badge.svg" alt="Actions Status" /></a></p>
<h2 id="tldr">tl;dr</h2>
<p>This article shows how algebraic effect systems can be used to maintain a clear separation of concerns between different parts of software systems. From a practical programming perspective this improves composability and testability of software components.</p>
<p>I’m demonstrating this idea by using the Polysemy library to implement a multi-layered REST application conforming to the guidelines of the Clean Architecture model.</p>
<h2 id="motivation">Motivation</h2>
<p>While writing <a href="https://github.com/thma/WhyHaskellMatters#readme">Why Haskell Matters</a> I prepared a little demo application that was meant to showcase a cleanly designed REST application in Haskell. In particular, I wanted to demonstrate how the clear separation of <em>pure</em> and <em>impure</em> code helps to provide strict separation of concerns and state-of-the-art testability of all application layers.</p>
<p><strong>I failed!</strong></p>
<p>I was able to write the domain logic in <em>pure</em> code consisting only of <em>total</em> functions. It was a great pleasure to write unit tests for them!</p>
<p>However, as soon as I started writing controllers that coordinate access to the domain logic as well as to a persistence layer to retrieve and store data, I was stuck in the IO Monad. That is, in test cases I was not able to test the controllers independently of the concrete backend.</p>
<p>Then I tried to apply the <em>final tagless</em> pattern for the persistence layer. This allowed abstracting out the concrete persistence layer and writing controller tests with a mocked persistence backend. But when it came to testing the REST API handlers (written with Servant) I was again stuck in the IO Monad as the Handler type is defined as <code>newtype Handler a = Handler { runHandler' :: ExceptT ServerError IO a }</code>. Maybe it’s not a principle issue but just my brain being too small…</p>
<p>I was desperately looking for something that allowed me to combine different types of effects (like persistence, logging, configuration, http handlers, error handling, etc.) in controllers and handlers but still to be able to write tests that allow using mocks or stubs to test components in isolation.</p>
<p>As I reached a dead end, I had a look at some of the <em>algebraic effect systems</em> available in Haskell, like eff, extensible-effects, fused-effects, freer-simple and Polysemy.</p>
<p>In algebraic effect systems, effectful programs are split into two separate parts: the specification of the effects to be performed, and the interpretation (or semantics) given to them.</p>
<p>So my idea was to provide special effect interpretations that would allow building mocked effects for my test suite.</p>
<p>After seeing a <a href="https://youtu.be/kIwd1D9m1gE">presentation on maintainable software architecture with Polysemy</a> which answered many of my questions I rewrote my application based on Polysemy powered algebraic effects.</p>
<p>I’m pretty satisfied with the result, and of course I’m eager to share my approach with you!</p>
<h2 id="the-challenge">The Challenge</h2>
<p>A very small boutique restaurant (serving excellent vietnamese food) is looking for a reservation system that allows managing reservations. The restaurant has only twenty seats, they also take only a maximum of twenty reservations per day. (So guests can stay the whole evening and don’t have to leave after some time.) (I adopted this scenario from a inspiring <a href="https://youtu.be/US8QG9I1XW0">talk by Mark Seemann</a>)</p>
<p>They have asked us to write the REST backend for their reservation system.</p>
<p>The chef insists on a scrupulously clean kitchen and is also a lover of clean code. He has read about clean architecture and wants his new software to be a perfect example!</p>
<p>So we cannot just hack away but first have to understand what is expected from us when we are to deliver a clean architecture.</p>
<h2 id="what-makes-a-clean-architecture">What makes a Clean Architecture ?</h2>
<p>I’m following the introduction to clean architecture by Robert C. Martin on his <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Code blog</a>. He states that his concept builds up on several earlier approaches like <a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">hexagonal architecture</a>, <a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">ports and adapters</a> or <a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/">Onion Architecture</a>.</p>
<p>According to him all these approaches share a similar objective: achieve separation of concerns by dividing a software system into different layers. All approaches result in system designs that share a common set of features:</p>
<ol type="1">
<li><p>The architecture does not depend on any specific software libraries or frameworks. This allows to freely choose such tools according to the actual needs. This avoids “vendor lock in”.</p></li>
<li><p>High testability. The business logic can be tested without any external element like UI, DB, Web Server, etc.</p></li>
<li><p>The UI is loosely coupled to the core system. So it can be easily changed or replaced without affecting the rest of the system.</p></li>
<li><p>The Database is also “external” to the core system. It can be easily changed (even from an RDBMS to NonSQL DB) without affecting the business logic.</p></li>
<li><p>The Business logic is agnostic of the outside world. It has no dependencies to any external systems like DB, ESB, etc.</p></li>
</ol>
<h3 id="layers-with-clearly-separated-responsibilities">Layers with clearly separated responsibilities</h3>
<p>The architecture consists of four layers, each of which contains components with a specific scope and a limited set of responsibilities.</p>
<ol type="1">
<li><p>At the centre sits the <strong>Domain</strong> layer consisting of entities and core business logic.</p></li>
<li><p>Next comes the <strong>Use Cases</strong> layer where all resources are coordinated that are required to fulfill a given use case. In particular, it uses entities and logic from the domain layer to implement use cases. But typically it must also interface to a persistent storage to retrieve and store entities.</p></li>
<li><p>The <strong>Interface Adapters</strong> layer holds code for UI controllers and presenters as well as adapters to external resources like databases, message queues, configuration, Logging, etc.</p></li>
<li><p>The <strong>External Interfaces</strong> layer contains the technical implementation of external interfaces. For example, a concrete REST service assembly, Web and UI infrastructure, databases, etc.</p></li>
</ol>
<h3 id="the-dependency-rule">The Dependency Rule</h3>
<blockquote>
<p>The overriding rule that makes this architecture work is The Dependency Rule. This rule says that source code dependencies can only point inwards. Nothing in an inner circle can know anything at all about something in an outer circle. In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle. That includes, functions, classes. variables, or any other named software entity.</p>
<p>Quoted from <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>This dependency rule leads to a very interesting consequence: If a use case interactor needs to access a component from an outer circle, e.g. retrieve data from a database, this must be done in a specific way in order to avoid breaking the dependency rule: In the use case layer we don’t have any knowledge about the components of the outer circles. <strong>If we require access to a database (or any other external resources), the call interface, as well as the data transfer protocol must be specified in the use case layer.</strong></p>
<p>The components in the outer circles will then implement this interface. Using this kind of interfaces, it is possible to communicate accross the layer boundaries, but still maintain a strict separation of concerns.</p>
<p>If you want to dive deeper into clean architecture I recommend the <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a> as an entry point. Robert C. Martin later also published a whole book <a href="https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164">Clean Architecture: A Craftsman’s Guide to Software Structure and Design</a> on this concept.</p>
<p>In the following sections I’ll explain how the clean architecture guidelines can be implemented in a Haskell REST API application by making use of the algebraic effect library <a href="https://github.com/polysemy-research/polysemy#readme">Polysemy</a>.</p>
<h2 id="the-domain-layer">The Domain layer</h2>
<p>The <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/Domain/ReservationDomain.hs">ReservationDomain</a> module implements the business logic for seat reservations in a very small boutique restaurant. The restaurant has only one big table with 20 seats. Each day the restaurants accepts only 20 reservations. (There is no limited time-slot for each guest.)</p>
<p>Please note: - all functions in this module are <strong>pure</strong> (they don’t do any IO) and <strong>total</strong> (they produce defined results for all possible input values).</p>
<ul>
<li>The definitions in this module do not have dependencies to anything from the outer circles.</li>
</ul>
<p>At the core of our Domain lies the <code>Reservation</code> data type:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- | a data type representing a reservation</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Reservation</span> <span class="ot">=</span> <span class="dt">Reservation</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    {<span class="ot"> date     ::</span> <span class="dt">Day</span>     <span class="co">-- ^ the date of the reservation</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    ,<span class="ot"> name     ::</span> <span class="dt">String</span>  <span class="co">-- ^ the name of the guest placing the reservation</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    ,<span class="ot"> email    ::</span> <span class="dt">String</span>  <span class="co">-- ^ the email address of the guest</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    ,<span class="ot"> quantity ::</span> <span class="dt">Natural</span> <span class="co">-- ^ how many seats are requested</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    }</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Generic</span>, <span class="dt">Read</span>, <span class="dt">Show</span>)</span></code></pre></div>
<p>This type can be used to express facts like <em>Mr. Miller reserved two seats on 2020-06-01, he can be reached via his email address: manfred@miller.com</em>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>reservation <span class="ot">=</span> <span class="dt">Reservation</span> {name <span class="ot">=</span> <span class="st">&quot;Mr. Miller&quot;</span>, quantity <span class="ot">=</span> <span class="dv">2</span>, date <span class="ot">=</span> <span class="fu">read</span> <span class="st">&quot;2020-06-01&quot;</span>, email <span class="ot">=</span> <span class="st">&quot;manfred@miller.com&quot;</span>}</span></code></pre></div>
<p>All reservations of a specific day are represented as a list of reservations: <code>[Reservation]</code>.</p>
<p>A <code>ReservationMap</code> is a map from <code>Day</code> to <code>[Reservation]</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | a key value map holding a list of reservations for any given day</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">ReservationMap</span> <span class="ot">=</span> <span class="dt">Map</span> <span class="dt">Day</span> [<span class="dt">Reservation</span>]</span></code></pre></div>
<p>That is, we can keep track of all reservations by maintaining them in such a map:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>fromList </span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  [</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    (</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>      <span class="dv">2020</span><span class="op">-</span><span class="dv">06</span><span class="op">-</span><span class="dv">01</span>,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>        [</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>          <span class="dt">Reservation</span> {date <span class="ot">=</span> <span class="dv">2020</span><span class="op">-</span><span class="dv">06</span><span class="op">-</span><span class="dv">01</span>, name <span class="ot">=</span> <span class="st">&quot;Mr. Miller&quot;</span>, email <span class="ot">=</span> <span class="st">&quot;manfred@miller.com&quot;</span>, quantity <span class="ot">=</span> <span class="dv">2</span>}, </span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>          <span class="dt">Reservation</span> {date <span class="ot">=</span> <span class="dv">2020</span><span class="op">-</span><span class="dv">06</span><span class="op">-</span><span class="dv">01</span>, name <span class="ot">=</span> <span class="st">&quot;Andrew M. Jones&quot;</span>, email <span class="ot">=</span> <span class="st">&quot;amjones@example.com&quot;</span>, quantity <span class="ot">=</span> <span class="dv">4</span>}</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        ]</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    )</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>Based on these data types we can define domain logic like computing the used capacity of a list of reservations:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">-- | computes the number of reserved seats for a list of reservations</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">usedCapacity ::</span> [<span class="dt">Reservation</span>] <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>usedCapacity [] <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>usedCapacity (<span class="dt">Reservation</span> _ _ _ quantity <span class="op">:</span> rest) <span class="ot">=</span> quantity <span class="op">+</span> usedCapacity rest</span></code></pre></div>
<p>Based on this we can compute the number of available seats (given a maximum capacity and a list of reservations):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">-- | computes the number of available seats from a maximum capacity and a list of reservations.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">availableSeats ::</span> <span class="dt">Natural</span><span class="ot">-&gt;</span> [<span class="dt">Reservation</span>] <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>availableSeats maxCapacity reservations <span class="ot">=</span> maxCapacity <span class="op">-</span> usedCapacity reservations</span></code></pre></div>
<p>The <code>Reservation</code> data type and some of the domain logic functions are depicted in the in the following diagram:</p>
<figure>
<img src="/img/domain.png" alt="" /><figcaption>The Domain layer</figcaption>
</figure>
<h3 id="testing">Testing</h3>
<p>As already mentioned: this layer has no knowledge of the world and it’s all pure code. Testing domain logic in isolation therefore is straight forward, as you can see from the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/test/DomainSpec.hs">DomainSpec</a> code.</p>
<p>The data types and functions of the domain layer can be used directly, without any mocking of components:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>day <span class="ot">=</span> fromGregorian <span class="dv">2020</span> <span class="dv">1</span> <span class="dv">29</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>res1 <span class="ot">=</span> <span class="dt">Reservation</span> day <span class="st">&quot;Andrew M. Jones&quot;</span> <span class="st">&quot;amjones@example.com&quot;</span> <span class="dv">4</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>res2 <span class="ot">=</span> <span class="dt">Reservation</span> day <span class="st">&quot;Thomas Miller&quot;</span> <span class="st">&quot;tm@example.com&quot;</span> <span class="dv">3</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>reservations <span class="ot">=</span> [res1, res2]</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>totalCapacity <span class="ot">=</span> <span class="dv">20</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>  describe <span class="st">&quot;Domain Logic&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>    it <span class="st">&quot;computes the used capacity for an empty list of reservations&quot;</span> <span class="op">$</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>      usedCapacity [] <span class="ot">`shouldBe`</span> <span class="dv">0</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>    it <span class="st">&quot;computes the used capacity for a list of reservations&quot;</span> <span class="op">$</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>      usedCapacity [res1, res2] <span class="ot">`shouldBe`</span> <span class="dv">7</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>      </span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>    it <span class="st">&quot;computes the available seats for a list of reservations&quot;</span> <span class="op">$</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>      availableSeats totalCapacity [res1, res2] <span class="ot">`shouldBe`</span> <span class="dv">13</span></span></code></pre></div>
<h2 id="the-use-case-layer">The Use Case layer</h2>
<blockquote>
<p>The software in this layer contains application specific business rules. It encapsulates and implements all of the use cases of the system. These <strong>use cases orchestrate the flow of data to and from the entities, and direct those entities to use their enterprise wide business rules to achieve the goals of the use case.</strong></p>
<p>Quoted from the <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>The module <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/UseCases/ReservationUseCase.hs">ReservationUseCase</a> specifies the available use cases for the reservation system. It coordinates access to Effects and the actual domain logic. The module exposes service functions that will be used by the REST API in the ExternalInterfaces layer.</p>
<p>Implemented Use Cases:</p>
<ol type="1">
<li><p>Display the number of available seats for a given day</p></li>
<li><p>Enter a reservation for a given day and keep it persistent. If the reservation can not be served as all seats are occupies provide a functional error message stating the issue.</p></li>
<li><p>Display the list of reservations for a given day.</p></li>
<li><p>Delete a given reservation from the system in case of a cancellation. NO functional error is required if the reservation is not present in the system.</p></li>
<li><p>Display a List of all reservation in the system.</p></li>
</ol>
<p>In the Use Case layer we have left the garden Eden of <em>world agnostic</em> code:</p>
<p>In order to compute the number of available seats for a given day, we will have to first look up the actual reservations for that day from a persistent storage, and only then can we call the domain function <code>availableSeats</code>. In addition we also will have to write a Log message when calling the functions to provide an audit trail.</p>
<p><strong>However, the dependency rule of clean architecture bans all direct access to a database or a logging-infrastructure from the use case layer!</strong></p>
<h3 id="how-can-we-define-such-a-use-case-without-violating-the-dependency-rule">How can we define such a use case without violating the dependency rule?</h3>
<p>Algebraic Effect systems offer a consistent answer: 1. We <strong>declare effects</strong> in the use case layer by defining them as an abstract interface.</p>
<ol start="2" type="1">
<li><p>We also specify the actual <strong>usage of effects</strong> in the use case layer by having calls against the abstract interface.</p></li>
<li><p>We provide an <strong>interpretation</strong> of these effects only in the outer layers. This also allows us to provide different implementations. So we can easily swap backends, e.g. migrating from MySQL to PostgreSQL, and it can be used to provide mock implementations for testing purposes.</p></li>
</ol>
<p>Let’s see how all this looks like when using Polysemy.</p>
<h3 id="usage-of-effects">Usage of effects</h3>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- | compute the number of available seats for a given day. the result must be a natural number, incl. 0</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">availableSeats ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r <span class="dt">Natural</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>availableSeats day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;compute available seats for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>  todaysReservations <span class="ot">&lt;-</span> fetch day</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> Dom.availableSeats maxCapacity todaysReservations</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a><span class="co">-- | fetch the list of reservations for a given day from the key value store.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a><span class="co">--   If no match is found, an empty list is returned.</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a><span class="ot">fetch ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r [<span class="dt">Dom.Reservation</span>]</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>fetch day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;fetch reservations for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>  maybeList <span class="ot">&lt;-</span> getKvs day</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> fromMaybe [] maybeList</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a><span class="co">-- | the maximum capacity of the restaurant.</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a><span class="ot">maxCapacity ::</span> <span class="dt">Natural</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>maxCapacity <span class="ot">=</span> <span class="dv">20</span></span></code></pre></div>
<p>The type signature of <code>availableSeats</code> contains two constraints on the <em>effect stack</em> type <code>r</code>: <code>(Member Persistence r, Member Trace r)</code> This means that the function may perform two different effects: persistence via the <code>Persistence</code> effect and Logging via the <code>Trace</code> effect.</p>
<p>The type signature also specifies that we need an input of type <code>Day</code> and will return the <code>Natural</code> result wrapped in the <code>Sem r</code> monad.</p>
<p>The <code>Sem</code> monad handles computations of arbitrary extensible effects. A value of type <code>Sem r</code> describes a program with the capabilities of the effect stack <code>r</code>.</p>
<p>The first step of the function body of <code>availableSeats</code> specifies a Log action based on the (Polysemy built-in) <code>Trace</code> effect:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;compute available seats for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span></code></pre></div>
<p>I repeat: <code>trace</code> does not directly do any logging. The actual logging action - the effect interpretation - will be defined in the application assembly or in a test setup.</p>
<p>The next line specifies a lookup of the reservation list for <code>day</code> from the persistence layer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>  todaysReservations <span class="ot">&lt;-</span> fetch day</span></code></pre></div>
<p>where fetch is defined as:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="ot">fetch ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r [<span class="dt">Dom.Reservation</span>]</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>fetch day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;fetch reservations for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>  maybeList <span class="ot">&lt;-</span> getKvs day</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> fromMaybe [] maybeList</span></code></pre></div>
<h3 id="declaration-of-effects">Declaration of effects</h3>
<p>To understand the <code>fetch</code> function, in particular the expression <code>maybeList &lt;- getKvs day</code> we first have to know the definition of the <code>Persistence</code> effect:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Persistence</span> <span class="ot">=</span> <span class="dt">KVS</span> <span class="dt">Day</span> [<span class="dt">Dom.Reservation</span>]</span></code></pre></div>
<p>Where KVS (standing for Key/Value Store) is a type that is also defined in the use case layer (<a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/UseCases/KVS.hs">KVS.hs</a>):</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="co">-- | a key value store specified as a GADT</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">KVS</span> k v m a <span class="kw">where</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="dt">ListAllKvs</span><span class="ot"> ::</span> <span class="dt">KVS</span> k v m [(k, v)]</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="dt">GetKvs</span><span class="ot">     ::</span> k <span class="ot">-&gt;</span> <span class="dt">KVS</span> k v m (<span class="dt">Maybe</span> v)</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>  <span class="dt">InsertKvs</span><span class="ot">  ::</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">KVS</span> k v m ()</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>  <span class="dt">DeleteKvs</span><span class="ot">  ::</span> k <span class="ot">-&gt;</span> <span class="dt">KVS</span> k v m ()</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>makeSem &#39;<span class="dt">&#39;KVS</span></span></code></pre></div>
<p>The four operations of the key value store are defined in the GADT as type constructors. <code>makeSem ''KVS</code> then uses TemplateHaskell to generate effect functions (or smart Constructors) from the GADT definition. This call results in the definition of the following four functions that represent the specific operations of the key value store:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">listAllKvs ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> <span class="dt">Sem</span> r [(k, v)]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="ot">getKvs     ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">Maybe</span> v)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="ot">insertKvs  ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="ot">deleteKvs  ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span></code></pre></div>
<p>These functions can be used in the <code>Sem</code> Monad. So now we understand much better what is going on in <code>fetch</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">fetch ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r [<span class="dt">Dom.Reservation</span>]</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>fetch day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;fetch reservations for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>  maybeList <span class="ot">&lt;-</span> getKvs day</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> fromMaybe [] maybeList</span></code></pre></div>
<p>As <code>fetch</code> operates in the <code>Sem</code> monad, <code>maybeList</code> is bound to a <code>Maybe [Dom.Reservation]</code> value, which results from the <code>getKVs day</code> action. The function finally uses <code>fromMaybe</code> to return a list of reservations that were retrieved (or <code>[]</code> in case <code>Nothing</code> was found for <code>day</code>).</p>
<p>Then, back in <code>availableSeats</code> we call the domain logic function <code>Dom.availableSeats</code> to compute the number of available seats. The resulting <code>Natural</code> value is lifted into the <code>Sem r</code> monad, thus matching the signature of the return type <code>Sem r Natural</code>.</p>
<p>In the next diagram I’m depicting the layers Use Cases and Domain. The arrow from Use Cases to Domain represents the dependency rule: use case code may only reference domain logic but the domain logic may not reference anything from the use case layer.</p>
<p>On the left side of the diagram we see the use case controllers (aka <em>use case interactors</em>) like <code>availableSeats</code> that coordinate all activities and resources to fulfill a specific use case.</p>
<p>On the right we see the gateway (or interface) code like the <code>KVS</code> abstraction of a key-value store or the <code>fetch</code> operation that wraps the access to the key-value store.</p>
<figure>
<img src="/img/use-cases.png" alt="" /><figcaption>Use Cases layer</figcaption>
</figure>
<h3 id="interpretation-of-effects-testing">Interpretation of effects / Testing</h3>
<p>The key value store functions like <code>getKvs</code> don’t perform any concrete operation. They just <code>declare</code> access to an abstract key-value store interface.</p>
<p>The concrete interpretation of these calls will be specified in the application assembly (typically in <code>Main.hs</code>) or in the setup code of test cases. If we provide a <em>pure</em> interpretation then the resulting code will also be pure. This allows writing tests in the same pure way as for the domain logic.</p>
<p>As an example, in <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/test/UseCasePureSpec.hs">UseCasePureSpec</a> I’m providing pure interpretations for all effects.</p>
<p>The <code>runPure</code> function takes a program with effects and handles each effect till it gets reduced to <code>Either ReservationError (ReservationMap‚ a)</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="ot">runPure ::</span> <span class="dt">ReservationMap</span> </span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">Sem</span> &#39;[<span class="dt">UC.Persistence</span>, <span class="dt">State</span> <span class="dt">ReservationMap</span>, <span class="dt">Error</span> <span class="dt">UC.ReservationError</span>, <span class="dt">Trace</span>] a </span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">UC.ReservationError</span> (<span class="dt">ReservationMap</span>, a)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>runPure kvsMap program <span class="ot">=</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>  program</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>     <span class="op">&amp;</span> runKvsPure kvsMap              <span class="co">-- run the key-value store on a simple ReservationMap</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a>     <span class="op">&amp;</span> runError <span class="op">@</span><span class="dt">UC.ReservationError</span>  <span class="co">-- run error handling to produce an Either UC.ReservationError (ReservationMap, a)</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>     <span class="op">&amp;</span> ignoreTrace                    <span class="co">-- run Trace by simply ignoring all messages </span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>     <span class="op">&amp;</span> run                            <span class="co">-- run a &#39;Sem&#39; containing no effects as a pure value</span></span></code></pre></div>
<p>In addition to that I’m providing wrapping functions like <code>runAvailableSeats</code> that use <code>runPure</code> to interprete the effects of the use case functions (eg. <code>UC.availableSeats</code>) and extract the actual result from the <code>[Either UC.ReservationError (ReservationMap, a)]</code> return value:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="ot">runAvailableSeats ::</span> <span class="dt">ReservationMap</span> <span class="ot">-&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>runAvailableSeats kvsMap day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>  <span class="kw">case</span> runPure kvsMap (UC.availableSeats day) <span class="kw">of</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>    <span class="dt">Right</span> (_, numSeats) <span class="ot">-&gt;</span> numSeats</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    <span class="dt">Left</span> err            <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;availableSeats failed&quot;</span></span></code></pre></div>
<p>This is all that it takes to abstract away persistence layer, logging facility and exception handling. We can now write tests in pure code:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="co">-- setting up test fixtures</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a><span class="ot">initReservations ::</span> <span class="dt">ReservationMap</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>initReservations <span class="ot">=</span> M.singleton day res</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>day <span class="ot">=</span> <span class="fu">read</span> <span class="st">&quot;2020-05-02&quot;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>res <span class="ot">=</span> [<span class="dt">Reservation</span> day <span class="st">&quot;Andrew M. Jones&quot;</span> <span class="st">&quot;amjones@example.com&quot;</span> <span class="dv">4</span>]</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a>  describe <span class="st">&quot;Reservation Use Case (only pure code)&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true"></a>  </span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true"></a>    it <span class="st">&quot;computes the number of available seats for a given day&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true"></a>      (runAvailableSeats initReservations day) <span class="ot">`shouldBe`</span> <span class="dv">16</span></span></code></pre></div>
<h2 id="the-interface-adapters-layer">The Interface Adapters layer</h2>
<p>This layer holds code for adapters to external resources like databases, message queues, configuration, Logging, etc.</p>
<p>The Logging effect <code>Trace</code> ships with Polysemy, so we don’t have to implement anything here. (Of course we could overzealously implement our own Graylog adapter here, Hingegen hat unser <code>reservationServer</code> eine Typensignatur but I leave this as an exercise for the reader… )</p>
<p>However, as the <code>KVS</code> type is our own invention we’ll have to provide our own implementations. (We could have used the <code>KVStore</code> type from <a href="https://hackage.haskell.org/package/polysemy-zoo-0.7.0.0/docs/Polysemy-KVStore.html">polysemy-zoo</a>, but for didactic purposes we will roll our own.)</p>
<p>The following code is the in-memory implementation from the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/InterfaceAdapters/KVSInMemory.hs">KVSInMemory</a> module. It defines a key-value store in terms of <code>State (Map k v)</code> that is a <code>Map k v</code> in a <code>State</code> effect context:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="ot">runKvsOnMapState ::</span> ( <span class="dt">Member</span> (<span class="dt">State</span> (<span class="dt">M.Map</span> k v)) r, <span class="dt">Ord</span> k) </span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>                 <span class="ot">=&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> r) a </span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>                 <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>runKvsOnMapState <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>  <span class="dt">ListAllKvs</span>    <span class="ot">-&gt;</span> <span class="fu">fmap</span> M.toList get</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>  <span class="dt">GetKvs</span> k      <span class="ot">-&gt;</span> <span class="fu">fmap</span> (M.lookup k) get</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>  <span class="dt">InsertKvs</span> k v <span class="ot">-&gt;</span> modify <span class="op">$</span> M.insert k v</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true"></a>  <span class="dt">DeleteKvs</span> k   <span class="ot">-&gt;</span> modify <span class="op">$</span> M.delete k</span></code></pre></div>
<p>So whenever the <code>interpret</code> functions detects a <code>GetKvs k</code> value, that was constructed by a call to <code>getKvs k</code> in the use case layer, it pattern-matches it to a <code>Map</code> lookup of <code>k</code> that is executed against state retrieved by <code>get</code>.</p>
<p>Interestingly <code>get</code> is a smart constructor of the <code>State</code> effect. This means that by interpreting the <code>KVS</code> we have created new effects that in turn have to be interpreted.</p>
<p>The <code>runKvsPure</code> functions (which we already have seen in the use case testing) chains interpretation of the effects <code>KVS</code> and <code>State</code> and thus allows us to work with pure Maps as mocks for a key-value store:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="ot">runKvsPure ::</span> <span class="dt">Ord</span> k </span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>           <span class="ot">=&gt;</span> <span class="dt">M.Map</span> k v</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>           <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> <span class="dt">State</span> (<span class="dt">M.Map</span> k v) <span class="op">:</span> r) a </span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>           <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">M.Map</span> k v, a)</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>runKvsPure <span class="fu">map</span> <span class="ot">=</span> runState <span class="fu">map</span> <span class="op">.</span> runKvsOnMapState</span></code></pre></div>
<h3 id="a-key-value-store-with-a-sqlite-backend.">A key-value store with a SQLite backend.</h3>
<p>As we are in the interface adapters layer, we are allowed to get our hands dirty with <em>real world code</em>, like database access. As an example I have provided a SQLite based interpretation of the <code>KVS</code> effect in <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/InterfaceAdapters/KVSSqlite.hs">KVSSqllite.hs</a>.</p>
<p>The effect interpreting function is <code>runKvsAsSQLite</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="co">-- | Run a KVStore effect against a SQLite backend. Requires a Config object as input.</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a><span class="ot">runKvsAsSQLite ::</span> (<span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r, <span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r, <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Show</span> k, <span class="dt">Read</span> k, <span class="dt">ToJSON</span> v, <span class="dt">FromJSON</span> v)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>                   <span class="ot">=&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> r) a</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>                   <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>runKvsAsSQLite <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>  <span class="dt">GetKvs</span> k      <span class="ot">-&gt;</span> getAction k</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a>  <span class="dt">ListAllKvs</span>    <span class="ot">-&gt;</span> listAction</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true"></a>  <span class="dt">InsertKvs</span> k v <span class="ot">-&gt;</span> insertAction k v</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true"></a>  <span class="dt">DeleteKvs</span> k   <span class="ot">-&gt;</span> deleteAction k</span></code></pre></div>
<p>The function’s type signature introduces a two more constraints on the effect stack type <code>r</code>: <code>Member (Embed IO) r</code> and <code>Member (Input Config) r</code>. <code>(Embed IO)</code> is needed as accessing SQLite will require IO, which can be lifted into the <code>Sem r</code> monad with <code>Embed IO</code>.</p>
<p>SQLite always needs a file name to create a database connection. As we want to be able to keep this name configurable, we use the <code>(Input Config)</code> effect. <code>Config</code> is a data type that I created to represent global application configuration, including the database file name. <code>Input</code> is a Polysemy built-in effect which can provide input to an application, quite similar to a <code>Reader</code> monad.</p>
<p>These effects are introduced by the actual implementations of the <code>KVS</code> constructors, like <code>getAction k</code>, which retrieves a value from the database by looking up the key <code>k</code>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ot">getAction ::</span> (<span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r, <span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r, <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Show</span> k, <span class="dt">Read</span> k, <span class="dt">ToJSON</span> v, <span class="dt">FromJSON</span> v) <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">Maybe</span> v)</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>getAction key <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>  conn <span class="ot">&lt;-</span> connectionFrom input</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>  rows <span class="ot">&lt;-</span> embed (SQL.queryNamed conn</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>                      <span class="st">&quot;SELECT key, value FROM store WHERE key = :key&quot;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>                      [<span class="st">&quot;:key&quot;</span> <span class="op">:=</span> <span class="fu">show</span> key]<span class="ot"> ::</span> <span class="dt">IO</span> [<span class="dt">KeyValueRow</span>])</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;get: &quot;</span> <span class="op">++</span> <span class="fu">show</span> rows</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a>  <span class="kw">case</span> rows <span class="kw">of</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a>    []                          <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="dt">Nothing</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>    (<span class="dt">KeyValueRow</span> _key value)<span class="op">:</span>xs <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="op">$</span> (decode <span class="op">.</span> encodeUtf8) value</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true"></a><span class="co">-- | create a connection based on configuration data, make sure table &quot;store&quot; exists.</span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true"></a><span class="ot">connectionFrom ::</span> (<span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r) <span class="ot">=&gt;</span> <span class="dt">Sem</span> r <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r <span class="dt">SQL.Connection</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true"></a>connectionFrom c <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true"></a>  config <span class="ot">&lt;-</span> c</span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true"></a>  embed (getConnection (dbPath config))</span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true"></a><span class="ot">      getConnection ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">SQL.Connection</span></span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true"></a>      getConnection dbFile <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true"></a>        conn <span class="ot">&lt;-</span> SQL.open dbFile</span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true"></a>        SQL.execute_ conn <span class="st">&quot;CREATE TABLE IF NOT EXISTS store (key TEXT PRIMARY KEY, value TEXT)&quot;</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true"></a>        <span class="fu">return</span> conn</span></code></pre></div>
<p>Let’s have a closer look at what is going on in <code>getAction</code>:</p>
<p>First <code>connectionFrom input</code> is used to create a database connection based on the <code>Config</code> object obtained by <code>input</code> (the smart Constructor of the <code>Input</code> effect). The <code>Config</code> type contains a field <code>dbPath</code> which is read and used to create the connection with <code>getConnection</code>. As this is an IO operation we have to use <code>embed</code> to lift it into the <code>Sem r</code> monad.</p>
<p>In the second step <code>SQL.queryNamed</code> is used to perform the actual select statement against the db connection. Again <code>embed</code> must be used to lift this IO operation.</p>
<p>Finally the resulting <code>[KeyValueRow]</code> list is pattern matched: if the list is empty <code>Nothing</code> is returned. Otherwise <code>Aeson.decode</code> is called to unmarshal a result value from the JSON data retrieved from the database.</p>
<p>The JSON encoding and decoding to and from the DB is the reason for the <code>ToJSON v, FromJSON v</code> constraints on the value type <code>v</code>.</p>
<p>This implementation is inspired by key-value store of <a href="https://haskell-explained.gitlab.io/blog/posts/2019/07/31/polysemy-is-cool-part-2/index.html">a password manager in Polysemy</a>.</p>
<h3 id="declaring-the-rest-api">Declaring the REST API</h3>
<p>Our task was to build the backend for the reservation system. We will have to implement a REST API to allow access to the business logic that we defined in the use case layer.</p>
<p>The overall idea is to provide a REST route for all exposed functions of the <code>ReservationUseCase</code>. The following table shows the mapping of those functions to the REST routes that we want to achieve:</p>
<pre><code>listAll        GET    /reservations
fetch          GET    /reservations/YYYY-MM-DD
tryReservation POST   /reservations
cancel         DELETE /reservations
availableSeats GET    /seats/YYYY-MM-DD</code></pre>
<p>I’m using <a href="http://www.servant.dev/">Servant</a> to define our REST API. The great thing about Servant is that it allows us to define REST APIs in a typesafe manner by using a type level DSL.</p>
<p>Here comes the declaration of our API (please note that we declare our routes to accept and emit data in JSON format):</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="co">-- | in order to allow JSON serialization for the Dom.Reservation type, it must instantiate FromJSON and ToJSON.</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">Dom.Reservation</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Dom.Reservation</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a><span class="co">-- | Declaring the routes of the REST API for Restaurant Reservations</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">ReservationAPI</span> <span class="ot">=</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>       <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;retrieve a map of all reservations (Day -&gt; [Reservation])&quot;</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Get</span>     &#39;[ <span class="dt">JSON</span>] <span class="dt">Dom.ReservationMap</span> <span class="co">-- GET    /reservations</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;retrieve list of reservations for a given day&quot;</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;day&quot;</span> <span class="dt">Day</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Get</span>     &#39;[ <span class="dt">JSON</span>] [<span class="dt">Dom.Reservation</span>]  <span class="co">-- GET    /reservations/YYYY-MM-DD</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;place a new reservation&quot;</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[ <span class="dt">JSON</span>] <span class="dt">Dom.Reservation</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Post</span>    &#39;[ <span class="dt">JSON</span>] ()                 <span class="co">-- POST   /reservations</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true"></a></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;cancel a reservation&quot;</span></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[ <span class="dt">JSON</span>] <span class="dt">Dom.Reservation</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Delete</span>  &#39;[ <span class="dt">JSON</span>] ()                 <span class="co">-- DELETE /reservations</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true"></a>                      </span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;seats&quot;</span>        <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;retrieve number of free seats for a given day&quot;</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;day&quot;</span> <span class="dt">Day</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Get</span>     &#39;[ <span class="dt">JSON</span>] <span class="dt">Natural</span>                <span class="co">-- GET    /seats/YYYY-MM-DD</span></span></code></pre></div>
<p>Next we have to create the connection between the declared routes and the actual business logic. This will be our REST service implementation. In our case we simply delegate to the use case controller functions. Off course, we might also implement additional functionality here like validation:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">UseCases.ReservationUseCase</span> <span class="kw">as</span> <span class="dt">UC</span> </span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a><span class="co">-- | implements the ReservationAPI</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a><span class="ot">reservationServer ::</span> (<span class="dt">Member</span> <span class="dt">UC.Persistence</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">UC.ReservationError</span>) r, </span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a>                      <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r) <span class="ot">=&gt;</span> <span class="dt">ServerT</span> <span class="dt">ReservationAPI</span> (<span class="dt">Sem</span> r)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>reservationServer <span class="ot">=</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true"></a>        UC.listAll        <span class="co">-- GET    /reservations</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.fetch          <span class="co">-- GET    /reservations/YYYY-MM-DD</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.tryReservation <span class="co">-- POST   /reservations</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.cancel         <span class="co">-- DELETE /reservations</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.availableSeats <span class="co">-- GET    /seats/YYYY-MM-DD</span></span></code></pre></div>
<p>I really love how <strong>declarative</strong> this code is. <strong>We don’t have to tell how</strong> to exchange data between the REST server and the use case controllers.</p>
<p>We <strong>just tell what we want</strong>: a mapping from the routes to the controller functions. That’s all!</p>
<p>In the following diagram, we now see the third layer. Again, the arrow symbolises the dependency rule, which prohibits access from domain or use case layer to the interface adapters layer. To the right we see the <code>ReservationAPI</code> and its <code>reservationServer</code> implementation, which we just explored. They interact with the use case controller functions like <code>availableSeats</code>, <code>listAll</code>, etc.</p>
<p>To the left we see the interpretations of the <code>KVS</code> effect (which was defined in the use case layer): <code>KVSInMemory</code>, <code>KVSSqlite</code> (and a third one <code>KVSFileServer</code>, a file based implementation which you could <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/InterfaceAdapters/KVSFileServer.hs">explore on your own</a>).</p>
<figure>
<img src="/img/interface-adapters.png" alt="" /><figcaption>Interface Adapters layer</figcaption>
</figure>
<h3 id="testing-the-kvs-implementations">Testing the KVS implementations</h3>
<p>We’ll have a closer look at the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/test/InterfaceAdaptersKVSSQLiteSpec.hs">test of the SQLite implementation</a> of the <code>KVS</code> effect.</p>
<p>As Polysemy effects are involded we will need to provide an interpretation to actually perform the SQLLite operation.</p>
<p>The test setup looks quite similar to the tests in the use case layer.</p>
<p>We want our test to evaluate the KVS implementation independently of the domain logic and the use case layer. Therefore, we first define an example use case, featuring a data type <code>Memo</code> and a set of typical CRUD operations. The CRUD operations are using the <code>KVS</code> smart constructors and thus exhibit the typical Polysemy effect signatures:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="co">-- | a key value table mapping Natural to a list of Strings</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">KeyValueTable</span> <span class="ot">=</span> <span class="dt">KVS</span> <span class="dt">Int</span> [<span class="dt">String</span>]</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Memo</span> <span class="ot">=</span> <span class="dt">Memo</span> <span class="dt">Int</span> [<span class="dt">String</span>]</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a><span class="ot">persistMemo ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r)  <span class="ot">=&gt;</span> <span class="dt">Memo</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a>persistMemo (<span class="dt">Memo</span> <span class="fu">id</span> <span class="fu">lines</span> ) <span class="ot">=</span> insertKvs <span class="fu">id</span> <span class="fu">lines</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true"></a></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true"></a><span class="ot">fetchMemo ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">Maybe</span> [<span class="dt">String</span>])</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true"></a>fetchMemo <span class="ot">=</span> getKvs</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true"></a></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true"></a><span class="ot">fetchAll ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r) <span class="ot">=&gt;</span> <span class="dt">Sem</span> r (<span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">String</span>])</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true"></a>fetchAll <span class="ot">=</span> <span class="fu">fmap</span> M.fromList listAllKvs</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true"></a><span class="ot">deleteMemo ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r)  <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true"></a>deleteMemo <span class="ot">=</span> deleteKvs</span></code></pre></div>
<p>Next we define a set of helper functions that allow us to execute the CRUD operations as ordinary <code>IO ()</code> actions, which we can use in our test code:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="co">-- Helper functions for interpreting all effects in IO</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a><span class="ot">runPersist ::</span> <span class="dt">Memo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>runPersist memo <span class="ot">=</span> runAllEffects (persistMemo memo)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a><span class="ot">runFetch ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> [<span class="dt">String</span>])</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true"></a>runFetch k <span class="ot">=</span> runAllEffects (fetchMemo k)</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true"></a></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true"></a><span class="ot">runFetchAll ::</span> <span class="dt">IO</span> (<span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">String</span>])</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true"></a>runFetchAll <span class="ot">=</span> runAllEffects fetchAll</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true"></a><span class="ot">runDelete ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true"></a>runDelete k <span class="ot">=</span> runAllEffects (deleteMemo k)</span></code></pre></div>
<p>These wrapper function make use of the <code>runAllEffects</code> function that takes a program with effects and handles each effect till it gets reduced to <code>IO a</code>:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a><span class="ot">runAllEffects ::</span> <span class="dt">Sem</span> &#39;[<span class="dt">KeyValueTable</span>, <span class="dt">Input</span> <span class="dt">Config</span>, <span class="dt">Trace</span>, <span class="dt">Embed</span> <span class="dt">IO</span>] a <span class="ot">-&gt;</span> <span class="dt">IO</span> a </span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true"></a>runAllEffects program <span class="ot">=</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true"></a>  program</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true"></a>    <span class="op">&amp;</span> runKvsAsSQLite       <span class="co">-- use SQLite based interpretation of the (KVS Int [String]) effect</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true"></a>    <span class="op">&amp;</span> runInputConst config <span class="co">-- use the variable config as source for (Input Config) effect</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true"></a>    <span class="op">&amp;</span> ignoreTrace          <span class="co">-- ignore all traces</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true"></a>    <span class="op">&amp;</span> runM                 <span class="co">-- reduce Sem r (Embed IO a) to IO a</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true"></a>  <span class="kw">where</span> config <span class="ot">=</span> <span class="dt">Config</span> {port <span class="ot">=</span> <span class="dv">8080</span>, dbPath <span class="ot">=</span> <span class="st">&quot;kvs-test.db&quot;</span>, backend <span class="ot">=</span> <span class="dt">SQLite</span>, verbose <span class="ot">=</span> <span class="dt">False</span>}</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true"></a></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true"></a><span class="co">-- errors are rethrown as Runtime errors, which can be verified by HSpec.</span></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true"></a><span class="ot">handleErrors ::</span> <span class="dt">IO</span> (<span class="dt">Either</span> err a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true"></a>handleErrors e <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true"></a>  <span class="fu">either</span> <span class="ot">&lt;-</span> e</span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true"></a>  <span class="kw">case</span> <span class="fu">either</span> <span class="kw">of</span></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true"></a>    <span class="dt">Right</span> v <span class="ot">-&gt;</span> <span class="fu">return</span> v</span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true"></a>    <span class="dt">Left</span> _  <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;something bad happend&quot;</span></span></code></pre></div>
<p>With these preliminaries at hand we can now write our test cases:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a>key <span class="ot">=</span> <span class="dv">4711</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a>text <span class="ot">=</span> [<span class="st">&quot;In the morning&quot;</span>, <span class="st">&quot;I don&#39;t drink coffee&quot;</span>, <span class="st">&quot;But lots of curcuma chai.&quot;</span>]</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a>memo <span class="ot">=</span> <span class="dt">Memo</span> key text</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true"></a>  describe <span class="st">&quot;The KV Store SQLite Implementation&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true"></a>    it <span class="st">&quot;returns Nothing if nothing can be found for a given id&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true"></a>      maybeMatch <span class="ot">&lt;-</span> runFetch key</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true"></a>      maybeMatch <span class="ot">`shouldBe`</span> <span class="dt">Nothing</span></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true"></a></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true"></a>    it <span class="st">&quot;persists a key-value pair to the SQLite database&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true"></a>      runPersist memo</span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true"></a>      maybeMatch <span class="ot">&lt;-</span> runFetch key</span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true"></a>      maybeMatch <span class="ot">`shouldBe`</span> <span class="dt">Just</span> text</span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true"></a></span>
<span id="cb29-17"><a href="#cb29-17" aria-hidden="true"></a>    it <span class="st">&quot;fetches a Map of all key-value entries from the KV store&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-18"><a href="#cb29-18" aria-hidden="true"></a>      <span class="fu">map</span> <span class="ot">&lt;-</span> runFetchAll</span>
<span id="cb29-19"><a href="#cb29-19" aria-hidden="true"></a>      M.size <span class="fu">map</span> <span class="ot">`shouldBe`</span> <span class="dv">1</span></span>
<span id="cb29-20"><a href="#cb29-20" aria-hidden="true"></a></span>
<span id="cb29-21"><a href="#cb29-21" aria-hidden="true"></a>    it <span class="st">&quot;deletes an entry from the key value store&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-22"><a href="#cb29-22" aria-hidden="true"></a>      runDelete key</span>
<span id="cb29-23"><a href="#cb29-23" aria-hidden="true"></a>      maybeMatch <span class="ot">&lt;-</span> runFetch key</span>
<span id="cb29-24"><a href="#cb29-24" aria-hidden="true"></a>      maybeMatch <span class="ot">`shouldBe`</span> <span class="dt">Nothing</span></span></code></pre></div>
<h3 id="testing-the-rest-api">Testing the REST API</h3>
<p>The actual code for testing the REST API looks pretty straightforward. We create a <a href="https://hackage.haskell.org/package/wai">WAI</a> <code>Application</code> instance with <code>createApp</code> and execute REST operations like <code>get</code> and <code>postJSON</code> against it:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true"></a><span class="ot">reservationData ::</span> <span class="dt">LB.ByteString</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true"></a>reservationData <span class="ot">=</span> <span class="st">&quot;{\&quot;email\&quot;:\&quot;amjones@example.com\&quot;,\&quot;quantity\&quot;:10,\&quot;date\&quot;:\&quot;2020-05-02\&quot;,\&quot;name\&quot;:\&quot;Amelia Jones\&quot;}&quot;</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true"></a></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true"></a>postJSON   path <span class="ot">=</span> request methodPost   path [(hContentType, <span class="st">&quot;application/json&quot;</span>)]</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true"></a>deleteJSON path <span class="ot">=</span> request methodDelete path [(hContentType, <span class="st">&quot;application/json&quot;</span>)]</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true"></a></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true"></a>  with (createApp) <span class="op">$</span></span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true"></a>    describe <span class="st">&quot;Rest Service&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a call GET /reservations &quot;</span> <span class="op">$</span></span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true"></a>        get <span class="st">&quot;/reservations&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;{\&quot;2020-05-02\&quot;:[{\&quot;email\&quot;:\&quot;amjones@example.com\&quot;,\&quot;quantity\&quot;:4,\&quot;date\&quot;:\&quot;2020-05-02\&quot;,\&quot;name\&quot;:\&quot;Andrew M. Jones\&quot;}]}&quot;</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid POST /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true"></a>        postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true"></a>      it <span class="st">&quot;responds with 412 if a reservation can not be done on a given day&quot;</span> <span class="op">$</span></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true"></a>        (postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="op">&gt;&gt;</span> postJSON <span class="st">&quot;/reservations&quot;</span> reservationData) <span class="ot">`shouldRespondWith`</span> <span class="dv">412</span></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid DELETE /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true"></a>        deleteJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span></code></pre></div>
<p>Please note that these tests don’t need a deployment of the WAI application to a web server. ALl testing can be done within a single process. We stick to the dependency rule not to use anything from a more outward layer.</p>
<p>The interesting part is the creation of the <code>Application</code> instance.</p>
<p>If we had a simple implementation <code>myServer</code> of a REST API <code>myApi</code>, not using any Polysemy effects, we could create an <code>Application</code> instance like so:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="ot">createSimpleApp ::</span> <span class="dt">Application</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a>createSimpleApp <span class="op">::=</span> serve myApi myServer</span></code></pre></div>
<p>In contrast, our <code>reservationServer</code> has a type signature that contains Polysemy effects:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true"></a><span class="ot">reservationServer ::</span> (<span class="dt">Member</span> <span class="dt">UC.Persistence</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">UC.ReservationError</span>) r, </span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true"></a>                      <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r) <span class="ot">=&gt;</span> <span class="dt">ServerT</span> <span class="dt">ReservationAPI</span> (<span class="dt">Sem</span> r)</span></code></pre></div>
<p>Instead of building the <code>Application</code> instance directly, as in the simple example, we use <code>liftServer</code> to lift <code>reservationServer</code> into the required <code>ServerT ReservationAPI Handler</code> type by running all effects and by lifting the business logic exception <code>ReservationNotPossible</code> into a Servant <code>ServerError</code>. This time we also use the SQLite based interpretation of the <code>KVS</code> effect:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true"></a><span class="ot">createApp ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Application</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true"></a>createApp config <span class="ot">=</span> <span class="fu">return</span> <span class="op">$</span> serve reservationAPI (liftServer config)</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true"></a></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true"></a><span class="ot">liftServer ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">ServerT</span> <span class="dt">ReservationAPI</span> <span class="dt">Handler</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true"></a>liftServer config <span class="ot">=</span> hoistServer reservationAPI (interpretServer config) reservationServer</span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true"></a>    interpretServer config sem <span class="ot">=</span></span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true"></a>      sem</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true"></a>        <span class="op">&amp;</span> runKvsAsSQLite</span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true"></a>        <span class="op">&amp;</span> runInputConst config</span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true"></a>        <span class="op">&amp;</span> runError <span class="op">@</span><span class="dt">ReservationError</span></span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true"></a>        <span class="op">&amp;</span> ignoreTrace</span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true"></a>        <span class="op">&amp;</span> runM</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true"></a>        <span class="op">&amp;</span> liftToHandler</span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true"></a>    liftToHandler <span class="ot">=</span> <span class="dt">Handler</span> <span class="op">.</span> <span class="dt">ExceptT</span> <span class="op">.</span> (<span class="fu">fmap</span> handleErrors)</span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true"></a>    handleErrors (<span class="dt">Left</span> (<span class="dt">ReservationNotPossible</span> msg)) <span class="ot">=</span> <span class="dt">Left</span> err412 {errBody <span class="ot">=</span> <span class="fu">pack</span> msg}</span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true"></a>    handleErrors (<span class="dt">Right</span> value) <span class="ot">=</span> <span class="dt">Right</span> value</span></code></pre></div>
<h2 id="the-external-interfaces-layer">The External Interfaces layer</h2>
<blockquote>
<p>The outermost layer is generally composed of frameworks and tools such as the Database, the Web Framework, etc. Generally you don’t write much code in this layer other than glue code that communicates to the next circle inwards.</p>
<p>This layer is where all the details go. The Web is a detail. The database is a detail. We keep these things on the outside where they can do little harm.</p>
<p>Quoted from <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>For the database we are already finished as the <a href="https://hackage.haskell.org/package/sqlite-simple">SQlite-Simple</a> library includes the SQLLite C runtime library and is thus self-contained.</p>
<p>We will use <a href="http://www.aosabook.org/en/posa/warp.html">WARP</a> as our Web Server, which can be used as a library within our <code>Main</code> program. What we still have to do though, is to assemble a Servant web <code>Application</code> so that it can be executed on the warp server.</p>
<p>We have done this step already for the testing of the REST service. The <code>createApp</code> function that we define in the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/ExternalInterfaces/ApplicationAssembly.hs">ApplicationAssembly module</a> will look quite familiar, it just provides some more bells and whistles to integrate all the features that we have developed so far.</p>
<ul>
<li><code>createApp</code> accepts a <code>Config</code> parameter which is used to configure application settings.</li>
<li><code>selectKvsBackend</code> selects the concrete <code>KVS</code> interpretation.</li>
<li><code>selectTraceVerbosity</code> selects the <code>Trace</code> interpretation:</li>
</ul>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="co">-- | creates the WAI Application that can be executed by Warp.run.</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a><span class="ot">createApp ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Application</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true"></a>createApp config <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true"></a>  <span class="fu">return</span> (serve reservationAPI <span class="op">$</span> hoistServer reservationAPI (interpretServer config) reservationServer)</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true"></a>    interpretServer config sem  <span class="ot">=</span>  sem</span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true"></a>      <span class="op">&amp;</span> selectKvsBackend config</span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true"></a>      <span class="op">&amp;</span> runInputConst config</span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true"></a>      <span class="op">&amp;</span> runError <span class="op">@</span><span class="dt">ReservationError</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true"></a>      <span class="op">&amp;</span> selectTraceVerbosity config</span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true"></a>      <span class="op">&amp;</span> runM</span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true"></a>      <span class="op">&amp;</span> liftToHandler</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true"></a>    liftToHandler <span class="ot">=</span> <span class="dt">Handler</span> <span class="op">.</span> <span class="dt">ExceptT</span> <span class="op">.</span> (<span class="fu">fmap</span> handleErrors)</span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true"></a>    handleErrors (<span class="dt">Left</span> (<span class="dt">ReservationNotPossible</span> msg)) <span class="ot">=</span> <span class="dt">Left</span> err412 { errBody <span class="ot">=</span> <span class="fu">pack</span> msg}</span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true"></a>    handleErrors (<span class="dt">Right</span> value) <span class="ot">=</span> <span class="dt">Right</span> value</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true"></a></span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true"></a><span class="co">-- | can select between SQLite or FileServer persistence backends.</span></span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true"></a><span class="ot">selectKvsBackend ::</span> (<span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r, <span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r, <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Show</span> k, <span class="dt">Read</span> k, <span class="dt">ToJSON</span> v, <span class="dt">FromJSON</span> v)</span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true"></a>                 <span class="ot">=&gt;</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> r) a <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true"></a>selectKvsBackend config <span class="ot">=</span> <span class="kw">case</span> backend config <span class="kw">of</span></span>
<span id="cb34-21"><a href="#cb34-21" aria-hidden="true"></a>  <span class="dt">SQLite</span>     <span class="ot">-&gt;</span> runKvsAsSQLite</span>
<span id="cb34-22"><a href="#cb34-22" aria-hidden="true"></a>  <span class="dt">FileServer</span> <span class="ot">-&gt;</span> runKvsAsFileServer</span>
<span id="cb34-23"><a href="#cb34-23" aria-hidden="true"></a>  <span class="dt">InMemory</span>   <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;not supported&quot;</span></span>
<span id="cb34-24"><a href="#cb34-24" aria-hidden="true"></a></span>
<span id="cb34-25"><a href="#cb34-25" aria-hidden="true"></a><span class="co">-- | if the config flag verbose is set to True, trace to Console, else ignore all trace messages</span></span>
<span id="cb34-26"><a href="#cb34-26" aria-hidden="true"></a><span class="ot">selectTraceVerbosity ::</span> (<span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r) <span class="ot">=&gt;</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> (<span class="dt">Sem</span> (<span class="dt">Trace</span> <span class="op">:</span> r) a <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a)</span>
<span id="cb34-27"><a href="#cb34-27" aria-hidden="true"></a>selectTraceVerbosity config <span class="ot">=</span></span>
<span id="cb34-28"><a href="#cb34-28" aria-hidden="true"></a>  <span class="kw">if</span> verbose config</span>
<span id="cb34-29"><a href="#cb34-29" aria-hidden="true"></a>    <span class="kw">then</span> traceToIO</span>
<span id="cb34-30"><a href="#cb34-30" aria-hidden="true"></a>    <span class="kw">else</span> ignoreTrace</span></code></pre></div>
<p>The application assembly also features a function to load a <code>Config</code> instance. Typically, this would involve loading a configuration file or reading command line arguments. We take a shortcut here and just provide a static instance:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true"></a><span class="co">-- | load application config. In real life, this would load a config file or read commandline args.</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true"></a><span class="ot">loadConfig ::</span> <span class="dt">IO</span> <span class="dt">Config</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true"></a>loadConfig <span class="ot">=</span> <span class="fu">return</span> <span class="dt">Config</span> {port <span class="ot">=</span> <span class="dv">8080</span>, backend <span class="ot">=</span> <span class="dt">SQLite</span>, dbPath <span class="ot">=</span> <span class="st">&quot;kvs.db&quot;</span>, verbose <span class="ot">=</span> <span class="dt">True</span>}</span></code></pre></div>
<p>With the whole application assembly written as library code, there is not much left to do in the <code>Main</code> module:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">ExternalInterfaces.ApplicationAssembly</span> (createApp, loadConfig)</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">InterfaceAdapters.Config</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Network.Wai.Handler.Warp</span>               (run)</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true"></a></span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true"></a>  config <span class="ot">&lt;-</span> loadConfig</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true"></a>  app    <span class="ot">&lt;-</span> createApp config</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Starting server on port &quot;</span> <span class="op">++</span> <span class="fu">show</span> (port config)</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true"></a>  run (port config) app</span></code></pre></div>
<p>The following diagram shows the elements added by the External Interface layer: - On the left we have application assembly code like <code>createApp</code> used by the <code>Warp</code> server or some of the different <code>runPure</code> functions that we used in HSpec tests. - On the right we have the SQLite runtime library that provides access to the SQLite database and the Haskell runtime in general, which provides access to the filesystem and the OS in general.</p>
<figure>
<img src="/img/clean-architecture.png" alt="" /><figcaption>External Interfaces layer</figcaption>
</figure>
<h3 id="testing-1">Testing</h3>
<p>Testing the application assembly is quite straightforward and resembles the testing of the REST service:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true"></a><span class="ot">loadConfig ::</span> <span class="dt">IO</span> <span class="dt">Config</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true"></a>loadConfig <span class="ot">=</span> <span class="fu">return</span> <span class="dt">Config</span> {port <span class="ot">=</span> <span class="dv">8080</span>, backend <span class="ot">=</span> <span class="dt">SQLite</span>, dbPath <span class="ot">=</span> <span class="st">&quot;kvs-assembly.db&quot;</span>, verbose <span class="ot">=</span> <span class="dt">False</span>}</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true"></a></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true"></a>  with (loadConfig <span class="op">&gt;&gt;=</span> createApp) <span class="op">$</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true"></a>    describe <span class="st">&quot;Rest Service&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true"></a></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true"></a>      it <span class="st">&quot;responds with 20 for a first call to GET /seats/YYYY-MM-DD&quot;</span> <span class="op">$</span></span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true"></a>        get <span class="st">&quot;/seats/2020-05-02&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;20&quot;</span></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true"></a></span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid POST /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true"></a>        postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span>
<span id="cb37-14"><a href="#cb37-14" aria-hidden="true"></a></span>
<span id="cb37-15"><a href="#cb37-15" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a call GET /reservations &quot;</span> <span class="op">$</span></span>
<span id="cb37-16"><a href="#cb37-16" aria-hidden="true"></a>        get <span class="st">&quot;/reservations&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;{\&quot;2020-05-02\&quot;:[{\&quot;email\&quot;:\&quot;amjones@example.com\&quot;,\&quot;quantity\&quot;:12,\&quot;date\&quot;:\&quot;2020-05-02\&quot;,\&quot;name\&quot;:\&quot;Amelia Jones\&quot;}]}&quot;</span></span>
<span id="cb37-17"><a href="#cb37-17" aria-hidden="true"></a></span>
<span id="cb37-18"><a href="#cb37-18" aria-hidden="true"></a>      it <span class="st">&quot;responds with 412 if a reservation can not be done on a given day&quot;</span> <span class="op">$</span></span>
<span id="cb37-19"><a href="#cb37-19" aria-hidden="true"></a>        (postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="op">&gt;&gt;</span> postJSON <span class="st">&quot;/reservations&quot;</span> reservationData) <span class="ot">`shouldRespondWith`</span> <span class="dv">412</span></span>
<span id="cb37-20"><a href="#cb37-20" aria-hidden="true"></a></span>
<span id="cb37-21"><a href="#cb37-21" aria-hidden="true"></a>      it <span class="st">&quot;responds with 20 for a first call to GET /seats/YYYY-MM-DD&quot;</span> <span class="op">$</span></span>
<span id="cb37-22"><a href="#cb37-22" aria-hidden="true"></a>        get <span class="st">&quot;/seats/2020-05-02&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;8&quot;</span></span>
<span id="cb37-23"><a href="#cb37-23" aria-hidden="true"></a></span>
<span id="cb37-24"><a href="#cb37-24" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid DELETE /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb37-25"><a href="#cb37-25" aria-hidden="true"></a>        deleteJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span></code></pre></div>
<h2 id="swagger-documentation">Swagger Documentation</h2>
<p>For all those who have been patient enough to stay with me until here, I now have a little bonus.</p>
<p>There is a <a href="https://github.com/haskell-servant/servant-swagger-ui">servant-swagger-ui addon</a> available which allows to serve a <a href="https://swagger.io/tools/swagger-ui/">SwaggerDoc UI</a> for any Servant API. This UI renders an automatically generated documentation of our Reservation API and even allows to test all API operations directly.</p>
<p>You can launch it by executing <code>stack build --exec PolysemyCleanArchitecture</code> in the root folder of the project.</p>
<p>This will launch the REST service and open up the Swagger UI in your Web browser:</p>
<figure>
<img src="/img/swaggerUI.png" alt="" /><figcaption>Swagger UI</figcaption>
</figure>
<p>The code for this goody can be found in the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/app/SwaggerUI.hs">SwaggerUI</a> module.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Robert C. Martin concludes his blog post with a brief summary:</p>
<blockquote>
<p>Conforming to these simple rules is not hard, and will save you a lot of headaches going forward. By separating the software into layers, and conforming to The Dependency Rule, you will create a system that is <strong>intrinsically testable</strong>, with all the benefits that implies. When any of the external parts of the system become obsolete, like the database, or the web framework, you can <strong>replace those obsolete elements with a minimum of fuss</strong>.</p>
<p>Quoted from the <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>I have emphasized the testability aspect quite a lot in this article. However, this approach allows switching freely between alternative backends in production environments as well.</p>
<p>As we have seen Polysemy — or algebraic effect systems in general — make this possible by the separation of effect <em>declaration</em>, effect <em>usage</em> and effect <em>interpretation</em>.</p>
<p>Furthermore, Polysemy also allows you to freely combine several effects. This is a huge gain in software composability.</p>
]]></summary>
</entry>
<entry>
    <title>Proof of functor laws for Maybe</title>
    <link href="https://thma.github.io//posts/2020-04-17-maybe-functor-law-proof.html" />
    <id>https://thma.github.io//posts/2020-04-17-maybe-functor-law-proof.html</id>
    <published>2020-04-17T00:00:00Z</published>
    <updated>2020-04-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on April 17, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>In this post I want to give a short example of how equational reasoning can be used to proof certain properties of a given piece of code in Haskell.</p>
<p>So without further ado let’s begin:</p>
<h2 id="known-facts">Known facts</h2>
<p>The <code>Functor</code> instance declaration of the type <code>Maybe</code> is defined as:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">instance</span>  <span class="dt">Functor</span> <span class="dt">Maybe</span>  <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="fu">fmap</span> _ <span class="dt">Nothing</span>       <span class="ot">=</span> <span class="dt">Nothing</span>       <span class="co">-- (1)</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="fu">fmap</span> f (<span class="dt">Just</span> a)      <span class="ot">=</span> <span class="dt">Just</span> (f a)    <span class="co">-- (2)</span></span></code></pre></div>
<p>The composition operator <code>(.)</code> is defined as:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>f <span class="op">.</span> g x <span class="ot">=</span> f (g x)                        <span class="co">-- (3)</span></span></code></pre></div>
<p>The Identity function <code>id</code> is defined as:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">id</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="fu">id</span> x <span class="ot">=</span>  x                                <span class="co">-- (4)</span></span></code></pre></div>
<h2 id="claim">Claim</h2>
<p>The claim is that <code>Maybe</code> fulfils the two functor laws:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="dv">1</span><span class="op">.:</span> <span class="fu">fmap</span> <span class="fu">id</span> <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="dv">2</span><span class="op">.:</span> <span class="fu">fmap</span> (f <span class="op">.</span> g) <span class="ot">=</span> (<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g)</span></code></pre></div>
<h2 id="proof-of-the-first-law">Proof of the first law</h2>
<p><strong>Claim:</strong> <code>fmap id m = id m</code>, for any <code>m</code> of type <code>Maybe a</code>.</p>
<p><strong>Proof.</strong> On cases of <code>m</code>.</p>
<p><em>Case 1:</em> <code>m = Nothing</code>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="fu">fmap</span> <span class="fu">id</span> m <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">id</span> <span class="dt">Nothing</span> <span class="co">-- by expansion of m</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>          <span class="ot">=</span> <span class="dt">Nothing</span>         <span class="co">-- by applying equation (1)</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>          <span class="ot">=</span> <span class="fu">id</span> m            <span class="co">-- by definition m, by applying equation (4)</span></span></code></pre></div>
<p><em>Case 2:</em> <code>m = Just a</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="fu">fmap</span> <span class="fu">id</span> m <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">id</span> (<span class="dt">Just</span> a) <span class="co">-- by expansion of m</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>          <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">id</span> a)      <span class="co">-- by applying equation (2)</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>          <span class="ot">=</span> <span class="dt">Just</span> a           <span class="co">-- by expansion of id (equation (4))</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>          <span class="ot">=</span> m                <span class="co">-- by definition of m</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>          <span class="ot">=</span> <span class="fu">id</span> m             <span class="co">-- by applying equation (4)</span></span></code></pre></div>
<p>Therefore, <code>fmap id m = id m</code> in all cases.∎</p>
<h2 id="proof-of-the-second-law">Proof of the second law</h2>
<p><strong>Claim:</strong> <code>fmap (f . g) m = (fmap f . fmap g) m</code>, for any <code>m</code> of type <code>Maybe a</code>.</p>
<p><strong>Proof.</strong> On cases of <code>m</code>.</p>
<p><em>Case 1:</em> <code>m = Nothing</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) m      <span class="ot">=</span> <span class="fu">fmap</span> (f <span class="op">.</span> g) <span class="dt">Nothing</span>    <span class="co">-- by expansion of m</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Nothing</span>                 <span class="co">-- by applying equation (1)</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>(<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g) m <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="fu">fmap</span> g <span class="dt">Nothing</span>) <span class="co">-- by applying equation (4) and expanding m</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="fu">fmap</span> f <span class="dt">Nothing</span>          <span class="co">-- by applying equation (1)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Nothing</span>                 <span class="co">-- by applying equation (1)</span></span></code></pre></div>
<p><em>Case 2:</em> <code>m = Just a</code>.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) m      <span class="ot">=</span> <span class="fu">fmap</span> (f <span class="op">.</span> g) (<span class="dt">Just</span> a)    <span class="co">-- by expansion of m</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Just</span> ((f <span class="op">.</span> g) a)         <span class="co">-- by applying equation (2)</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>(<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g) m <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="fu">fmap</span> g (<span class="dt">Just</span> a)) <span class="co">-- by applying equation (4) and expanding m</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="dt">Just</span> (g a))      <span class="co">-- by applying equation (2)</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Just</span> (f (g a)            <span class="co">-- by applying equation (2)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Just</span> ((f <span class="op">.</span> g) a)         <span class="co">-- by applying equation (3)</span></span></code></pre></div>
<p>Therefore, <code>fmap (f . g) m = (fmap f . fmap g) m</code> in all cases. ∎</p>
<h2 id="conclusion">Conclusion</h2>
<p>You’ll see this kind of reasoning quite a lot in Haskell documentation and online discussions. The simple reason is: if you can prove something you don’t have to test it.</p>
]]></summary>
</entry>
<entry>
    <title>Why Haskell Matters</title>
    <link href="https://thma.github.io//posts/2020-04-01-why-haskell-matters.html" />
    <id>https://thma.github.io//posts/2020-04-01-why-haskell-matters.html</id>
    <published>2020-04-01T00:00:00Z</published>
    <updated>2020-04-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on April  1, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<h2 id="abstract">Abstract</h2>
<blockquote>
<p>With Haskell, you don’t solve different problems. But you solve them differently.</p>
</blockquote>
<p>In this article I try to explain why Haskell keeps being such an important language by presenting some of its most important and distinguishing features and detailing them with working code examples.</p>
<p>The presentation aims to be self-contained and does not require any previous knowledge of the language.</p>
<p>The target audience are Haskell freshmen and developers with a background in non-functional languages who are eager to learn about concepts of functional programming and Haskell in particular.</p>
<h2 id="table-of-contents">Table of contents</h2>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#functions-are-first-class">Functions are first class</a>
<ul>
<li><a href="#functions-can-be-assigned-to-variables-exactly-as-any-other-values">Functions can be assigned to variables exactly as any other values</a></li>
<li><a href="#support-for-anonymous-functions">Support for anonymous functions</a></li>
<li><a href="#functions-can-be-returned-as-values-from-other-functions">Functions can be returned as values from other functions</a>
<ul>
<li><a href="#function-composition">Function composition</a></li>
<li><a href="#currying-and-Partial-Application">Currying and Partial Application</a></li>
</ul></li>
<li><a href="#functions-can-be-passed-as-arguments-to-other-functions">Functions can be passed as arguments to other functions</a></li>
</ul></li>
<li><a href="#pattern-matching">Pattern matching</a></li>
<li><a href="#algebraic-data-types">Algebraic Data Types</a></li>
<li><a href="#polymorphic-data-types">Polymorphic Data Types</a>
<ul>
<li><a href="#lists">Lists</a>
<ul>
<li><a href="#arithmetic-sequences">Arithmetic sequences</a></li>
</ul></li>
</ul></li>
<li><a href="#immutability">Immutability</a></li>
<li><a href="#declarative-programming">Declarative programming</a>
<ul>
<li><a href="#mapping">Mapping</a></li>
<li><a href="#folding">Folding</a></li>
</ul></li>
<li><a href="#non-strict-evaluation">Non-strict Evaluation</a>
<ul>
<li><a href="#avoid-endless-loops">Avoid endless loops</a></li>
<li><a href="#define-potentially-infinite-data-structures">Define potentially infinite data structures</a></li>
<li><a href="#list-comprehension">List comprehension</a></li>
<li><a href="#define-control-flow-structures-as-abstractions">Define control flow structures as abstractions</a></li>
</ul></li>
<li><a href="#type-classes">Type Classes</a>
<ul>
<li><a href="#read-and-show">Read and Show</a></li>
<li><a href="#functor-and-foldable">Functor and Foldable</a>
<ul>
<li><a href="#functor">Functor</a></li>
<li><a href="#foldable">Foldable</a></li>
</ul></li>
<li><a href="#the-maybe-monad">The Maybe Monad</a>
<ul>
<li><a href="#total-functions">Total Functions</a></li>
<li><a href="#composition-of-maybe-operations">Composition of Maybe operations</a></li>
</ul></li>
<li><a href="#purity">Purity</a><br />
</li>
<li><a href="#explicit-side-effects-with-the-io-monad">Explicit side effects with the IO Monad</a></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="introduction">Introduction</h2>
<p>Exactly thirty years ago, on April 1st 1990, a small group of researchers in the field of non-strict functional programming published the original Haskell language report.</p>
<p>Haskell never became one of the most popular languages in the software industry or part of the mainstream, but it has been and still is quite influential in the software development community.</p>
<p>In this article I try to explain why Haskell keeps being such an important language by presenting some of its most distinguishing features and detailing them with working code examples.</p>
<p>The presentation aims to be self-contained and does not require any previous knowledge of the language. I will also try to keep the learning curve moderate and to limit the scope of the presentation; nevertheless this article is by no means a complete introduction to the language.</p>
<p>(If you are looking for thorough tutorials have a look at <a href="https://en.wikibooks.org/wiki/Haskell">Haskell Wikibook</a> or <a href="http://www.learnyouahaskell.com/.">Learn You a Haskell</a></p>
<p>Before diving directly into the technical details I’d like to first have a closer look on the reception of Haskell in the software developers community:</p>
<h3 id="a-strange-development-over-time">A strange development over time</h3>
<p>In a talk in 2017 on <a href="https://www.youtube.com/watch?v=re96UgMk6GQ">the Haskell journey</a> since its beginnings in the 1980ies Simon Peyton Jones speaks about the rather unusual life story of Haskell.</p>
<p>First he talks about the typical life cycle of research languages. They are often created by a single researcher (who is also the single user), and most of them will be abandoned after just a few years.</p>
<p>A more successful research language might gain some interest in a larger community but will still not escape the ivory tower and typically will be given up within ten years.</p>
<p>On the other hand we have all those popular programming languages that are quickly adopted by large numbers of developers and thus reach “the threshold of immortality”. That is the base of existing code will grow so large that the language will be in use for decades.</p>
<p>A little jokingly he then depicts the sad fate of languages designed by committees by flat line through zero: They simply never take off.</p>
<p>Finally, he presents a chart showing the Haskell timeline:</p>
<figure>
<img src="/img/language-5.png" alt="" /><figcaption>the haskell timeline</figcaption>
</figure>
<p>The development shown in this chart seems rather unexpected: Haskell started as a research language and was even designed by a committee; so in all probability it should have been abandoned long before the millennium!</p>
<p>Instead, it gained some momentum in its early years followed by a rather quiet phase during the decade of OO hype (Java being released in 1995). And then again we see a continuous growth of interest since about 2005. I’m writing this in early 2020, and we still see this trend!</p>
<h3 id="being-used-versus-being-discussed">Being used versus being discussed</h3>
<p>Then Simon Peyton Jones points out another interesting characteristic of the reception of Haskell in recent years: In statistics that rank programming languages by actual usage Haskell is typically not under the 30 most active languages. But in statistics that instead rank languages by the volume of discussions on the internet Haskell typically scores much better (often in the top ten).</p>
<h3 id="so-why-does-haskell-keep-being-a-hot-topic-in-the-software-development-community">So why does Haskell keep being a hot topic in the software development community?</h3>
<p>A very <em>short answer</em> might be: Haskell has a number of features that are clearly different from those of most other programming languages. Many of these features have proven to be powerful tools to solve basic problems of software development elegantly.</p>
<p>Therefore, over time other programming languages have adopted parts of these concepts (e.g. pattern matching or type classes). In discussions about such concepts the Haskell heritage is mentioned and differences between the original Haskell concepts and those of other languages are discussed. Sometimes people feel encouraged to have a closer look at the source of these concepts to get a deeper understanding of their original intentions. That’s why we see a growing number of developers working in Python, Typescript, Scala, Rust, C++, C# or Java starting to dive into Haskell.</p>
<p>A further essential point is that Haskell is still an experimental laboratory for research in areas such as compiler construction, programming language design, theorem-provers, type systems etc. So inevitably Haskell will be a topic in the discussion about these approaches.</p>
<p>In the following sections we will try to find the <em>longer answer</em> by studying some of the most distinguishing features of Haskell.</p>
<h2 id="functions-are-first-class">Functions are First-class</h2>
<blockquote>
<p>In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. This means the language supports <strong>passing functions as arguments to other functions</strong>, <strong>returning them as the values from other functions</strong>, and <strong>assigning them to variables or storing them in data structures.</strong>[1] Some programming language theorists require <strong>support for anonymous functions</strong> (function literals) as well.[2] In languages with first-class functions, the names of functions do not have any special status; they are treated like ordinary variables with a function type.</p>
<p>quoted from <a href="https://en.wikipedia.org/wiki/First-class_function">Wikipedia</a></p>
</blockquote>
<p>We’ll go through this one by one:</p>
<h3 id="functions-can-be-assigned-to-variables-exactly-as-any-other-values">Functions can be assigned to variables exactly as any other values</h3>
<p>Let’s have a look how this looks like in Haskell. First we define some simple values:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- define constant `aNumber` with a value of 42. </span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">aNumber ::</span> <span class="dt">Integer</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>aNumber <span class="ot">=</span> <span class="dv">42</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="co">-- define constant `aString` with a value of &quot;hello world&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="ot">aString ::</span> <span class="dt">String</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>aString <span class="ot">=</span> <span class="st">&quot;Hello World&quot;</span></span></code></pre></div>
<p>In the first line we see a type signature that defines the constant <code>aNumber</code> to be of type <code>Integer</code>. In the second line we define the value of <code>aNumber</code> to be <code>42</code>. In the same way we define the constant <code>aString</code> to be of type <code>String</code>.</p>
<p>Haskell is a statically typed language: all type checks happen at compile time. Static typing has the advantage that type errors don’t happen at runtime. This is especially useful if a function signature is changed and this change affects many dependent parts of a project: the compiler will detect the breaking changes at all affected places.</p>
<p>The Haskell Compiler also provides <em>type inference</em>, which allows the compiler to deduce the concrete data type of an expression from the context. Thus, it is usually not required to provide type declarations. Nevertheless, using explicit type signatures is considered good style as they are an important element of a comprehensive documentation.</p>
<p>Next we define a function <code>square</code> that takes an integer argument and returns the square value of the argument:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">square ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>square x <span class="ot">=</span> x <span class="op">*</span> x</span></code></pre></div>
<p>Definition of a function works exactly in the same way as the definition of any other value. The only thing special is that we declare the type to be a <strong>function type</strong> by using the <code>-&gt;</code> notation. So <code>:: Integer -&gt; Integer</code> represents a function from <code>Integer</code> to <code>Integer</code>. In the second line we define function <code>square</code> to compute <code>x * x</code> for any <code>Integer</code> argument <code>x</code>.</p>
<p>Ok, seems not too difficult, so let’s define another function <code>double</code> that doubles its input value:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">double ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>double n <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> n</span></code></pre></div>
<h3 id="support-for-anonymous-functions">Support for anonymous functions</h3>
<p>Anonymous functions, also known as lambda expressions, can be defined in Haskell like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>\x <span class="ot">-&gt;</span> x <span class="op">*</span> x</span></code></pre></div>
<p>This expression denotes an anonymous function that takes a single argument x and returns the square of that argument. The backslash is read as λ (the greek letter lambda).</p>
<p>You can use such as expressions everywhere where you would use any other function. For example you could apply the anonymous function <code>\x -&gt; x * x</code> to a number just like the named function <code>square</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">-- use named function:</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>result <span class="ot">=</span> square <span class="dv">5</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="co">-- use anonymous function:</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>result&#39; <span class="ot">=</span> (\x <span class="ot">-&gt;</span> x <span class="op">*</span> x) <span class="dv">5</span></span></code></pre></div>
<p>We will see more useful applications of anonymous functions in the following section.</p>
<h3 id="functions-can-be-returned-as-values-from-other-functions">Functions can be returned as values from other functions</h3>
<h4 id="function-composition">Function composition</h4>
<p>Do you remember <em>function composition</em> from your high-school math classes? Function composition is an operation that takes two functions <code>f</code> and <code>g</code> and produces a function <code>h</code> such that <code>h(x) = g(f(x))</code> The resulting composite function is denoted <code>h = g ∘ f</code> where <code>(g ∘ f )(x) = g(f(x))</code>. Intuitively, composing functions is a chaining process in which the output of function <code>f</code> is used as input of function <code>g</code>.</p>
<p>So looking from a programmers perspective the <code>∘</code> operator is a function that takes two functions as arguments and returns a new composite function.</p>
<p>In Haskell this operator is represented as the dot operator <code>.</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>(<span class="op">.</span>) f g x <span class="ot">=</span> f (g x)</span></code></pre></div>
<p>The brackets around the dot are required as we want to use a non-alphabetical symbol as an identifier. In Haskell such identifiers can be used as infix operators (as we will see below). Otherwise <code>(.)</code> is defined as any other function. Please also note how close the syntax is to the original mathematical definition.</p>
<p>Using this operator we can easily create a composite function that first doubles a number and then computes the square of that doubled number:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">squareAfterDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>squareAfterDouble <span class="ot">=</span> square <span class="op">.</span> double</span></code></pre></div>
<h4 id="currying-and-partial-application">Currying and Partial Application</h4>
<p>In this section we look at another interesting example of functions producing other functions as return values. We start by defining a function <code>add</code> that takes two <code>Integer</code> arguments and computes their sum:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- function adding two numbers </span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">add ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>This look quite straightforward. But still there is one interesting detail to note: the type signature of <code>add</code> is not something like</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">add ::</span> (<span class="dt">Integer</span>, <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span></span></code></pre></div>
<p>Instead it is:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">add ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span></code></pre></div>
<p>What does this signature actually mean? It can be read as “A function taking an Integer argument and returning a function of type <code>Integer -&gt; Integer</code>”. Sounds weird? But that’s exactly what Haskell does internally. So if we call <code>add 2 3</code> first <code>add</code> is applied to <code>2</code> which return a new function of type <code>Integer -&gt; Integer</code> which is then applied to <code>3</code>.</p>
<p>This technique is called <a href="https://wiki.haskell.org/Currying"><strong>Currying</strong></a></p>
<p>Currying is widely used in Haskell as it allows another cool thing: <strong>partial application</strong>.</p>
<p>In the next code snippet we define a function <code>add5</code> by partially applying the function <code>add</code> to only one argument:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="co">-- partial application: applying add to 5 returns a function of type Integer -&gt; Integer</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="ot">add5 ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>add5 <span class="ot">=</span> add <span class="dv">5</span></span></code></pre></div>
<p>The trick is as follows: <code>add 5</code> returns a function of type <code>Integer -&gt; Integer</code> which will add <code>5</code> to any Integer argument.</p>
<p>Partial application thus allows us to write functions that return functions as result values. This technique is frequently used to <a href="https://github.com/thma/LtuPatternFactory#dependency-injection--parameter-binding-partial-application">provide functions with configuration data</a>.</p>
<h3 id="functions-can-be-passed-as-arguments-to-other-functions">Functions can be passed as arguments to other functions</h3>
<p>I could keep this section short by telling you that we have already seen an example for this: the function composition operator <code>(.)</code>. It <strong>accepts two functions as arguments</strong> and returns a new one as in:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="ot">squareAfterDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>squareAfterDouble <span class="ot">=</span> square <span class="op">.</span> double</span></code></pre></div>
<p>But I have another instructive example at hand.</p>
<p>Let’s imagine we have to implement a function that doubles any odd Integer:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">ifOddDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>ifOddDouble n <span class="ot">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">odd</span> n</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    <span class="kw">then</span> double n</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>The Haskell code is straightforward: new ingredients are the <code>if ... then ... else ...</code> and the odd <code>odd</code> which is a predicate from the Haskell standard library that returns <code>True</code> if an integral number is odd.</p>
<p>Now let’s assume that we also need another function that computes the square for any odd number:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">ifOddSquare ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>ifOddSquare n <span class="ot">=</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">odd</span> n</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>    <span class="kw">then</span> square n</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>As vigilant developers we immediately detect a violation of the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don’t repeat yourself principle</a> as both functions only vary in the usage of a different growth functions <code>double</code> versus <code>square</code>.</p>
<p>So we are looking for a way to refactor this code by a solution that keeps the original structure but allows to vary the used growth function.</p>
<p>What we need is a function that takes a growth function (of type <code>(Integer -&gt; Integer)</code>) as first argument, an <code>Integer</code> as second argument and returns an <code>Integer</code>. The specified growth function will be applied in the <code>then</code> clause:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">ifOdd ::</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>ifOdd growthFunction n <span class="ot">=</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">odd</span> n</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>    <span class="kw">then</span> growthFunction n</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>With this approach we can refactor <code>ifOddDouble</code> and <code>ifOddSquare</code> as follows:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="ot">ifOddDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>ifOddDouble n <span class="ot">=</span> ifOdd double n</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a><span class="ot">ifOddSquare ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>ifOddSquare n <span class="ot">=</span> ifOdd square n</span></code></pre></div>
<p>Now imagine that we have to implement new function <code>ifEvenDouble</code> and <code>ifEvenSquare</code>, that will work only on even numbers. Instead of repeating ourselves we come up with a function <code>ifPredGrow</code> that takes a predicate function of type <code>(Integer -&gt; Bool)</code> as first argument, a growth function of type <code>(Integer -&gt; Integer)</code> as second argument and an Integer as third argument, returning an <code>Integer</code>.</p>
<p>The predicate function will be used to determine whether the growth function has to be applied:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="ot">ifPredGrow ::</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>ifPredGrow predicate growthFunction n <span class="ot">=</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>  <span class="kw">if</span> predicate n</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>    <span class="kw">then</span> growthFunction n</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>Using this <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher order function</a> that even takes two functions as arguments we can write the two new functions and further refactor the existing ones without breaking the DRY principle:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="ot">ifEvenDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>ifEvenDouble n <span class="ot">=</span> ifPredGrow <span class="fu">even</span> double n</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a><span class="ot">ifEvenSquare ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>ifEvenSquare n <span class="ot">=</span> ifPredGrow <span class="fu">even</span> square n</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a><span class="ot">ifOddDouble&#39;&#39; ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>ifOddDouble&#39;&#39; n <span class="ot">=</span> ifPredGrow <span class="fu">odd</span> double n</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a><span class="ot">ifOddSquare&#39;&#39; ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true"></a>ifOddSquare&#39;&#39; n <span class="ot">=</span> ifPredGrow <span class="fu">odd</span> square n</span></code></pre></div>
<h2 id="pattern-matching">Pattern matching</h2>
<p>With the things that we have learnt so far, we can now start to implement some more interesting functions. So what about implementing the recursive <a href="https://en.wikipedia.org/wiki/Factorial">factorial function</a>?</p>
<p>The factorial function can be defined as follows:</p>
<blockquote>
<p>For all n ∈ ℕ<sub>0</sub>:</p>
<pre><code>0! = 1
n! = n * (n-1)!</code></pre>
</blockquote>
<p>With our current knowledge of Haskell we can implement this as follows:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="ot">factorial ::</span> <span class="dt">Natural</span> <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>factorial n <span class="ot">=</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>  <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>    <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>    <span class="kw">else</span> n <span class="op">*</span> factorial (n <span class="op">-</span> <span class="dv">1</span>)</span></code></pre></div>
<p>We are using the Haskell data type <code>Natural</code> to denote the set of non-negative integers ℕ<sub>0</sub>. Using the literal <code>factorial</code> within the definition of the function <code>factorial</code> works as expected and denotes a recursive function call.</p>
<p>As these kind of recursive definition of functions are typical for functional programming, the language designers have added a useful feature called <em>pattern matching</em> that allows to define functions by a set of equations:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="ot">fac ::</span> <span class="dt">Natural</span> <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>fac <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>fac n <span class="ot">=</span> n <span class="op">*</span> fac (n <span class="op">-</span> <span class="dv">1</span>)</span></code></pre></div>
<p>This style comes much closer to the mathematical definition and is typically more readable, as it helps to avoid nested <code>if ... then ... else ...</code> constructs.</p>
<p>Pattern matching can not only be used for numeric values but for any other data types. We’ll see some more examples shortly.</p>
<h2 id="algebraic-data-types">Algebraic Data Types</h2>
<p>Haskell supports user-defined data types by making use of a well thought out concept. Let’s start with a simple example:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span> <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span></span></code></pre></div>
<p>This declares a data type <code>Status</code> which has exactly three different instances. For each instance a <em>data constructor</em> is defined that allows to create a new instance of the data type.</p>
<p>Each of those data constructors is a function (in this simple case a constant) that returns a <code>Status</code> instance.</p>
<p>The type <code>Status</code> is a so called <em>sum type</em> as it is represents the set defined by the sum of all three instances <code>Green</code>, <code>Yellow</code>, <code>Red</code>. In Java this corresponds to Enumerations.</p>
<p>Let’s assume we have to create a converter that maps our <code>Status</code> values to <code>Severity</code> values representing severity levels in some other system. This converter can be written using the pattern matching syntax that we already have seen above:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">-- another sum type representing severity:</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span> <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a><span class="ot">severity ::</span> <span class="dt">Status</span> <span class="ot">-&gt;</span> <span class="dt">Severity</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>severity <span class="dt">Green</span>  <span class="ot">=</span> <span class="dt">Low</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>severity <span class="dt">Yellow</span> <span class="ot">=</span> <span class="dt">Middle</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>severity <span class="dt">Red</span>    <span class="ot">=</span> <span class="dt">High</span></span></code></pre></div>
<p>The compiler will tell us when we did not cover all instances of the <code>Status</code> type (by making use of the <code>-fwarn-incomplete-patterns</code> pragma).</p>
<p>Now we look at data types that combine multiple different elements, like pairs n-tuples, etc. Let’s start with a <code>PairStatusSeverity</code> type that combines two different elements:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">P</span> <span class="dt">Status</span> <span class="dt">Severity</span></span></code></pre></div>
<p>This can be understood as: data type <code>PairStatusSeverity</code> can be constructed from a data constructor <code>P</code> that takes a value of type <code>Status</code> and a value of type <code>Severity</code> and returns a <code>Pair</code> instance.</p>
<p>So for example <code>P Green High</code> returns a <code>PairStatusSeverity</code> instance (the data constructor <code>P</code> has the signature <code>P :: Status -&gt; Severity -&gt; PairStatusSeverity</code>).</p>
<p>The type <code>PairStatusSeverity</code> can be interpreted as the set of all possible ordered pairs of Status and Severity values, that is the <em>cartesian product</em> of <code>Status</code> and <code>Severity</code>.</p>
<p>That’s why such a data type is called <em>product type</em>.</p>
<p>Haskell allows you to create arbitrary data types by combining <em>sum types</em> and <em>product types</em>. The complete range of data types that can be constructed in this way is called <a href="https://en.wikipedia.org/wiki/Algebraic_data_type"><em>algebraic data types</em></a> or ADT in short.</p>
<p>Using algebraic data types has several advantages:</p>
<ul>
<li>Pattern matching can be used to analyze any concrete instance to select different behaviour based on input data. as in the example that maps <code>Status</code> to <code>Severity</code> there is no need to use <code>if..then..else..</code> constructs.</li>
<li>The compiler can detect incomplete patterns matching or other flaws.</li>
<li>The compiler can derive many complex functionality automatically for ADTs as they are constructed in such a regular way.</li>
</ul>
<p>We will cover the interesting combination of ADTs and pattern matching in the following sections.</p>
<h2 id="polymorphic-data-types">Polymorphic Data Types</h2>
<p>Forming pairs or more generally n-tuples is a very common task in programming. Therefore it would be inconvenient and repetitive if we were forced to create new Pair or Tuple types for each concrete usage. consider the following example:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">P</span> <span class="dt">Status</span> <span class="dt">Severity</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusString</span>   <span class="ot">=</span> <span class="dt">P&#39;</span> <span class="dt">Status</span> <span class="dt">String</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairSeverityStatus</span> <span class="ot">=</span> <span class="dt">P&#39;&#39;</span> <span class="dt">Severity</span> <span class="dt">Status</span></span></code></pre></div>
<p>Luckily data type declarations allow to use type variables to avoid this kind of cluttered code. So we can define a generic data type <code>Pair</code> that allows us to freely combine different kinds of arguments:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="co">-- a simple polymorphic type</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Pair</span> a b <span class="ot">=</span> <span class="dt">P</span> a b</span></code></pre></div>
<p>This can be understood as: data type <code>Pair</code> uses two elements of (potentially) different types <code>a</code> and <code>b</code>; the data constructor <code>P</code> takes a value of type <code>a</code> and a value of type <code>b</code> and returns a <code>Pair a b</code> instance (the data constructor <code>P</code> has the signature <code>P :: a -&gt; b -&gt; Pair a b</code>). The type <code>Pair</code> can now be used to create many different concrete data types it is thus called a <em>polymorphic</em> data type. As the Polymorphism is defined by type variables, i.e. parameters to the type declarations, this mechanism is called <em>parametric polymorphism</em>.</p>
<p>As pairs and n-tuples are so frequently used, the Haskell language designers have added some syntactic sugar to work effortlessly with them.</p>
<p>So you can simply write tuples like this:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="ot">tuple ::</span> (<span class="dt">Status</span>, <span class="dt">Severity</span>, <span class="dt">String</span>)</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a>tuple <span class="ot">=</span> (<span class="dt">Green</span>, <span class="dt">Low</span>, <span class="st">&quot;All green&quot;</span>)</span></code></pre></div>
<h3 id="lists">Lists</h3>
<p>Another very useful polymorphic type is the <code>List</code>.</p>
<p>A list can either be the empty list (denoted by the data constructor <code>[]</code>) or some element of a data type <code>a</code> followed by a list with elements of type <code>a</code>, denoted by <code>[a]</code>.</p>
<p>This intuition is reflected in the following data type definition:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a><span class="kw">data</span> [a] <span class="ot">=</span> [] <span class="op">|</span> a <span class="op">:</span> [a]</span></code></pre></div>
<p>The cons operator <code>(:)</code> (which is an infix operator like <code>(.)</code> from the previous section) is declared as a <em>data constructor</em> to construct a list from a single element of type <code>a</code> and a list of type <code>[a]</code>.</p>
<p>So a list containing only a single element <code>1</code> is constructed by:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="dv">1</span> <span class="op">:</span> []</span></code></pre></div>
<p>A list containing the three numbers 1, 2, 3 is constructed like this:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true"></a><span class="dv">1</span> <span class="op">:</span> <span class="dv">2</span> <span class="op">:</span> <span class="dv">3</span> <span class="op">:</span> []</span></code></pre></div>
<p>Luckily the Haskell language designers have been so kind to offer some syntactic sugar for this. So the first list can simply be written as <code>[1]</code> and the second as <code>[1,2,3]</code>.</p>
<p>Polymorphic type expressions describe <em>families of types</em>. For example, <code>(forall a)[a]</code> is the family of types consisting of, for every type <code>a</code>, the type of lists of <code>a</code>. Lists of integers (e.g. <code>[1,2,3]</code>), lists of characters (<code>['a','b','c']</code>), even lists of lists of integers, etc., are all members of this family.</p>
<p>Function that work on lists can use pattern matching to select behaviour for the <code>[]</code> and the <code>a:[a]</code> case.</p>
<p>Take for instance the definition of the function <code>length</code> that computes the length of a list:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="fu">length</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a><span class="fu">length</span> []     <span class="ot">=</span>  <span class="dv">0</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true"></a><span class="fu">length</span> (x<span class="op">:</span>xs) <span class="ot">=</span>  <span class="dv">1</span> <span class="op">+</span> <span class="fu">length</span> xs</span></code></pre></div>
<p>We can read these equations as: The length of the empty list is 0, and the length of a list whose first element is x and remainder is xs is 1 plus the length of xs.</p>
<p>In our next example we want to work with a of some random integers:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true"></a><span class="ot">someNumbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true"></a>someNumbers <span class="ot">=</span> [<span class="dv">49</span>,<span class="dv">64</span>,<span class="dv">97</span>,<span class="dv">54</span>,<span class="dv">19</span>,<span class="dv">90</span>,<span class="dv">934</span>,<span class="dv">22</span>,<span class="dv">215</span>,<span class="dv">6</span>,<span class="dv">68</span>,<span class="dv">325</span>,<span class="dv">720</span>,<span class="dv">8082</span>,<span class="dv">1</span>,<span class="dv">33</span>,<span class="dv">31</span>]</span></code></pre></div>
<p>Now we want to select all even or all odd numbers from this list. We are looking for a function <code>filter</code> that takes two arguments: first a predicate function that will be used to check each element and second the actual list of elements. The function will return a list with all matching elements. And of course our solution should work not only for Integers but for any other types as well. Here is the type signature of such a filter function:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true"></a><span class="fu">filter</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span></code></pre></div>
<p>In the implementation we will use pattern matching to provide different behaviour for the <code>[]</code> and the <code>(x:xs)</code> case:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="fu">filter</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a><span class="fu">filter</span> <span class="fu">pred</span> []     <span class="ot">=</span> []</span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true"></a><span class="fu">filter</span> <span class="fu">pred</span> (x<span class="op">:</span>xs)</span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">pred</span> x         <span class="ot">=</span> x <span class="op">:</span> <span class="fu">filter</span> <span class="fu">pred</span> xs</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">otherwise</span>      <span class="ot">=</span> <span class="fu">filter</span> <span class="fu">pred</span> xs</span></code></pre></div>
<p>The <code>[]</code> case is obvious. To understand the <code>(x:xs)</code> case we have to know that in addition to simple matching of the type constructors we can also use <em>pattern guards</em> to perform additional testing on the input data. In this case we compute <code>pred x</code> if it evaluates to <code>True</code>, <code>x</code> is a match and will be cons’ed with the result of <code>filter pred xs</code>. If it does not evaluate to <code>True</code>, we will not add <code>x</code> to the result list and thus simply call filter recursively on the remainder of the list.</p>
<p>Now we can use <code>filter</code> to select elements from our sample list:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true"></a><span class="ot">someEvenNumbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true"></a>someEvenNumbers <span class="ot">=</span> <span class="fu">filter</span> <span class="fu">even</span> someNumbers</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true"></a></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true"></a><span class="co">-- predicates may also be lambda-expresssions</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true"></a><span class="ot">someOddNumbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true"></a>someOddNumbers <span class="ot">=</span> <span class="fu">filter</span> (\n <span class="ot">-&gt;</span> n <span class="ot">`rem`</span> <span class="dv">2</span> <span class="op">/=</span> <span class="dv">0</span>) someNumbers  </span></code></pre></div>
<p>Of course we don’t have to invent functions like <code>filter</code> on our own but can rely on the <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html">extensive set of predefined functions working on lists</a> in the Haskell base library.</p>
<h4 id="arithmetic-sequences">Arithmetic sequences</h4>
<p>There is a nice feature that often comes in handy when dealing with lists of numbers. It’s called <em>arithmetic sequences</em> and allows you to define lists of numbers with a concise syntax:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a><span class="ot">upToHundred ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a>upToHundred <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">100</span>]</span></code></pre></div>
<p>As expected this assigns <code>upToHundred</code> with a list of integers from 1 to 100.</p>
<p>It’s also possible to define a step width that determines the increment between the subsequent numbers. If we want only the odd numbers we can construct them like this:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true"></a><span class="ot">oddsUpToHundred ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true"></a>oddsUpToHundred <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span><span class="dv">100</span>]</span></code></pre></div>
<p>Arithmetic sequences can also be used in more dynamic cases. For example we can define the <code>factorial</code> function like this:</p>
<pre class="math"><code>n! = 1 * 2 * 3 ... (n-2) * (n-1) * n, for integers &gt; 0</code></pre>
<p>In Haskell we can use an arithmetic sequence to define this function:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true"></a>fac&#39; n   <span class="ot">=</span> prod [<span class="dv">1</span><span class="op">..</span>n]</span></code></pre></div>
<h2 id="immutability">Immutability</h2>
<blockquote>
<p>In object-oriented and functional programming, an immutable object is an object whose state cannot be modified after it is created. This is in contrast to a mutable object (changeable object), which can be modified after it is created.</p>
<p>Quoted from <a href="https://en.wikipedia.org/wiki/Immutable_object">Wikipedia</a></p>
</blockquote>
<p>This is going to be a very short section. In Haskell all data is immutable. Period.</p>
<p>Let’s look at some interactions with the Haskell GHCi REPL (whenever you see the <code>λ&gt;</code> prompt in this article it is from a GHCi session):</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> a <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> a</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">reverse</span> a</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true"></a>[<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>]</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true"></a>λ<span class="op">&gt;</span> a</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>In Haskell there is no way to change the value of <code>a</code> after its initial creation. There are no <em>destructive</em> operations available unlike some other functional languages such as Lisp, Scheme or ML.</p>
<p>The huge benefit of this is that refactoring becomes much simpler than in languages where every function or method might mutate data. Thus it will also be easier to reason about a given piece of code.</p>
<p>Of course this also makes programming of concurrent operations much easier. With a <em>shared nothing</em> approach, Haskell programs are automatically thread-safe.</p>
<h2 id="declarative-programming">Declarative programming</h2>
<p>In this section I want to explain how programming with <em>higher order</em> functions can be used to factor out many basic control structures and algorithms from the user code.</p>
<p>This will result in a more <em>declarative programming</em> style where the developer can simply declare <em>what</em> she wants to achieve but is not required to write down <em>how</em> it is to be achieved.</p>
<p>Code that applies this style will be much denser, and it will be more concerned with the actual elements of the problem domain than with the technical implementation details.</p>
<h3 id="mapping">Mapping</h3>
<p>We’ll demonstrate this with some examples working on lists. First we get the task to write a function that doubles all elements of a <code>[Integer]</code> list. We want to reuse the <code>double</code> function we have already defined above.</p>
<p>With all that we have learnt so far, writing a function <code>doubleAll</code> isn’t that hard:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true"></a><span class="co">-- compute the double value for all list elements</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true"></a><span class="ot">doubleAll ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true"></a>doubleAll [] <span class="ot">=</span> []</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true"></a>doubleAll (n<span class="op">:</span>rest) <span class="ot">=</span> double n <span class="op">:</span> doubleAll rest</span></code></pre></div>
<p>Next we are asked to implement a similar function <code>squareAll</code> that will use <code>square</code> to compute the square of all elements in a list. The naive way would be to implement it in the <em>WET</em> (We Enjoy Typing) approach:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true"></a><span class="co">-- compute squares for all list elements</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true"></a><span class="ot">squareAll ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true"></a>squareAll [] <span class="ot">=</span> []</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true"></a>squareAll (n<span class="op">:</span>rest) <span class="ot">=</span> square n <span class="op">:</span> squareAll rest</span></code></pre></div>
<p>Of course this is very ugly: both function use the same pattern matching and apply the same recursive iteration strategy. They only differ in the function applied to each element.</p>
<p>As role model developers we don’t want to repeat ourselves. We are thus looking for something that captures the essence of mapping a given function over a list of elements:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true"></a><span class="fu">map</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true"></a><span class="fu">map</span> f []     <span class="ot">=</span> []</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true"></a><span class="fu">map</span> f (x<span class="op">:</span>xs) <span class="ot">=</span> f x <span class="op">:</span> <span class="fu">map</span> f xs</span></code></pre></div>
<p>This function abstracts away the implementation details of iterating over a list and allows to provide a user defined mapping function as well.</p>
<p>Now we can use <code>map</code> to simply <em>declare our intention</em> (the ‘what’) and don’t have to detail the ‘how’:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true"></a><span class="ot">doubleAll&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true"></a>doubleAll&#39; <span class="ot">=</span> <span class="fu">map</span> double</span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true"></a></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true"></a><span class="ot">squareAll&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true"></a>squareAll&#39; <span class="ot">=</span> <span class="fu">map</span> square</span></code></pre></div>
<h3 id="folding">Folding</h3>
<p>Now let’s have a look at some related problem. Our first task is to add up all elements of a <code>[Integer]</code> list. First the naive approach which uses the already familiar mix of pattern matching plus recursion:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true"></a><span class="ot">sumUp ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true"></a>sumUp [] <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true"></a>sumUp (n<span class="op">:</span>rest) <span class="ot">=</span> n <span class="op">+</span> sumUp rest</span></code></pre></div>
<p>By looking at the code for a function that computes the product of all elements of a <code>[Integer]</code> list we can again see that we are repeating ourselves:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true"></a><span class="ot">prod ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true"></a>prod [] <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true"></a>prod (n<span class="op">:</span>rest) <span class="ot">=</span> n <span class="op">*</span> prod rest</span></code></pre></div>
<p>So what is the essence of both algorithms? At the core of both algorithms we have a recursive function which</p>
<ul>
<li>takes a binary operator (<code>(+)</code>or <code>(*)</code> in our case),</li>
<li>an initial value that is used as a starting point for the accumulation (typically the identity element (or neutral element) of the binary operator),</li>
<li>the list of elements that should be reduced to a single return value</li>
<li>performs the accumulation by recursively applying the binary operator to all elements of the list until the <code>[]</code> is reached, where the neutral element is returned.</li>
</ul>
<p>This essence is contained in the higher order function <code>foldr</code> which again is part of the Haskell standard library:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true"></a><span class="fu">foldr</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true"></a><span class="fu">foldr</span> f acc []     <span class="ot">=</span>  acc</span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true"></a><span class="fu">foldr</span> f acc (x<span class="op">:</span>xs) <span class="ot">=</span>  f x (<span class="fu">foldr</span> f acc xs)</span></code></pre></div>
<p>Now we can use <code>foldr</code> to simply <em>declare our intention</em> (the ‘what’) and don’t have to detail the ‘how’:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true"></a><span class="ot">sumUp&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true"></a>sumUp&#39; <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">+</span>) <span class="dv">0</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true"></a></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true"></a><span class="ot">prod&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true"></a>prod&#39; <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">*</span>) <span class="dv">1</span></span></code></pre></div>
<p>With the functions <code>map</code> and <code>foldr</code> (or <code>reduce</code>) we have now two very powerful tools at hand that can be used in many situation where list data has to be processed.</p>
<p>Both functions can even be composed to form yet another very important programming concept: <em>Map/Reduce</em>. In Haskell this operation is provided by the function <code>foldMap</code>.</p>
<p>I won’t go into details here as it would go beyond the scope of this article, but I’ll invite you to read my <a href="https://github.com/thma/LtuPatternFactory#map-reduce">introduction to Map/Reduce in Haskell</a>.</p>
<h2 id="non-strict-evaluation">Non-strict Evaluation</h2>
<p>Now we come to topic that was one of the main drivers for the Haskell designers: they wanted to get away from the then standard model of strict evaluation.</p>
<p>Non-Strict Evaluation (aka. normal order reduction) has one very important property.</p>
<blockquote>
<p>If a lambda expression has a normal form, then normal order reduction will terminate and find that normal form.</p>
<p>Church-Rosser Theorem II</p>
</blockquote>
<p>This property does not hold true for other reduction strategies (like applicative order or call-by-value reduction).</p>
<p>This result from mathematical research on the <a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a> is important as Haskell maintains the semantics of normal order reduction.</p>
<p>The real-world benefits of lazy evaluation include:</p>
<ul>
<li>Avoid endless loops in certain edge cases</li>
<li>The ability to define control flow (structures) as abstractions instead of primitives.</li>
<li>The ability to define potentially infinite data structures. This allows for more straightforward implementation of some algorithms.</li>
</ul>
<p>So let’s have a closer look at those benefits:</p>
<h3 id="avoid-endless-loops">Avoid endless loops</h3>
<p>Consider the following example function:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true"></a><span class="ot">ignoreY ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true"></a>ignoreY x y <span class="ot">=</span> x</span></code></pre></div>
<p>It takes two integer arguments and returns the first one unmodified. The second argument is simply ignored.</p>
<p>In most programming languages both arguments will be evaluated before the function body is executed: they use applicative order reduction aka. eager evaluation or call-by-value semantics.</p>
<p>In Haskell on the other hand it is safe to call the function with a non-terminating expression in the second argument. First we create a non-terminating expression <code>viciousCircle</code>. Any attempt to evaluate it will result in an endless loop:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true"></a><span class="co">-- it&#39;s possible to define non-terminating expressions like</span></span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true"></a><span class="ot">viciousCircle ::</span> a</span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true"></a>viciousCircle <span class="ot">=</span> viciousCircle</span></code></pre></div>
<p>But if we use <code>viciousCircle</code> as second argument to the function <code>ignoreY</code> it will simply be ignored and the first argument is returned:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true"></a><span class="co">-- trying it in GHCi:</span></span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> ignoreY <span class="dv">42</span> viciousCircle</span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true"></a><span class="dv">42</span></span></code></pre></div>
<h3 id="define-potentially-infinite-data-structures">Define potentially infinite data structures</h3>
<p>In the <a href="#lists">section on lists</a> we have already met <em>arithmetic sequences</em> like <code>[1..10]</code>.</p>
<p>Arithmetic sequences can also be used to define infinite lists of numbers. Here are a few examples:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true"></a><span class="co">-- all natural numbers</span></span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true"></a>naturalNumbers <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span>]</span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true"></a></span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true"></a><span class="co">-- all even numbers</span></span>
<span id="cb52-5"><a href="#cb52-5" aria-hidden="true"></a>evens <span class="ot">=</span> [<span class="dv">2</span>,<span class="dv">4</span><span class="op">..</span>]</span>
<span id="cb52-6"><a href="#cb52-6" aria-hidden="true"></a></span>
<span id="cb52-7"><a href="#cb52-7" aria-hidden="true"></a><span class="co">-- all odd numbers</span></span>
<span id="cb52-8"><a href="#cb52-8" aria-hidden="true"></a>odds  <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>]</span></code></pre></div>
<p>Defining those infinite lists is rather easy. But what can we do with them? Are they useful for any purpose? In the <code>viciousCircle</code> example above we have learnt that defining that expression is fine but any attempt to evaluate it will result in an infinite loop.</p>
<p>If we try to print <code>naturalNumbers</code> we will also end up in an infinite loop of integers printed to the screen.</p>
<p>But if we are bit less greedy than asking for all natural numbers everything will be OK.</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> naturalNumbers</span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true"></a></span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> evens</span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">14</span>,<span class="dv">16</span>,<span class="dv">18</span>,<span class="dv">20</span>]</span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true"></a></span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> odds</span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">15</span>,<span class="dv">17</span>,<span class="dv">19</span>]</span></code></pre></div>
<p>We can also peek at a specific position in such an infinite list, using the <code>(!!)</code> operator:</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> odds <span class="op">!!</span> <span class="dv">5000</span></span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true"></a><span class="dv">10001</span></span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true"></a></span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> evens <span class="op">!!</span> <span class="dv">10000</span></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true"></a><span class="dv">20002</span></span></code></pre></div>
<h3 id="list-comprehension">List comprehension</h3>
<p>Do you remember <em>set comprehension</em> notation from your math classes?</p>
<p>As simple example would be the definition of the set of even numbers:</p>
<blockquote>
<p>Evens = {i | i = 2n ∧ n ∊ ℕ}</p>
</blockquote>
<p>Which can be read as: Evens is defined as the set of all <code>i</code> where <code>i = 2*n</code> and <code>n</code> is an element of the set of natural numbers.</p>
<p>The Haskell <em>list comprehension</em> allows us to define - potentially infinite - lists with a similar syntax:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true"></a>evens&#39; <span class="ot">=</span> [<span class="dv">2</span><span class="op">*</span>n <span class="op">|</span> n <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>]]</span></code></pre></div>
<p>Again we can avoid infinite loops by evaluating only a finite subset of <code>evens'</code>:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> evens&#39;</span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">14</span>,<span class="dv">16</span>,<span class="dv">18</span>,<span class="dv">20</span>]</span></code></pre></div>
<p>List comprehension can be very useful for defining numerical sets and series in a (mostly) declarative way that comes close to the original mathematical definitions.</p>
<p>Take for example the set <code>PT</code> of all pythagorean triples</p>
<blockquote>
<p>PT = { (a,b,c) | a,b,c ∊ ℕ ∧ a² + b² = c² }</p>
</blockquote>
<p>The Haskell definition looks like this:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true"></a><span class="ot">pt ::</span> [(<span class="dt">Natural</span>,<span class="dt">Natural</span>,<span class="dt">Natural</span>)]</span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true"></a>pt <span class="ot">=</span> [(a,b,c) <span class="op">|</span> c <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>],</span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true"></a>                b <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>c],</span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true"></a>                a <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>b],</span>
<span id="cb57-5"><a href="#cb57-5" aria-hidden="true"></a>                a<span class="op">^</span><span class="dv">2</span> <span class="op">+</span> b<span class="op">^</span><span class="dv">2</span> <span class="op">==</span> c<span class="op">^</span><span class="dv">2</span>]</span></code></pre></div>
<h3 id="define-control-flow-structures-as-abstractions">Define control flow structures as abstractions</h3>
<p>In most languages it is not possible to define new conditional operations, e.g. your own <code>myIf</code> statement. A conditional operation will evaluate some of its arguments only if certain conditions are met. This is very hard - if not impossible - to implement in language with call-by-value semantics which evaluates all function arguments before actually evaluating the function body.</p>
<p>As Haskell implements call-by-need semantics, it is possible to define new conditional operations. In fact this is quite helpful when writing <em>domain specific languages</em>.</p>
<p>Here comes a very simple version of <code>myIf</code>:</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true"></a><span class="ot">myIf ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b</span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true"></a>myIf p x y <span class="ot">=</span> <span class="kw">if</span> p <span class="kw">then</span> x <span class="kw">else</span> y </span>
<span id="cb58-3"><a href="#cb58-3" aria-hidden="true"></a></span>
<span id="cb58-4"><a href="#cb58-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> myIf (<span class="dv">4</span> <span class="op">&gt;</span> <span class="dv">2</span>) <span class="st">&quot;true&quot;</span> viciousCircle</span>
<span id="cb58-5"><a href="#cb58-5" aria-hidden="true"></a><span class="st">&quot;true&quot;</span></span></code></pre></div>
<p>A somewhat more useful control-structure is the <code>cond</code> (for conditional) function that stems from LISP and Scheme languages. It allows you to define a more table-like decision structure, somewhat resembling a <code>switch</code> statement from C-style languages:</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true"></a><span class="ot">cond ::</span> [(<span class="dt">Bool</span>, a)] <span class="ot">-&gt;</span> a</span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true"></a>cond []                 <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;make sure that at least one condition is true&quot;</span></span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true"></a>cond ((<span class="dt">True</span>,  v)<span class="op">:</span>rest)  <span class="ot">=</span> v</span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true"></a>cond ((<span class="dt">False</span>, _)<span class="op">:</span>rest)  <span class="ot">=</span> cond rest</span></code></pre></div>
<p>With this function we can implement a signum function <code>sign</code> as follows:</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true"></a><span class="ot">sign ::</span> (<span class="dt">Ord</span> a, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true"></a>sign x <span class="ot">=</span> cond [(x <span class="op">&gt;</span> <span class="dv">0</span>     , <span class="dv">1</span> )</span>
<span id="cb60-3"><a href="#cb60-3" aria-hidden="true"></a>              ,(x <span class="op">&lt;</span> <span class="dv">0</span>     , <span class="op">-</span><span class="dv">1</span>)</span>
<span id="cb60-4"><a href="#cb60-4" aria-hidden="true"></a>              ,(<span class="fu">otherwise</span> , <span class="dv">0</span> )]</span>
<span id="cb60-5"><a href="#cb60-5" aria-hidden="true"></a></span>
<span id="cb60-6"><a href="#cb60-6" aria-hidden="true"></a>λ<span class="op">&gt;</span> sign <span class="dv">5</span></span>
<span id="cb60-7"><a href="#cb60-7" aria-hidden="true"></a><span class="dv">1</span></span>
<span id="cb60-8"><a href="#cb60-8" aria-hidden="true"></a>λ<span class="op">&gt;</span> sign <span class="dv">0</span></span>
<span id="cb60-9"><a href="#cb60-9" aria-hidden="true"></a><span class="dv">0</span></span>
<span id="cb60-10"><a href="#cb60-10" aria-hidden="true"></a>λ<span class="op">&gt;</span> sign (<span class="op">-</span><span class="dv">4</span>)</span>
<span id="cb60-11"><a href="#cb60-11" aria-hidden="true"></a><span class="op">-</span><span class="dv">1</span></span></code></pre></div>
<h2 id="type-classes">Type Classes</h2>
<p>Now we come to one of the most distinguishing features of Haskell: <em>type classes</em>.</p>
<p>In the section <a href="#polymorphic-data-types">Polymorphic Data Types</a> we have seen that type variables (or parameters) allow type declarations to be polymorphic like in:</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true"></a><span class="kw">data</span> [a] <span class="ot">=</span> [] <span class="op">|</span> a <span class="op">:</span> [a]</span></code></pre></div>
<p>This approach is called <em>parametric polymorphism</em> and is used in several programming languages.</p>
<p>Type classes on the other hand address <em>ad hoc polymorphism</em> of data types. This approach is also known as <em>overloading</em>.</p>
<p>To get a first intuition let’s start with a simple example.</p>
<p>We would like to be able to use characters (represented by the data type <code>Char</code>) as if they were numbers. E.g. we would like to be able to things like:</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="ch">&#39;A&#39;</span> <span class="op">+</span> <span class="dv">25</span></span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true"></a><span class="ch">&#39;Z&#39;</span></span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true"></a></span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true"></a><span class="co">-- please note that in Haskell a string is List of characters: type String = [Char]</span></span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">map</span> (<span class="op">+</span> <span class="dv">5</span>) <span class="st">&quot;hello world&quot;</span></span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true"></a><span class="st">&quot;mjqqt%|twqi&quot;</span></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true"></a></span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">map</span> (\c <span class="ot">-&gt;</span> c <span class="op">-</span> <span class="dv">5</span>) <span class="st">&quot;mjqqt%|twqi&quot;</span></span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true"></a><span class="st">&quot;hello world&quot;</span></span></code></pre></div>
<p>To enable this we will have to <em>overload</em> the infix operators <code>(+)</code> and <code>(-)</code> to work not only on numbers but also on characters. Now, let’s have a look at the type signature of the <code>(+)</code> operator:</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> (<span class="op">+</span>)</span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true"></a><span class="ot">(+) ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>So <code>(+)</code> is not just declared to be of type <code>(+) :: a -&gt; a -&gt; a</code> but it contains a <strong>constraint</strong> on the type variable <code>a</code>, namely <code>Num a =&gt;</code>. The whole type signature of <code>(+)</code> can be read as: for all types <code>a</code> that are members of the type class <code>Num</code> the operator <code>(+)</code> has the type <code>a -&gt; a -&gt; a</code>.</p>
<p>Next we obtain more information on the type class <code>Num</code>:</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>info <span class="dt">Num</span></span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Num</span> a <span class="kw">where</span></span>
<span id="cb64-3"><a href="#cb64-3" aria-hidden="true"></a><span class="ot">  (+) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-4"><a href="#cb64-4" aria-hidden="true"></a><span class="ot">  (-) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-5"><a href="#cb64-5" aria-hidden="true"></a><span class="ot">  (*) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-6"><a href="#cb64-6" aria-hidden="true"></a><span class="ot">  negate ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-7"><a href="#cb64-7" aria-hidden="true"></a><span class="ot">  abs ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-8"><a href="#cb64-8" aria-hidden="true"></a><span class="ot">  signum ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-9"><a href="#cb64-9" aria-hidden="true"></a><span class="ot">  fromInteger ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> a</span>
<span id="cb64-10"><a href="#cb64-10" aria-hidden="true"></a>  <span class="ot">{-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}</span></span>
<span id="cb64-11"><a href="#cb64-11" aria-hidden="true"></a>  	<span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-12"><a href="#cb64-12" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Word</span> <span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-13"><a href="#cb64-13" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Integer</span> <span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-14"><a href="#cb64-14" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Int</span> <span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-15"><a href="#cb64-15" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Float</span> <span class="co">-- Defined in `GHC.Float&#39;</span></span>
<span id="cb64-16"><a href="#cb64-16" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Double</span> <span class="co">-- Defined in `GHC.Float&#39;</span></span></code></pre></div>
<p>This information details what functions a type <code>a</code> has to implement to be used as an instance of the <code>Num</code> type class. The line <code>{-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}</code> tells us what a minimal complete implementation has to provide. It also tells us that the types <code>Word</code>, <code>Integer</code>, <code>Int</code>, <code>Float</code> and <code>Double</code> are instances of the <code>Num</code> type class.</p>
<p>This is all we need to know to make the type <code>Char</code> an instance of the <code>Num</code> type class, so without further ado we dive into the implementation (please note that <code>fromEnum</code> converts a <code>Char</code> into an <code>Int</code> and <code>toEnum</code> converts an <code>Int</code> into an <code>Char</code>):</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Char</span> <span class="kw">where</span></span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true"></a>  a <span class="op">+</span> b       <span class="ot">=</span> <span class="fu">toEnum</span> (<span class="fu">fromEnum</span> a <span class="op">+</span> <span class="fu">fromEnum</span> b)</span>
<span id="cb65-3"><a href="#cb65-3" aria-hidden="true"></a>  a <span class="op">-</span> b       <span class="ot">=</span> <span class="fu">toEnum</span> (<span class="fu">fromEnum</span> a <span class="op">-</span> <span class="fu">fromEnum</span> b)</span>
<span id="cb65-4"><a href="#cb65-4" aria-hidden="true"></a>  a <span class="op">*</span> b       <span class="ot">=</span> <span class="fu">toEnum</span> (<span class="fu">fromEnum</span> a <span class="op">*</span> <span class="fu">fromEnum</span> b)</span>
<span id="cb65-5"><a href="#cb65-5" aria-hidden="true"></a>  <span class="fu">abs</span> c       <span class="ot">=</span> c</span>
<span id="cb65-6"><a href="#cb65-6" aria-hidden="true"></a>  <span class="fu">signum</span>      <span class="ot">=</span> <span class="fu">toEnum</span> <span class="op">.</span> <span class="fu">signum</span> <span class="op">.</span> <span class="fu">fromEnum</span></span>
<span id="cb65-7"><a href="#cb65-7" aria-hidden="true"></a>  <span class="fu">fromInteger</span> <span class="ot">=</span> <span class="fu">toEnum</span> <span class="op">.</span> <span class="fu">fromInteger</span></span>
<span id="cb65-8"><a href="#cb65-8" aria-hidden="true"></a>  <span class="fu">negate</span> c    <span class="ot">=</span> c</span></code></pre></div>
<p>This piece of code makes the type <code>Char</code> an instance of the <code>Num</code> type class. We can then use <code>(+)</code> and `(-) as demonstrated above.</p>
<p>Originally the idea for type classes came up to provide overloading of arithmetic operators in order to use the same operators across all numeric types.</p>
<p>But the type classes concept proved to be useful in a variety of other cases as well. This has lead to a rich sets of type classes provided by the Haskell base library and a wealth of programming techniques that make use of this powerful concept.</p>
<p>Here comes a graphic overview of some of the most important type classes in the Haskell base library:</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Base-classes.svg/510px-Base-classes.svg.png" alt="" /><figcaption>The hierarchy of basic type classes</figcaption>
</figure>
<p>I won’t go over all of these but I’ll cover some of the most important ones.</p>
<p>Let’s start with Eq:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Eq</span> a <span class="kw">where</span></span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true"></a>   (<span class="op">==</span>),<span class="ot"> (/=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb66-3"><a href="#cb66-3" aria-hidden="true"></a></span>
<span id="cb66-4"><a href="#cb66-4" aria-hidden="true"></a>       <span class="co">-- Minimal complete definition:</span></span>
<span id="cb66-5"><a href="#cb66-5" aria-hidden="true"></a>       <span class="co">--      (==) or (/=)</span></span>
<span id="cb66-6"><a href="#cb66-6" aria-hidden="true"></a>   x <span class="op">/=</span> y     <span class="ot">=</span>  <span class="fu">not</span> (x <span class="op">==</span> y)</span>
<span id="cb66-7"><a href="#cb66-7" aria-hidden="true"></a>   x <span class="op">==</span> y     <span class="ot">=</span>  <span class="fu">not</span> (x <span class="op">/=</span> y)</span></code></pre></div>
<p>This definition states two things:</p>
<ul>
<li>if a type <code>a</code> is to be made an instance of the class <code>Eq</code> it must support the functions <code>(==)</code> and <code>(/=)</code> both of them having type <code>a -&gt; a -&gt; Bool</code>.<br />
</li>
<li><code>Eq</code> provides <em>default definitions</em> for <code>(==)</code> and <code>(/=)</code> in terms of each other. As a consequence, there is no need for a type in <code>Eq</code> to provide both definitions - given one of them, the other will work automatically.</li>
</ul>
<p>Now we can turn some of the data types that we defined in the section on <a href="#algebraic-data-types">Algebraic Data Types</a> into instances of the <code>Eq</code> type class.</p>
<p>Here the type declarations as a recap:</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span>   <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span></span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span> </span>
<span id="cb67-3"><a href="#cb67-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span></span></code></pre></div>
<p>First, we create Eq instances for the simple types <code>Status</code> and <code>Severity</code> by defining the <code>(==)</code> operator for each of them:</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Status</span> <span class="kw">where</span></span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true"></a>  <span class="dt">Green</span>  <span class="op">==</span> <span class="dt">Green</span>  <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true"></a>  <span class="dt">Yellow</span> <span class="op">==</span> <span class="dt">Yellow</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-4"><a href="#cb68-4" aria-hidden="true"></a>  <span class="dt">Red</span>    <span class="op">==</span> <span class="dt">Red</span>    <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-5"><a href="#cb68-5" aria-hidden="true"></a>  _      <span class="op">==</span> _      <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb68-6"><a href="#cb68-6" aria-hidden="true"></a>  </span>
<span id="cb68-7"><a href="#cb68-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Severity</span> <span class="kw">where</span></span>
<span id="cb68-8"><a href="#cb68-8" aria-hidden="true"></a>  <span class="dt">Low</span>    <span class="op">==</span> <span class="dt">Low</span>    <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-9"><a href="#cb68-9" aria-hidden="true"></a>  <span class="dt">Middle</span> <span class="op">==</span> <span class="dt">Middle</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-10"><a href="#cb68-10" aria-hidden="true"></a>  <span class="dt">High</span>   <span class="op">==</span> <span class="dt">High</span>   <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-11"><a href="#cb68-11" aria-hidden="true"></a>  _      <span class="op">==</span> _      <span class="ot">=</span> <span class="dt">False</span></span></code></pre></div>
<p>Next, we create an <code>Eq</code> instance for <code>PairStatusSeverity</code> by defining the <code>(==)</code> operator:</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">PairStatusSeverity</span> <span class="kw">where</span></span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true"></a>   (<span class="dt">PSS</span> sta1 sev1) <span class="op">==</span> (<span class="dt">PSS</span> sta2 sev2) <span class="ot">=</span> (sta1 <span class="op">==</span> sta2) <span class="op">&amp;&amp;</span> (sev1 <span class="op">==</span> sev2)</span></code></pre></div>
<p>With these definitions it is now possible to use the <code>(==)</code> and <code>(/=)</code> on our three types.</p>
<p>As you will have noticed, the code for implementing <code>Eq</code> is quite boring. Even a machine could do it!</p>
<p>That’s why the language designers have provided a <code>deriving</code> mechanism to let the compiler automatically implement type class instances if it’s automatically derivable as in the <code>Eq</code> case.</p>
<p>With this syntax it much easier to let a type implement the <code>Eq</code> type class:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span>   <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span>          <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span>           <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb70-3"><a href="#cb70-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span> <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span></code></pre></div>
<p>This automatic deriving of type class instances works for many cases and reduces a lof of repetitive code.</p>
<p>For example, its possible to automatically derive instances of the <code>Ord</code> type class, which provides ordering functionality:</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true"></a><span class="kw">class</span> (<span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">Ord</span> a <span class="kw">where</span></span>
<span id="cb71-2"><a href="#cb71-2" aria-hidden="true"></a><span class="ot">    compare              ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ordering</span></span>
<span id="cb71-3"><a href="#cb71-3" aria-hidden="true"></a>    (<span class="op">&lt;</span>), (<span class="op">&lt;=</span>), (<span class="op">&gt;</span>),<span class="ot"> (&gt;=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb71-4"><a href="#cb71-4" aria-hidden="true"></a>    <span class="fu">max</span>,<span class="ot"> min             ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb71-5"><a href="#cb71-5" aria-hidden="true"></a>    <span class="op">...</span></span></code></pre></div>
<p>If you are using <code>deriving</code> for the <code>Status</code> and <code>Severity</code> types, the Compiler will implement the ordering according to the ordering of the constructors in the type declaration. That is <code>Green &lt; Yellow &lt; Red</code> and <code>Low &lt; Middle &lt; High</code>:</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span>   <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span>          <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span>           <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<h3 id="read-and-show">Read and Show</h3>
<p>Two other quite useful type classes are <code>Read</code> and <code>Show</code> that also support automatic deriving.</p>
<p><code>Show</code> provides a function <code>show</code> with the following type signature:</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true"></a><span class="fu">show</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">String</span></span></code></pre></div>
<p>This means that any type implementing <code>Show</code> can be converted (or <em>marshalled</em>) into a <code>String</code> representation. Creation of a <code>Show</code> instance can be achieved by adding a <code>deriving (Show)</code> clause to the type declaration.</p>
<div class="sourceCode" id="cb74"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb74-2"><a href="#cb74-2" aria-hidden="true"></a></span>
<span id="cb74-3"><a href="#cb74-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">show</span> (<span class="dt">PSS</span> <span class="dt">Green</span> <span class="dt">Low</span>)</span>
<span id="cb74-4"><a href="#cb74-4" aria-hidden="true"></a><span class="st">&quot;PSS Green Low&quot;</span></span></code></pre></div>
<p>The <code>Read</code> type class is used to do the opposite: <em>unmarshalling</em> data from a String with the function <code>read</code>:</p>
<div class="sourceCode" id="cb75"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb75-1"><a href="#cb75-1" aria-hidden="true"></a><span class="fu">read</span><span class="ot"> ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>This signature says that for any type <code>a</code> implementing the <code>Read</code> type class the function <code>read</code> can reconstruct an instance of <code>a</code> from its String representation:</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb76-2"><a href="#cb76-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span> <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span>            <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb76-3"><a href="#cb76-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span>           <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb76-4"><a href="#cb76-4" aria-hidden="true"></a></span>
<span id="cb76-5"><a href="#cb76-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> marshalled <span class="ot">=</span> <span class="fu">show</span> (<span class="dt">PSS</span> <span class="dt">Green</span> <span class="dt">Low</span>)</span>
<span id="cb76-6"><a href="#cb76-6" aria-hidden="true"></a></span>
<span id="cb76-7"><a href="#cb76-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">read</span><span class="ot"> marshalled ::</span> <span class="dt">PairStatusSeverity</span></span>
<span id="cb76-8"><a href="#cb76-8" aria-hidden="true"></a><span class="dt">PSS</span> <span class="dt">Green</span> <span class="dt">Low</span></span></code></pre></div>
<p>Please note that it is required to specify the expected target type with the <code>:: PairStatusSeverity</code> clause. Haskell uses static compile time typing. At compile time there is no way to determine which type an expression <code>read "some string content"</code> will return. Thus the expected type must be specified at compile time. Either by an implicit declaration given by some function type signature, or as in the example above, by an explicit declaration.</p>
<p>Together <code>show</code> and <code>read</code> provide a convenient way to serialize (marshal) and deserialize (unmarshal) Haskell data structures. This mechanism does not provide any optimized binary representation, but it is still good enough for many practical purposes, the format is more compact than JSON, and it does not require a parser library.</p>
<h3 id="functor-and-foldable">Functor and Foldable</h3>
<p>The most interesting type classes are those derived from abstract algebra or category theory. Studying them is a very rewarding process that I highly recommend. However, it is definitely beyond the scope of this article. Thus, I’m only pointing to two resources covering this part of the Haskell type class hierarchy. The first one is the legendary <a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a> by Brent Yorgey. The second one is <a href="https://github.com/thma/LtuPatternFactory">Lambda the ultimate Pattern Factory</a> by myself. This text relates the algebraic type classes to software design patterns, and therefore we will only cover some of these type classes.</p>
<p>In the section on <a href="#declarative-programming">declarative programming</a> we came across two very useful concepts:</p>
<ul>
<li>mapping a function over all elements in a list (<code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code>)</li>
<li>reducing a list with a binary operation and the neutral (identity) element of that operation (<code>foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code>)</li>
</ul>
<p>These concepts are not only useful for lists, but also for many other data structures. So it doesn’t come as a surprise that there are type classes that abstract these concepts.</p>
<h4 id="functor">Functor</h4>
<p>The <code>Functor</code> type class generalizes the functionality of applying a function to a value in a context without altering the context, (e.g. mapping a function over a list <code>[a]</code> which returns a new list <code>[b]</code> of the same length):</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span></span>
<span id="cb77-2"><a href="#cb77-2" aria-hidden="true"></a><span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>Let’s take a closer look at this idea by playing with a simple binary tree:</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb78-1"><a href="#cb78-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb78-2"><a href="#cb78-2" aria-hidden="true"></a></span>
<span id="cb78-3"><a href="#cb78-3" aria-hidden="true"></a><span class="co">-- a simple instance binary tree:</span></span>
<span id="cb78-4"><a href="#cb78-4" aria-hidden="true"></a><span class="ot">statusTree ::</span> <span class="dt">Tree</span> <span class="dt">Status</span></span>
<span id="cb78-5"><a href="#cb78-5" aria-hidden="true"></a>statusTree <span class="ot">=</span> <span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Green</span>) (<span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Red</span>) (<span class="dt">Leaf</span> <span class="dt">Yellow</span>))</span>
<span id="cb78-6"><a href="#cb78-6" aria-hidden="true"></a></span>
<span id="cb78-7"><a href="#cb78-7" aria-hidden="true"></a><span class="co">-- a function mapping Status to Severity</span></span>
<span id="cb78-8"><a href="#cb78-8" aria-hidden="true"></a><span class="ot">toSeverity ::</span> <span class="dt">Status</span> <span class="ot">-&gt;</span> <span class="dt">Severity</span></span>
<span id="cb78-9"><a href="#cb78-9" aria-hidden="true"></a>toSeverity <span class="dt">Green</span>  <span class="ot">=</span> <span class="dt">Low</span></span>
<span id="cb78-10"><a href="#cb78-10" aria-hidden="true"></a>toSeverity <span class="dt">Yellow</span> <span class="ot">=</span> <span class="dt">Middle</span></span>
<span id="cb78-11"><a href="#cb78-11" aria-hidden="true"></a>toSeverity <span class="dt">Red</span>    <span class="ot">=</span> <span class="dt">High</span></span></code></pre></div>
<p>We want to use the function <code>toSeverity :: Status -&gt; Severity</code> to convert all <code>Status</code> elements of the <code>statusTree</code> into <code>Severity</code> instances.</p>
<p>Therefore, we let <code>Tree</code> instantiate the <code>Functor</code> class:</p>
<div class="sourceCode" id="cb79"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Tree</span> <span class="kw">where</span></span>
<span id="cb79-2"><a href="#cb79-2" aria-hidden="true"></a>  <span class="fu">fmap</span> f (<span class="dt">Leaf</span> a)   <span class="ot">=</span> <span class="dt">Leaf</span> (f a)</span>
<span id="cb79-3"><a href="#cb79-3" aria-hidden="true"></a>  <span class="fu">fmap</span> f (<span class="dt">Node</span> a b) <span class="ot">=</span> <span class="dt">Node</span> (<span class="fu">fmap</span> f a) (<span class="fu">fmap</span> f b)</span></code></pre></div>
<p>We can now use <code>fmap</code> on <code>Tree</code> data structures:</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">fmap</span> toSeverity statusTree</span>
<span id="cb80-2"><a href="#cb80-2" aria-hidden="true"></a><span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Low</span>) (<span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">High</span>) (<span class="dt">Leaf</span> <span class="dt">Middle</span>))</span>
<span id="cb80-3"><a href="#cb80-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> it</span>
<span id="cb80-4"><a href="#cb80-4" aria-hidden="true"></a><span class="ot">it ::</span> <span class="dt">Tree</span> <span class="dt">Severity</span></span></code></pre></div>
<p>As already described above, fmap maintains the tree structure unchanged but converts the type of each <code>Leaf</code> element, which effectively changes the type of the tree to <code>Tree Severity</code>.</p>
<p>As derivation of <code>Functor</code> instances is a boring task, it is again possible to use the <code>deriving</code> clause to let data types instantiate <code>Functor</code>:</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb81-1"><a href="#cb81-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveFunctor #-}</span> <span class="co">-- this pragma allows automatic deriving of Functor instances</span></span>
<span id="cb81-2"><a href="#cb81-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Functor</span>)</span></code></pre></div>
<h4 id="foldable">Foldable</h4>
<p>As already mentioned, <code>Foldable</code> provides the ability to perform <em>folding</em> operations on any data type instantiating the <code>Foldable</code> type class:</p>
<div class="sourceCode" id="cb82"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Foldable</span> t <span class="kw">where</span></span>
<span id="cb82-2"><a href="#cb82-2" aria-hidden="true"></a><span class="ot">  fold    ::</span> <span class="dt">Monoid</span> m <span class="ot">=&gt;</span> t m <span class="ot">-&gt;</span> m</span>
<span id="cb82-3"><a href="#cb82-3" aria-hidden="true"></a><span class="ot">  foldMap ::</span> <span class="dt">Monoid</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> m</span>
<span id="cb82-4"><a href="#cb82-4" aria-hidden="true"></a><span class="ot">  foldr   ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-5"><a href="#cb82-5" aria-hidden="true"></a><span class="ot">  foldr&#39;  ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-6"><a href="#cb82-6" aria-hidden="true"></a><span class="ot">  foldl   ::</span> (b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-7"><a href="#cb82-7" aria-hidden="true"></a><span class="ot">  foldl&#39;  ::</span> (b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-8"><a href="#cb82-8" aria-hidden="true"></a><span class="ot">  foldr1  ::</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-9"><a href="#cb82-9" aria-hidden="true"></a><span class="ot">  foldl1  ::</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-10"><a href="#cb82-10" aria-hidden="true"></a><span class="ot">  toList  ::</span> t a <span class="ot">-&gt;</span> [a]</span>
<span id="cb82-11"><a href="#cb82-11" aria-hidden="true"></a><span class="ot">  null    ::</span> t a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb82-12"><a href="#cb82-12" aria-hidden="true"></a><span class="ot">  length  ::</span> t a <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb82-13"><a href="#cb82-13" aria-hidden="true"></a><span class="ot">  elem    ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb82-14"><a href="#cb82-14" aria-hidden="true"></a><span class="ot">  maximum ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-15"><a href="#cb82-15" aria-hidden="true"></a><span class="ot">  minimum ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-16"><a href="#cb82-16" aria-hidden="true"></a><span class="ot">  sum     ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-17"><a href="#cb82-17" aria-hidden="true"></a><span class="ot">  product ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>besides the abstraction of the <code>foldr</code> function, <code>Foldable</code> provides several other useful operations when dealing with <em>container</em>-like structures.</p>
<p>Because of the regular structure algebraic data types it is again possible to automatically derive <code>Foldable</code> instances by using the <code>deriving</code> clause:</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb83-1"><a href="#cb83-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveFunctor, DeriveFoldable #-}</span> <span class="co">-- allows automatic deriving of Functor and Foldable</span></span>
<span id="cb83-2"><a href="#cb83-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Read</span>, <span class="dt">Functor</span>, <span class="dt">Foldable</span>)</span></code></pre></div>
<p>Of course, we can also implement the <code>foldr</code> function on our own:</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Foldable</span> <span class="dt">Tree</span> <span class="kw">where</span></span>
<span id="cb84-2"><a href="#cb84-2" aria-hidden="true"></a>  <span class="fu">foldr</span> f acc (<span class="dt">Leaf</span> a)   <span class="ot">=</span> f a acc</span>
<span id="cb84-3"><a href="#cb84-3" aria-hidden="true"></a>  <span class="fu">foldr</span> f acc (<span class="dt">Node</span> a b) <span class="ot">=</span> <span class="fu">foldr</span> f (<span class="fu">foldr</span> f acc b) a</span></code></pre></div>
<p>We can now use <code>foldr</code> and other class methods of <code>Foldable</code>:</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb85-1"><a href="#cb85-1" aria-hidden="true"></a><span class="ot">statusTree ::</span> <span class="dt">Tree</span> <span class="dt">Status</span></span>
<span id="cb85-2"><a href="#cb85-2" aria-hidden="true"></a>statusTree <span class="ot">=</span> <span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Green</span>) (<span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Red</span>) (<span class="dt">Leaf</span> <span class="dt">Yellow</span>))</span>
<span id="cb85-3"><a href="#cb85-3" aria-hidden="true"></a></span>
<span id="cb85-4"><a href="#cb85-4" aria-hidden="true"></a>maxStatus <span class="ot">=</span> <span class="fu">foldr</span> <span class="fu">max</span> <span class="dt">Green</span> statusTree</span>
<span id="cb85-5"><a href="#cb85-5" aria-hidden="true"></a>maxStatus&#39; <span class="ot">=</span> <span class="fu">maximum</span> statusTree</span>
<span id="cb85-6"><a href="#cb85-6" aria-hidden="true"></a></span>
<span id="cb85-7"><a href="#cb85-7" aria-hidden="true"></a><span class="co">-- using length from Foldable type class</span></span>
<span id="cb85-8"><a href="#cb85-8" aria-hidden="true"></a>treeSize <span class="ot">=</span> <span class="fu">length</span> statusTree</span>
<span id="cb85-9"><a href="#cb85-9" aria-hidden="true"></a></span>
<span id="cb85-10"><a href="#cb85-10" aria-hidden="true"></a><span class="co">-- in GHCi:</span></span>
<span id="cb85-11"><a href="#cb85-11" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t <span class="fu">max</span></span>
<span id="cb85-12"><a href="#cb85-12" aria-hidden="true"></a><span class="fu">max</span><span class="ot"> ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb85-13"><a href="#cb85-13" aria-hidden="true"></a></span>
<span id="cb85-14"><a href="#cb85-14" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">foldr</span> <span class="fu">max</span> <span class="dt">Green</span> statusTree</span>
<span id="cb85-15"><a href="#cb85-15" aria-hidden="true"></a><span class="dt">Red</span></span>
<span id="cb85-16"><a href="#cb85-16" aria-hidden="true"></a><span class="co">-- using maximum from Foldable type class:</span></span>
<span id="cb85-17"><a href="#cb85-17" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">maximum</span> statusTree</span>
<span id="cb85-18"><a href="#cb85-18" aria-hidden="true"></a><span class="dt">Red</span></span>
<span id="cb85-19"><a href="#cb85-19" aria-hidden="true"></a>λ<span class="op">&gt;</span> treeSize</span>
<span id="cb85-20"><a href="#cb85-20" aria-hidden="true"></a><span class="dv">3</span></span>
<span id="cb85-21"><a href="#cb85-21" aria-hidden="true"></a><span class="co">-- using toList from Foldable type class:</span></span>
<span id="cb85-22"><a href="#cb85-22" aria-hidden="true"></a>λ<span class="op">&gt;</span> toList statusTree</span>
<span id="cb85-23"><a href="#cb85-23" aria-hidden="true"></a>[<span class="dt">Green</span>,<span class="dt">Red</span>,<span class="dt">Yellow</span>]</span></code></pre></div>
<h3 id="the-maybe-monad">The Maybe Monad</h3>
<p>Now we will take the data type <code>Maybe</code> as an example to dive deeper into the more complex parts of the Haskell type class system.</p>
<p>The <code>Maybe</code> type is quite simple, it can be either a null value, called <code>Nothing</code> or a value of type <code>a</code> constructed by <code>Just a</code>:</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true"></a><span class="kw">data</span>  <span class="dt">Maybe</span> a  <span class="ot">=</span>  <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p>The Maybe type is helpful in situations where certain operation <em>may</em> return a valid result. Take for instance the function <code>lookup</code> from the Haskell base library. It looks up a key in a list of key-value pairs. If it finds the key, the associated value <code>val</code> is returned - but wrapped in a Maybe: <code>Just val</code>. If it doesn’t find the key, <code>Nothing</code> is returned:</p>
<div class="sourceCode" id="cb87"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true"></a><span class="fu">lookup</span><span class="ot"> ::</span> (<span class="dt">Eq</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> [(a,b)] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb87-2"><a href="#cb87-2" aria-hidden="true"></a><span class="fu">lookup</span> _key []  <span class="ot">=</span>  <span class="dt">Nothing</span></span>
<span id="cb87-3"><a href="#cb87-3" aria-hidden="true"></a><span class="fu">lookup</span>  key ((k,val)<span class="op">:</span>rest)</span>
<span id="cb87-4"><a href="#cb87-4" aria-hidden="true"></a>    <span class="op">|</span> key <span class="op">==</span> k  <span class="ot">=</span>  <span class="dt">Just</span> val</span>
<span id="cb87-5"><a href="#cb87-5" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span>  <span class="fu">lookup</span> key rest</span></code></pre></div>
<p>The <code>Maybe</code> type is a simple way to avoid NullPointer errors or similar issues with undefined results. Thus, many languages have adopted it under different names. In Java for instance, it is called <code>Optional</code>.</p>
<h4 id="total-functions">Total functions</h4>
<p>In Haskell, it is considered good practise to use <em>total functions</em> - that is functions that have defined return values for all possible input values - where ever possible to avoid runtime errors.</p>
<p>Typical examples for <em>partial</em> (i.e. non-total) functions are division and square roots. We can use <code>Maybe</code> to make them total:</p>
<div class="sourceCode" id="cb88"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb88-1"><a href="#cb88-1" aria-hidden="true"></a><span class="ot">safeDiv ::</span> (<span class="dt">Eq</span> a, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb88-2"><a href="#cb88-2" aria-hidden="true"></a>safeDiv _ <span class="dv">0</span> <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb88-3"><a href="#cb88-3" aria-hidden="true"></a>safeDiv x y <span class="ot">=</span> <span class="dt">Just</span> (x <span class="op">/</span> y)</span>
<span id="cb88-4"><a href="#cb88-4" aria-hidden="true"></a></span>
<span id="cb88-5"><a href="#cb88-5" aria-hidden="true"></a><span class="ot">safeRoot ::</span> (<span class="dt">Ord</span> a, <span class="dt">Floating</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb88-6"><a href="#cb88-6" aria-hidden="true"></a>safeRoot x</span>
<span id="cb88-7"><a href="#cb88-7" aria-hidden="true"></a>  <span class="op">|</span> x <span class="op">&lt;</span> <span class="dv">0</span>     <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb88-8"><a href="#cb88-8" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">sqrt</span> x)</span></code></pre></div>
<p>In fact, there are alternative base libraries that don’t provide any partial functions.</p>
<h4 id="composition-of-maybe-operations">Composition of Maybe operations</h4>
<p>Now let’s consider a situation where we want to combine several of those functions. Say for example we first want to lookup the divisor from a key-value table, then perform a division with it and finally compute the square root of the quotient:</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true"></a><span class="ot">findDivRoot ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [(<span class="dt">String</span>, <span class="dt">Double</span>)] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb89-2"><a href="#cb89-2" aria-hidden="true"></a>findDivRoot x key <span class="fu">map</span> <span class="ot">=</span></span>
<span id="cb89-3"><a href="#cb89-3" aria-hidden="true"></a>  <span class="kw">case</span> <span class="fu">lookup</span> key <span class="fu">map</span> <span class="kw">of</span></span>
<span id="cb89-4"><a href="#cb89-4" aria-hidden="true"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb89-5"><a href="#cb89-5" aria-hidden="true"></a>      <span class="dt">Just</span> y  <span class="ot">-&gt;</span> <span class="kw">case</span> safeDiv x y <span class="kw">of</span></span>
<span id="cb89-6"><a href="#cb89-6" aria-hidden="true"></a>          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb89-7"><a href="#cb89-7" aria-hidden="true"></a>          <span class="dt">Just</span> d  <span class="ot">-&gt;</span> <span class="kw">case</span> safeRoot d <span class="kw">of</span></span>
<span id="cb89-8"><a href="#cb89-8" aria-hidden="true"></a>              <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb89-9"><a href="#cb89-9" aria-hidden="true"></a>              <span class="dt">Just</span> r  <span class="ot">-&gt;</span> <span class="dt">Just</span> r</span>
<span id="cb89-10"><a href="#cb89-10" aria-hidden="true"></a></span>
<span id="cb89-11"><a href="#cb89-11" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb89-12"><a href="#cb89-12" aria-hidden="true"></a>λ<span class="op">&gt;</span> findDivRoot <span class="dv">27</span> <span class="st">&quot;val&quot;</span> [(<span class="st">&quot;val&quot;</span>, <span class="dv">3</span>)]</span>
<span id="cb89-13"><a href="#cb89-13" aria-hidden="true"></a><span class="dt">Just</span> <span class="fl">3.0</span></span>
<span id="cb89-14"><a href="#cb89-14" aria-hidden="true"></a>λ<span class="op">&gt;</span> findDivRoot <span class="dv">27</span> <span class="st">&quot;val&quot;</span> [(<span class="st">&quot;val&quot;</span>, <span class="dv">0</span>)]</span>
<span id="cb89-15"><a href="#cb89-15" aria-hidden="true"></a><span class="dt">Nothing</span></span>
<span id="cb89-16"><a href="#cb89-16" aria-hidden="true"></a>λ<span class="op">&gt;</span> findDivRoot <span class="dv">27</span> <span class="st">&quot;val&quot;</span> [(<span class="st">&quot;val&quot;</span>, <span class="op">-</span><span class="dv">3</span>)]</span>
<span id="cb89-17"><a href="#cb89-17" aria-hidden="true"></a><span class="dt">Nothing</span></span></code></pre></div>
<p>The resulting control flow is depicted in the following diagram, which was inspired by the <a href="https://fsharpforfunandprofit.com/rop/">Railroad Oriented Programming</a> presentation: <img src="/img/maybe.png" width="924" alt="The Maybe Railroad"/></p>
<p>In each single step we have to check for <code>Nothing</code>, in that case we directly short circuit to an overall <code>Nothing</code> result value. In the <code>Just</code> case we proceed to the next processing step.</p>
<p>This kind of handling is repetitive and buries the actual intention under a lot of boilerplate. As Haskell uses layout (i.e. indentation) instead of curly brackets to separate blocks the code will end up in what is called the <em>dreaded staircase</em>: it marches to the right of the screen.</p>
<p>So we are looking for a way to improve the code by abstracting away the chaining of functions that return <code>Maybe</code> values and providing a way to <em>short circuit</em> the <code>Nothing</code> cases.</p>
<p>We need an operator <code>andThen</code> that takes the <code>Maybe</code> result of a first function application as first argument, and a function as second argument that will be used in the <code>Just x</code> case and again returns a <code>Maybe</code> result. In case that the input is <code>Nothing</code> the operator will directly return <code>Nothing</code> without any further processing. In case that the input is <code>Just x</code> the operator will apply the argument function <code>fun</code> to <code>x</code> and return its result:</p>
<div class="sourceCode" id="cb90"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb90-1"><a href="#cb90-1" aria-hidden="true"></a><span class="ot">andThen ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb90-2"><a href="#cb90-2" aria-hidden="true"></a>andThen <span class="dt">Nothing</span> _fun <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb90-3"><a href="#cb90-3" aria-hidden="true"></a>andThen (<span class="dt">Just</span> x) fun <span class="ot">=</span> fun x</span></code></pre></div>
<p>We can then rewrite <code>findDivRoot</code> as follows:</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true"></a>findDivRoot&#39;&#39;&#39;&#39; x key <span class="fu">map</span> <span class="ot">=</span></span>
<span id="cb91-2"><a href="#cb91-2" aria-hidden="true"></a>  <span class="fu">lookup</span> key <span class="fu">map</span> <span class="ot">`andThen`</span> \y <span class="ot">-&gt;</span></span>
<span id="cb91-3"><a href="#cb91-3" aria-hidden="true"></a>  safeDiv x y    <span class="ot">`andThen`</span> \d <span class="ot">-&gt;</span></span>
<span id="cb91-4"><a href="#cb91-4" aria-hidden="true"></a>  safeRoot d</span></code></pre></div>
<p>(Side note: In Java the <code>Optional</code> type has a corresponding method: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#flatMap-java.util.function.Function-">Optional.flatmap</a>)</p>
<p>This kind of chaining of functions in the context of a specific data type is quite common. So, it doesn’t surprise us that there exists an even more abstract <code>andThen</code> operator that works for arbitrary parameterized data types:</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb92-1"><a href="#cb92-1" aria-hidden="true"></a><span class="ot">(&gt;&gt;=) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span></code></pre></div>
<p>When we compare this <em>bind</em> operator with the type signature of the <code>andThen</code> operator:</p>
<div class="sourceCode" id="cb93"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb93-1"><a href="#cb93-1" aria-hidden="true"></a><span class="ot">andThen ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span></code></pre></div>
<p>We can see that both operators bear the same structure. The only difference is that instead of the concrete type <code>Maybe</code> the signature of <code>(&gt;&gt;=)</code> uses a type variable <code>m</code> with a <code>Monad</code> type class constraint. We can read this type signature as:</p>
<p>For any type <code>m</code> of the type class <code>Monad</code> the operator <code>(&gt;&gt;=)</code> is defined as <code>m a -&gt; (a -&gt; m b) -&gt; m b</code> Based on <code>(&gt;&gt;=)</code> we can rewrite the <code>findDivRoot</code> function as follows:</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true"></a>findDivRoot&#39; x key <span class="fu">map</span> <span class="ot">=</span></span>
<span id="cb94-2"><a href="#cb94-2" aria-hidden="true"></a>  <span class="fu">lookup</span> key <span class="fu">map</span> <span class="op">&gt;&gt;=</span> \y <span class="ot">-&gt;</span></span>
<span id="cb94-3"><a href="#cb94-3" aria-hidden="true"></a>  safeDiv x y    <span class="op">&gt;&gt;=</span> \d <span class="ot">-&gt;</span></span>
<span id="cb94-4"><a href="#cb94-4" aria-hidden="true"></a>  safeRoot d</span></code></pre></div>
<p>Monads are a central element of the Haskell type class ecosystem. In fact the monadic composition based on <code>(&gt;&gt;=)</code> is so frequently used that there exists some specific syntactic sugar for it. It’s called the do-Notation. Using do-Notation <code>findDivRoot</code> looks like this:</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true"></a>findDivRoot&#39;&#39;&#39; x key <span class="fu">map</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb95-2"><a href="#cb95-2" aria-hidden="true"></a>  y <span class="ot">&lt;-</span> <span class="fu">lookup</span> key <span class="fu">map</span></span>
<span id="cb95-3"><a href="#cb95-3" aria-hidden="true"></a>  d <span class="ot">&lt;-</span> safeDiv x y</span>
<span id="cb95-4"><a href="#cb95-4" aria-hidden="true"></a>  safeRoot d</span></code></pre></div>
<p>This looks quite like a sequence of statements (including variable assignments) in an imperative language. Due to this similarity Monads have been aptly called <a href="http://book.realworldhaskell.org/read/monads.html#id642960">programmable semicolons</a>. But as we have seen: below the syntactic sugar it’s a purely functional composition!</p>
<h3 id="purity">Purity</h3>
<p>A function is called pure if it corresponds to a function in the mathematical sense: it associates each possible input value with an output value, and does nothing else. In particular,</p>
<ul>
<li>it has no side effects, that is to say, invoking it produces no observable effect other than the result it returns; it cannot also e.g. write to disk, or print to a screen.</li>
<li>it does not depend on anything other than its parameters, so when invoked in a different context or at a different time with the same arguments, it will produce the same result.</li>
</ul>
<p>Purity makes it easy to reason about code, as it is so close to mathematical calculus. The properties of a Haskell program can thus often be determined with equational reasoning. (As an example I have provided an <a href="https://github.com/thma/WhyHaskellMatters/blob/master/functor-proof.md">example for equational reasoning in Haskell</a>).</p>
<p>Purity also improves testability: It is much easier to set up tests without worrying about mocks or stubs to factor out access to backend layers.</p>
<p>All the functions that we have seen so far are all <em>pure</em> code that is free from side effects.</p>
<p>So how can we achieve side effects like writing to a database or serving HTTP requests in Haskell?</p>
<p>The Haskell language designers came up with a solution that distinguishes Haskell from most other languages: Side effects are always explicitly declared in the function type signature. In the next section we will learn how exactly this works.</p>
<h3 id="explicit-side-effects-with-the-io-monad">Explicit side effects with the IO Monad</h3>
<blockquote>
<p>Monadic I/O is a clever trick for encapsulating sequential, imperative computation, so that it can “do no evil” to the part that really does have precise semantics and good compositional properties.</p>
<p><a href="http://conal.net/blog/posts/is-haskell-a-purely-functional-language">Conal Elliott</a></p>
</blockquote>
<p>The most prominent Haskell Monad is the <code>IO</code> monad. It is used to compose operations that perform I/O. We’ll study this with a simple example.</p>
<p>In an imperative language, reading a String from the console simply returns a String value (e.g. <code>BufferedReader.readline()</code> in Java: <code>public String readLine() throws IOException</code>).</p>
<p>In Haskell the function <code>getLine</code> does not return a <code>String</code> value but an <code>IO String</code>:</p>
<div class="sourceCode" id="cb96"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb96-1"><a href="#cb96-1" aria-hidden="true"></a><span class="fu">getLine</span><span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">String</span></span></code></pre></div>
<p>This could be interpreted as: <code>getLine</code> returns a String in an IO context. In Haskell, it is not possible to extract the String value from its IO context (In Java on the other hand you could always catch away the <code>IOException</code>).</p>
<p>So how can we use the result of <code>getLine</code> in a function that takes a <code>String</code> value as input parameter?</p>
<p>We need the monadic bind operation <code>(&gt;&gt;=)</code> to do this in the same as we already saw in the <code>Maybe</code> monad:</p>
<div class="sourceCode" id="cb97"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb97-1"><a href="#cb97-1" aria-hidden="true"></a><span class="co">-- convert a string to upper case</span></span>
<span id="cb97-2"><a href="#cb97-2" aria-hidden="true"></a><span class="ot">strToUpper ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb97-3"><a href="#cb97-3" aria-hidden="true"></a>strToUpper <span class="ot">=</span> <span class="fu">map</span> <span class="fu">toUpper</span> </span>
<span id="cb97-4"><a href="#cb97-4" aria-hidden="true"></a> </span>
<span id="cb97-5"><a href="#cb97-5" aria-hidden="true"></a><span class="ot">up ::</span> <span class="dt">IO</span> () </span>
<span id="cb97-6"><a href="#cb97-6" aria-hidden="true"></a>up <span class="ot">=</span> </span>
<span id="cb97-7"><a href="#cb97-7" aria-hidden="true"></a>  <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span> \str <span class="ot">-&gt;</span></span>
<span id="cb97-8"><a href="#cb97-8" aria-hidden="true"></a>  <span class="fu">print</span> (strToUpper str)</span>
<span id="cb97-9"><a href="#cb97-9" aria-hidden="true"></a></span>
<span id="cb97-10"><a href="#cb97-10" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb97-11"><a href="#cb97-11" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t <span class="fu">print</span></span>
<span id="cb97-12"><a href="#cb97-12" aria-hidden="true"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb97-13"><a href="#cb97-13" aria-hidden="true"></a>λ<span class="op">&gt;</span> up</span>
<span id="cb97-14"><a href="#cb97-14" aria-hidden="true"></a>hello world</span>
<span id="cb97-15"><a href="#cb97-15" aria-hidden="true"></a><span class="st">&quot;HELLO WORLD&quot;</span></span></code></pre></div>
<p>or with do-Notation:</p>
<div class="sourceCode" id="cb98"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb98-1"><a href="#cb98-1" aria-hidden="true"></a><span class="ot">up&#39; ::</span> <span class="dt">IO</span> () </span>
<span id="cb98-2"><a href="#cb98-2" aria-hidden="true"></a>up&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb98-3"><a href="#cb98-3" aria-hidden="true"></a>  str <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb98-4"><a href="#cb98-4" aria-hidden="true"></a>  <span class="fu">print</span> (strToUpper str)</span></code></pre></div>
<p>Making side effects explicit in function type signatures is one of the most outstanding achievements of Haskell. This feature will lead to a very rigid distinction between code that is free of side effects (aka <em>pure</em> code) and code that has side effects (aka <em>impure</em> code).</p>
<p>Keeping domain logic <em>pure</em> - particularly when working only with <em>total</em> functions - will dramatically improve reliability and testability as tests can be run without setting up mocks or stubbed backends.</p>
<p>It’s not possible to introduce side effects without making them explicit in type signatures. There is nothing like the <em>invisible</em> Java <code>RuntimeExceptions</code>. So you can rely on the compiler to detect any violations of a rule like “No impure code in domain logic”.</p>
<p>I’ve written a simple Restaurant Booking REST Service API that explains how Haskell helps you to keep domain logic pure by organizing your code according to the <a href="https://github.com/thma/RestaurantReservation">ports and adapters pattern</a>.</p>
<p>The section on type classes (and on Monads in particular) have been quite lengthy. Yet, they have hardly shown more than the tip of the iceberg. If you want to dive deeper into type classes, I recommend <a href="https://wiki.haskell.org/Typeclassopedia">The Typeclassopedia</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have covered quite a bit of terrain in the course of this article.</p>
<p>It may seem that Haskell has invented an intimidating mass of programming concepts. But in fact, Haskell inherits much from earlier functional programming languages.</p>
<p>Features like first class functions, comprehensive list APIs or declarative programming had already been introduced with Lisp and Scheme.</p>
<p>Several others, like pattern matching, non-strict evaluation, immutability, purity, static and strong typing, type inference, algebraic data types and polymorphic data types have been invented in languages like Hope, Miranda and ML.</p>
<p>Only a few features like type classes and explicit side effects / monadic I/O were first introduced in Haskell.</p>
<p>So if you already know some functional language concepts, Haskell shouldn’t seem too alien to you. For developers with a background in OO languages, the conceptual gap will be much larger.</p>
<p>I hope that this article helped to bridge that gap a bit and to better explain <a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">why functional programming</a> - and Haskell in particular - matters.</p>
<p>Using functional programming languages - or applying some of their techniques - will help to create designs that are closer to the problem domain (as intented by domain driven design), more readable (due to their declarative character), allow equational reasoning, will provide more rigid separation of business logic and side effects, are more flexible for future changes or extensions, provide better testability (supporting BDD, TDD and property based testing), will need much less debugging, are better to maintain and, last but not least, will be more fun to write.</p>
]]></summary>
</entry>
<entry>
    <title>Writing Haskell native GUI Applications with Threepenny GUI and Electron</title>
    <link href="https://thma.github.io//posts/2019-12-10-threepenny-gui-and-electron.html" />
    <id>https://thma.github.io//posts/2019-12-10-threepenny-gui-and-electron.html</id>
    <published>2019-12-10T00:00:00Z</published>
    <updated>2019-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on December 10, 2019
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p><a href="https://github.com/thma/ThreepennyElectron/actions"><img src="https://github.com/thma/ThreepennyElectron/workflows/Haskell%20CI/badge.svg" alt="Actions Status" /></a> <a href="https://snyk.io/test/github/thma/ThreepennyElectron?targetFile=package.json"><img src="https://snyk.io/test/github/thma/ThreepennyElectron/badge.svg?targetFile=package.json" alt="Known Vulnerabilities" /></a></p>
<h2 id="tldr">tl;dr</h2>
<p>Threepenny is an awesome Haskell library for creating browser based applications running on localhost.</p>
<p>By combining it with the Electron.js framework you have a great toolset for writing cross-platform standalone GUI applications — completely in Haskell with a great functional reactive programming API.</p>
<p>See it in action:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">git</span> clone https://github.com/thma/ThreepennyElectron.git</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="bu">cd</span> ThreepennyElectron</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ex">stack</span> init</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ex">npm</span> install</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="ex">npm</span> start</span></code></pre></div>
<p>Prerequisites: - <a href="https://git-scm.com/">Git</a> - <a href="https://docs.haskellstack.org/en/stable/README/">Haskell Stack</a> - <a href="https://nodejs.org">Nodejs</a></p>
<h2 id="immature-support-for-writing-desktop-applications-in-haskell">Immature support for writing Desktop Applications in Haskell ?</h2>
<p>Since reading The GUI chapter in <a href="http://book.realworldhaskell.org/read/gui-programming-with-gtk-hs.html">Real World Haskell</a> I had the impression that Haskell does not excel in GUI programming. The GUI examples in Real World Haskell are based on <a href="https://github.com/gtk2hs/gtk2hs">gtk2hs</a>. Gtk2hs is a Haskell library that allows to write platform-independent GUI applications based on the GTK library. There are some large applications based on gtk2hs or its successor <a href="https://github.com/haskell-gi/gi-gtk-hs">gi-gtk-hs</a> like the Haskell IDE <a href="http://leksah.org/">Leksah</a>. It’s rock solid technology. But it’s also quite dated and the imperative programming model is not an ideal fit for a purely functional language like Haskell.</p>
<p>So even though I’m a Haskell enthusiast I tended to agree with <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#standalone-gui-applications">Gabriel Gonzales “Immature” rating</a> of Haskell’s support for standalone GUI Applications.</p>
<h2 id="threepenny-to-the-rescue">Threepenny to the rescue</h2>
<p>A few weeks back I was asked to write a standalone GUI version of an existing Haskell commandline app. So I had to make up my mind about choosing a GUI library with an optimal fit to my needs:</p>
<ul>
<li>provide a multi-platform (Windows, MacOS, Linux) standalone GUI application.</li>
<li>use functional reactive programming instead of event handler callbacks</li>
<li>provide a modern look and feel e.g. material design</li>
</ul>
<p>I never was satisfied with the look and feel of GTK based applications. And I also wasn’t keen on going back to callback based UI programming. So I had a look at Gabriel Gonzalez great resource <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md">State of the Haskell ecosystem</a>.</p>
<p>In the <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#standalone-gui-applications">section on Standalone GUI applications</a> he mainly mentions GTK and Qt bindings but also some other libraries. One of them is <a href="http://wiki.haskell.org/Threepenny-gui">Threepenny GUI</a> which caught my attention because it uses the web browser as a display. And it comes with an (optional) functional reactive programming model!</p>
<blockquote>
<p>A program written with Threepenny is essentially a small web server that displays the user interface as a web page to any browser that connects to it. You can freely manipulate the HTML DOM and handle JavaScript events from your Haskell code.</p>
<p>(Quoted from the <a href="https://hackage.haskell.org/package/threepenny-gui">hackage documentation</a>)</p>
</blockquote>
<p>My next thought was: It would be cool to use <a href="https://electronjs.org/">Electron</a> to host the Threepenny HTML/Javascript frontend against the Threepenny Haskell backend. By making use of the <a href="https://www.npmjs.com/package/electron-packager">electron packager</a> this would allow to package platform specific standalone GUI application for Windows, MacOS and Linux.</p>
<p>I really got excited when I found out that Jeremy Barisch-Rooney already had already written a short <a href="https://github.com/HeinrichApfelmus/threepenny-gui/blob/master/doc/electron.md">HOWTO document</a> that explains the required steps to glue an ELectron frontend to a Threepenny backend.</p>
<p>Based on this Howto I was able to deliver a native windows GUI Application with an embed Haskell backend within just a few days. I received very good feedback from the endusers and my impression was:</p>
<blockquote>
<p>“Thanks to Threepenny GUI support in Haskell has just become a bit more mature!”</p>
</blockquote>
<p>As I did not find much coverage of this specific Electron / Threepenny GUI combination in blogs or tutorials I thought it would be a good idea to spread the word by writing a short tutorial featuring the basic building blocks of this approach.</p>
<p>So without further ado let’s get started:</p>
<h2 id="writing-a-platform-independent-standalone-calculator-app">Writing a platform independent standalone calculator app</h2>
<p>In order to provide a bit more than just a hello world example I’m showcasing a simple pocket calculator app. This allows to demonstrate basic features of writing real world UI applications. The calculator is based on an earlier <a href="https://bitbucket.org/astynax/threep/src/default/">Threepenny GUI demo by Aleksey Pirogov</a>.</p>
<p>The UI of the calculator is shown in the screenshot below. It features a display, a numeric block for entering digits and a decimal point, buttons for the four basic arithmetical operations, a <strong>clear</strong> button and a <strong>clear error</strong> button:</p>
<figure>
<img src="/img/screenshot.png" alt="" /><figcaption>screenshot of the calculator</figcaption>
</figure>
<h3 id="the-calculator">The calculator</h3>
<p>At the heart of an application sits the model. In this case the <a href="https://github.com/thma/ThreepennyElectron/tree/master/src/Calc.hs">calculator</a>. It is implemented as a simple state machine. The state machine knows five different states:</p>
<ol type="1">
<li>Entering a number into the first register A</li>
<li>Finishing the entry of the first number by entering an Operation (+, -, *, /)</li>
<li>Entering a number into the second register B</li>
<li>Finishing the Operation of the second number by entering <strong>=</strong> or another arithmetic operation</li>
<li>an Error state in case of divison by zero or by entering a wrong sequence of buttons</li>
</ol>
<p>This is reflected in the following data type declaration:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">-- | a data type representing all possible states of the calculator</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">State</span> <span class="ot">=</span> <span class="dt">EnteringA</span>     <span class="dt">Entering</span>                   <span class="co">-- ^ entering register A</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">EnteredAandOp</span> <span class="dt">Double</span>  <span class="dt">Operation</span>          <span class="co">-- ^ A, Op</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">EnteringB</span>     <span class="dt">Double</span>  <span class="dt">Operation</span> <span class="dt">Entering</span> <span class="co">-- ^ A, Op, entering register B</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Calculated</span>    <span class="dt">Double</span>  <span class="dt">Operation</span> <span class="dt">Double</span>   <span class="co">-- ^ A, Op, B</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Error</span>         <span class="dt">Double</span>  <span class="dt">String</span>             <span class="co">-- ^ A, Message</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>           <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">-- | Entering is a tuple used while entering numbers. It consists of</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Entering</span> <span class="ot">=</span> (<span class="dt">String</span>, <span class="dt">Bool</span>) <span class="co">-- A tuple of the String representation of the entered digits</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>                               <span class="co">-- and a flag signalling that Dot was already pressed.</span></span></code></pre></div>
<p>Starting with an initial state</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">initialState ::</span> <span class="dt">State</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>initialState <span class="ot">=</span> <span class="dt">EnteringA</span> (<span class="st">&quot;0&quot;</span>, <span class="dt">False</span>)</span></code></pre></div>
<p>we can operate the calculator by populating it with Button events:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">-- in GHCi:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;9&quot;</span> initialState</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="dt">EnteringA</span> (<span class="st">&quot;09&quot;</span>,<span class="dt">False</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;9&quot;</span> it</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="dt">EnteringA</span> (<span class="st">&quot;099&quot;</span>,<span class="dt">False</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;/&quot;</span> it</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="dt">EnteredAandOp</span> <span class="fl">99.0</span> <span class="dt">Div</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;7&quot;</span> it</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="dt">EnteringB</span> <span class="fl">99.0</span> <span class="dt">Div</span> (<span class="st">&quot;7&quot;</span>,<span class="dt">False</span>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;=&quot;</span> it</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a><span class="dt">Calculated</span> <span class="fl">14.142857142857142</span> <span class="dt">Div</span> <span class="fl">7.0</span></span></code></pre></div>
<p>The <code>populate</code> function is defined as :</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">populate ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="ot">-&gt;</span> <span class="dt">State</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>populate <span class="ot">=</span> processCommand <span class="op">.</span> parseInput</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="co">-- | process a calculator command. That is: compute a calculator state transition    </span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="ot">processCommand ::</span> <span class="dt">Command</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="ot">-&gt;</span> <span class="dt">State</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>processCommand cmd <span class="ot">=</span> <span class="kw">case</span> cmd <span class="kw">of</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>  <span class="dt">Digit</span> x      <span class="ot">-&gt;</span> addDigit x</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>  <span class="dt">Dot</span>          <span class="ot">-&gt;</span> addDot</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>  <span class="dt">Operation</span> op <span class="ot">-&gt;</span> applyOp op</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>  command      <span class="ot">-&gt;</span> applyCmd command</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a><span class="co">-- | parse a Command from an input string</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a><span class="ot">parseInput ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Command</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>parseInput x <span class="ot">=</span> <span class="kw">case</span> x <span class="kw">of</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>  <span class="st">&quot;0&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Zero</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>  <span class="st">&quot;1&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">One</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>  <span class="st">&quot;2&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Two</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>  <span class="st">&quot;3&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Three</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>  <span class="st">&quot;4&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Four</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>  <span class="st">&quot;5&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Five</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>  <span class="st">&quot;6&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Six</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>  <span class="st">&quot;7&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Seven</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>  <span class="st">&quot;8&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Eight</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>  <span class="st">&quot;9&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Nine</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>  <span class="st">&quot;.&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Dot</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>  <span class="st">&quot;+&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Add</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>  <span class="st">&quot;-&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Sub</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a>  <span class="st">&quot;*&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Mul</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a>  <span class="st">&quot;/&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Div</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a>  <span class="st">&quot;=&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Flush</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a>  <span class="st">&quot;C&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Clear</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>  <span class="st">&quot;CE&quot;</span> <span class="ot">-&gt;</span> <span class="dt">ClearError</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>  _    <span class="ot">-&gt;</span> <span class="fu">undefined</span></span></code></pre></div>
<p>First the input is parsed to a Command. Based on the parsed Command (either a digit, a dot, an arithmetic operation or <code>=</code>, <code>C</code> or <code>CE</code>) the current state is modified by one of the functions <code>addDigit</code>, <code>addDot</code>, <code>applyOp</code> or <code>applyCmd</code>.</p>
<p>I won’t dive deeper into those functions, as you will easily grasp the mechanism by studying the <a href="https://github.com/thma/ThreepennyElectron/tree/master/src/Calc.hs">source code</a>.</p>
<h2 id="the-threepenny-gui">The Threepenny GUI</h2>
<p>I will not give an introduction to the Threepenny GUI programming model here as Threepenny already ships with <a href="https://github.com/HeinrichApfelmus/threepenny-gui/tree/master/samples">plenty of samples</a> and a good <a href="https://github.com/HeinrichApfelmus/threepenny-gui/tree/master/doc/hal-2017">getting started tutorial</a>. Instead I will focus on presenting only those parts that are necessary to understand the calculator GUI.</p>
<p>The application Main module consists of a single function <code>main</code>. It reads a port number from the commandline an then call <code>Ui.start</code> to launch a WebServer hosting the Ui application on that port:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  [port] <span class="ot">&lt;-</span> getArgs</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>  Ui.start (<span class="fu">read</span> port)</span></code></pre></div>
<p>This function will either be called when starting the application with <code>stack exec ThreepennyElectron 8080</code> or by the electron launch script main.js (which we will discuss later).</p>
<p>The <code>Ui</code> module contains all code for rendering the HTML dom, setting up the event binding to GUI widgets and the respective interaction with application backend.</p>
<p>Let’s start with the main entry point <code>Ui.start</code> which is called on application launch:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">start ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>start port <span class="ot">=</span> startGUI defaultConfig</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    { jsPort   <span class="ot">=</span> <span class="dt">Just</span> port</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    , jsStatic <span class="ot">=</span> <span class="dt">Just</span> <span class="st">&quot;static&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>    } setup</span></code></pre></div>
<p>It takes the port number as parameter and starts up a web server with the Threepenny <code>startGUI</code> function. <code>startGUI</code> has the folloing type signature:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- | Start server for GUI sessions.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>startGUI</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="ot">    ::</span> <span class="dt">Config</span>               <span class="co">-- ^ Server configuration.</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="ot">-&gt;</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">UI</span> ())    <span class="co">-- ^ Action to run whenever a client browser connects.</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p>We build our server configuration by starting with the default configuration <code>defaultConfig</code> and then modifying two properties:</p>
<ol type="1">
<li>setting the port number to the one read from the command line.</li>
<li>declaring the static content (i.e any html, JavaScript and CSS content) to reside in the directory <code>./static</code>.</li>
</ol>
<p>The <code>(Window -&gt; UI ())</code> action parameter is filled with the function <code>setup</code>.</p>
<p>Obviously this function must have the following signature:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="co">-- | setup window layout and event handling</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">setup ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">UI</span> ()</span></code></pre></div>
<p>As this function defines the whole layout and user interaction we will inspect it step by step.</p>
<h3 id="creating-the-threepenny-ui-design">Creating the Threepenny UI design</h3>
<p>The first step is to define the UI elements the overall window layout:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>setup win <span class="ot">=</span> void <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  <span class="co">-- define page + stylesheet</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  <span class="fu">return</span> win <span class="op">#</span> set title <span class="st">&quot;3PennyCalc&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  UI.addStyleSheet win <span class="st">&quot;semantic.css&quot;</span></span></code></pre></div>
<p>We start by assigning a title to the window <code>win</code> and adding a stylesheet. In our example we are using the <a href="https://semantic-ui.com/">Semantic UI</a> stylesheet. (You could of course use any other css framework or roll your own.)</p>
<p>Next we define the calculator display element <code>outputBox</code> as a <code>UI.input</code> element. These elements willbe rendered as HTML DOM elements in the browser. Threepenny provides combinators to define css classes and other html attributes. In this case we set the input field to readonly, make the text align to the right and set its width:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>  <span class="co">-- define UI controls</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>  outputBox <span class="ot">&lt;-</span> UI.input</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>                <span class="op">#</span> set (attr <span class="st">&quot;readonly&quot;</span>) <span class="st">&quot;true&quot;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>                <span class="op">#</span> set (attr <span class="st">&quot;style&quot;</span>) <span class="st">&quot;text-align: right; min-width: 324px&quot;</span></span></code></pre></div>
<p>This is resulting HTML DOM element:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">&lt;input</span><span class="ot"> readonly=</span><span class="st">&quot;readonly&quot;</span><span class="ot"> style=</span><span class="st">&quot;text-align: right; min-width: 324px&quot;</span><span class="kw">&gt;</span></span></code></pre></div>
<p>In the next step we define the calculator buttons for digits, operations and commands:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>  <span class="co">-- define the button grid</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>  buttons   <span class="ot">&lt;-</span> <span class="fu">mapM</span> (<span class="fu">mapM</span> mkButton) buttonLabels</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="ot">    mkButton ::</span> (<span class="dt">Command</span>, <span class="dt">Color</span>) <span class="ot">-&gt;</span> <span class="dt">UI</span> <span class="dt">Element</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>    mkButton (cmd, clr) <span class="ot">=</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>      <span class="kw">let</span> btnLabel <span class="ot">=</span> lbl cmd <span class="co">-- get the button text</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>      <span class="kw">in</span>  UI.button <span class="op">#.</span> (<span class="st">&quot;ui &quot;</span> <span class="op">++</span> color clr <span class="op">++</span> <span class="st">&quot; button&quot;</span>)</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>                    <span class="op">#</span> set text btnLabel <span class="op">#</span> set value btnLabel</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a>                    <span class="op">#</span> set (attr <span class="st">&quot;type&quot;</span>)  <span class="st">&quot;button&quot;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a>                    <span class="op">#</span> set (attr <span class="st">&quot;style&quot;</span>) <span class="st">&quot;min-width: 60px&quot;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a><span class="ot">    color ::</span> <span class="dt">Color</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a>    color <span class="ot">=</span> <span class="fu">map</span> <span class="fu">toLower</span> <span class="op">.</span> <span class="fu">show</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a><span class="ot">    buttonDefinitions ::</span> [[(<span class="dt">Command</span>, <span class="dt">Color</span>)]]</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true"></a>    buttonDefinitions <span class="ot">=</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true"></a>      [ [(<span class="dt">Digit</span> <span class="dt">Seven</span>, <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Eight</span>, <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Nine</span>,  <span class="dt">Grey</span>), (<span class="dt">ClearError</span>,   <span class="dt">Orange</span>), (<span class="dt">Clear</span>,        <span class="dt">Orange</span>)]</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true"></a>      , [(<span class="dt">Digit</span> <span class="dt">Four</span>,  <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Five</span>,  <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Six</span>,   <span class="dt">Grey</span>), (<span class="dt">Operation</span> <span class="dt">Add</span>, <span class="dt">Brown</span>), (<span class="dt">Operation</span> <span class="dt">Sub</span>, <span class="dt">Brown</span>)]</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true"></a>      , [(<span class="dt">Digit</span> <span class="dt">One</span>,   <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Two</span>,   <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Three</span>, <span class="dt">Grey</span>), (<span class="dt">Operation</span> <span class="dt">Mul</span>, <span class="dt">Brown</span>), (<span class="dt">Operation</span> <span class="dt">Div</span>, <span class="dt">Brown</span>)]</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true"></a>      , [(<span class="dt">Dot</span>,  <span class="dt">Grey</span>),        (<span class="dt">Digit</span> <span class="dt">Zero</span>,  <span class="dt">Grey</span>), (<span class="dt">Flush</span>, <span class="dt">Black</span>)] ]</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true"></a></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true"></a><span class="co">-- | Button colors</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Color</span> <span class="ot">=</span> <span class="dt">Grey</span> <span class="op">|</span> <span class="dt">Orange</span> <span class="op">|</span> <span class="dt">Brown</span> <span class="op">|</span> <span class="dt">Black</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>To understand this piece of code let’s start with <code>buttonDefinitions :: [[(Command, Color)]]</code>: a list of lists of <code>(Command, Color)</code> tuples. The outer list represents the rows, the inner list the columns in each row. The tuples represent the button commands and colors we want to see on the calculator buttons.</p>
<p>Mapping the function <code>mkButton</code> over the <code>buttonDefinitions</code> is then used to create the <code>buttons :: [[UI Element]]</code>. Where <code>mkButton</code> defines each button as a <code>UI.button</code>, assigns a semantic.ui css class <code>("ui " ++ color c ++ " button")</code> to it (using the <code>#.</code> combinator) and sets text and other attributes by using the <code># set</code> combinator.</p>
<p>To give an example the first element from <code>buttonDefinitions</code>: <code>(Digit Seven, Grey)</code> will be rendered in the HTML DOM as:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;7&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>7<span class="kw">&lt;/button&gt;</span></span></code></pre></div>
<p>As the last step of the layouting stage we glue everything together to a nice grid and place it as the HTML body into the DOM tree. Again we use css classes from the Semantic UI framework to create a pleasant look and feel:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>  UI.getBody win <span class="op">#</span> set (attr <span class="st">&quot;style&quot;</span>) <span class="st">&quot;overflow: hidden&quot;</span> <span class="op">#+</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    [ UI.div <span class="op">#.</span> <span class="st">&quot;ui raised very padded text container segment&quot;</span> <span class="op">#+</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>      [UI.table <span class="op">#+</span> [UI.row [UI.div <span class="op">#.</span> <span class="st">&quot;ui input&quot;</span> <span class="op">#+</span> [element outputBox]]] <span class="op">#+</span> </span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>                    <span class="fu">map</span> (UI.row <span class="op">.</span> <span class="fu">map</span> element) buttons]</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    ]</span></code></pre></div>
<p>The resulting HTML looks like follows (for brevity I’m showing only everything up to the first row of buttons):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="kw">&lt;body</span><span class="ot"> style=</span><span class="st">&quot;overflow: hidden&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="kw">&lt;noscript&gt;</span>Please enable JavaScript.<span class="kw">&lt;/noscript&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a><span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;ui raised very padded text container segment&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>    <span class="kw">&lt;table&gt;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>        <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a>            <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-row&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>                    <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;ui input&quot;</span><span class="kw">&gt;&lt;input</span><span class="ot"> readonly=</span><span class="st">&quot;readonly&quot;</span><span class="ot"> style=</span><span class="st">&quot;text-align: right; min-width: 324px&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a>                    <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true"></a>            <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true"></a>        <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true"></a>            <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-row&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;7&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>7<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;8&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>8<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;9&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>9<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui orange button&quot;</span><span class="ot"> value=</span><span class="st">&quot;CE&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>CE<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui orange button&quot;</span><span class="ot"> value=</span><span class="st">&quot;C&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>C<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true"></a>            <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true"></a></span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true"></a>        ...</span>
<span id="cb16-35"><a href="#cb16-35" aria-hidden="true"></a></span>
<span id="cb16-36"><a href="#cb16-36" aria-hidden="true"></a>    <span class="kw">&lt;/table&gt;</span></span>
<span id="cb16-37"><a href="#cb16-37" aria-hidden="true"></a><span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-38"><a href="#cb16-38" aria-hidden="true"></a><span class="kw">&lt;/body&gt;</span></span></code></pre></div>
<p>This was everything we need to create the HTML UI as shown in the <a href="#writing-a-platform-independent-standalone-calculator-app">screenshot</a> above.</p>
<h3 id="defining-the-application-behaviour">Defining the application behaviour</h3>
<p>Now we come to the interesting part of UI interaction. Threepenny comes with support for functional reactive programming based on the concepts of <a href="https://wiki.haskell.org/Reactive-banana">reactive banana</a>, a cool FRP framework by Heinrich Apfelmus.</p>
<p>So I promise we will not see any old-school event-handling in the following code:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>  <span class="kw">let</span>  </span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>      <span class="co">-- map buttons to Command. (buttonMap :: [(Element, Command)] )</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>      buttonMap <span class="ot">=</span> <span class="fu">zip</span> (<span class="fu">concat</span> buttons) (<span class="fu">concatMap</span> (<span class="fu">map</span> <span class="fu">fst</span>) buttonDefinitions)</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>      <span class="co">-- register mouse click events to all buttons. (clicks :: Event Command )</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>      clicks  <span class="ot">=</span> buttonClicks buttonMap</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>      <span class="co">-- use (processCommand :: Command -&gt; State -&gt; State) to build a function that computes a</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>      <span class="co">-- calculator state transition (commands :: Event (State -&gt; State))</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a>      commands  <span class="ot">=</span> <span class="fu">fmap</span> processCommand clicks</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a>  <span class="co">-- calculate behaviour by accumulating all commands, starting with the initial state    </span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true"></a>  calcBehaviour <span class="ot">&lt;-</span> accumB initialState commands</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true"></a>  <span class="co">-- use Calc.toString to extract the display string from the calculator state</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true"></a>  <span class="kw">let</span> outText  <span class="ot">=</span> <span class="fu">fmap</span> toString calcBehaviour</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true"></a>  <span class="co">-- write outText to the outputBox UI element</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true"></a>  element outputBox <span class="op">#</span> sink value outText</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true"></a><span class="ot">    buttonClicks ::</span> [(<span class="dt">Element</span>, <span class="dt">Command</span>)] <span class="ot">-&gt;</span> <span class="dt">Event</span> <span class="dt">Command</span></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true"></a>    buttonClicks <span class="ot">=</span> <span class="fu">foldr1</span> (UI.unionWith <span class="fu">const</span>) <span class="op">.</span> <span class="fu">map</span> makeClick</span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true"></a>      <span class="kw">where</span></span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true"></a>        makeClick (element, cmd) <span class="ot">=</span> UI.pure cmd <span class="op">&lt;@</span> UI.click element</span></code></pre></div>
<p>We’ll walk through this code from top to bottom. First <code>buttonMap</code> is defined as an associative list mapping all calculator buttons to their respective <code>Command</code>s.</p>
<p>Next we define <code>clicks :: Event Command</code>. Where <code>Event a</code> represents a stream of events as they occur in time.</p>
<p>This <code>clicks</code> event stream is generated by applying <code>buttonClicks</code> to the button map we created in the first step.</p>
<p>So effectively each time a calculator button is clicked we receive the <code>Command</code> represented by the button.</p>
<p>In the next step we use <code>processCommand</code> to generate calculator state transition functions based on each command in the stream.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>commands  <span class="ot">=</span> <span class="fu">fmap</span> processCommand clicks</span></code></pre></div>
<p>We have to use <code>fmap</code> to access the command in the <code>Event</code> container. The resulting type of <code>commands</code> is thus <code>commands :: Event (State -&gt; State)</code>.</p>
<p>Now effectively <code>commands</code> is a stream of <code>(State -&gt; State)</code> calculator state transitions.</p>
<p>In the following step we define a <code>Behaviour</code> based on the <code>commands</code> stream of state transitions. In Threepenny <code>Behavior a</code> represents a value that varies in time. Think of it as</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Behavior</span> a <span class="ot">=</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>The Threepenny function <code>accumB</code> can be used to compute behaviour starting from an initial state and a stream of state transition events:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="ot">accumB ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> a <span class="op">--^</span> the initial value</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>       <span class="ot">-&gt;</span> <span class="dt">Event</span> (a <span class="ot">-&gt;</span> a) <span class="op">--^</span> the stream state transitions</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>       <span class="ot">-&gt;</span> m (<span class="dt">Behavior</span> a) <span class="op">--^</span> the resulting <span class="dt">Behaviour</span> (that is a value varrying <span class="kw">in</span> time )</span></code></pre></div>
<p>So once <code>calcBehaviour &lt;- accumB initialState commands</code> did all the heavy lifting we just have to extract the display text from the state and to render it in the outputBox:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a>  <span class="co">-- use Calc.toString to extract the display string from the calculator state </span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>  <span class="kw">let</span> outText  <span class="ot">=</span> <span class="fu">fmap</span> toString calcBehaviour</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>  <span class="co">-- write outText to the outputBox UI element</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>  element outputBox <span class="op">#</span> sink value outText</span></code></pre></div>
<h2 id="recap-what-weve-got-so-far">Recap: what we’ve got so far</h2>
<p>Until now we have written a calculator as a Threepenny GUI application. We can build and execute it with the following stack commands:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ex">stack</span> init</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="ex">stack</span> install</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a><span class="ex">stack</span> exec ThreepennyElectron 8023</span></code></pre></div>
<p>If you now navigate your WebBrowser to <code>http://127.0.0.1:8023</code> you’ll see the calculator in action.</p>
<p>To ease the usage of this basic Threepenny application when working in GHCi I have provided a short helper function <code>up</code> which will automatically open the Threepenny application in your default web browser:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">-- | launch application in default web browser</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="ot">up ::</span> <span class="dt">IO</span> ()</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>up <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>  <span class="kw">let</span> port <span class="ot">=</span> <span class="dv">8023</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>  launchAppInBrowser port</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>  start port</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a><span class="co">-- | convenience function that opens the 3penny UI in the default web browser</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a><span class="ot">launchAppInBrowser::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">Handle</span>, <span class="dt">Maybe</span> <span class="dt">Handle</span>, <span class="dt">Maybe</span> <span class="dt">Handle</span>, <span class="dt">ProcessHandle</span>)</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a>launchAppInBrowser port <span class="ot">=</span> <span class="kw">case</span> os <span class="kw">of</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true"></a>  <span class="st">&quot;mingw32&quot;</span> <span class="ot">-&gt;</span> createProcess  (shell <span class="op">$</span> <span class="st">&quot;start &quot;</span>    <span class="op">++</span> url)</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true"></a>  <span class="st">&quot;darwin&quot;</span>  <span class="ot">-&gt;</span> createProcess  (shell <span class="op">$</span> <span class="st">&quot;open &quot;</span>     <span class="op">++</span> url)</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true"></a>  _         <span class="ot">-&gt;</span> createProcess  (shell <span class="op">$</span> <span class="st">&quot;xdg-open &quot;</span> <span class="op">++</span> url)</span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true"></a>  <span class="kw">where</span> url <span class="ot">=</span> <span class="st">&quot;http://localhost:&quot;</span> <span class="op">++</span> <span class="fu">show</span> port</span></code></pre></div>
<h2 id="electron-integration">Electron Integration</h2>
<p>So now we are able to execute our calculator as a local web application in our web browser. But our aim was to have a local standalone application that does not rely on a browser.</p>
<p>That’s where we bring in Electron to bundle the Threepenny GUI Haskell backend with a Chromium based fronted.</p>
<h3 id="providing-a-very-straightforward-wrapper-script">Providing a very straightforward wrapper script</h3>
<p><a href="https://electronjs.org/">Electron</a> is a popular JavaScript framework that allows to write cross platform desktop applications based on Chromium. Real world applications like <a href="https://atom.io/">Atom</a>, <a href="https://code.visualstudio.com/">Visual Studio Code</a> or <a href="https://slack.com/intl/de-de/downloads/windows">Slack</a> are good <a href="https://electronjs.org/apps">examples of what can be achieved with it</a>.</p>
<p>As I already mentioned in the introduction, Heinrich Apfelmus already <a href="https://github.com/HeinrichApfelmus/threepenny-gui/blob/master/doc/electron.md">created a tutorial</a> on how to write an electron wrapper around a Threepenny GUI application.</p>
<p>Let’s start with a short look at the <a href="https://github.com/thma/ThreepennyElectron/tree/master/main.js">Javascript code in</a>.</p>
<p>This script detects a free tcp/ip port on localhost and spawns the ThreepennyElectron applications as a separate processes. The free port is handed over to the ThreepennyELectron app as a commandline parameter.</p>
<p>Once the ThreepennyElectron server is accepting connections we can safely open the application window and load the local url as it’s content.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="co">// Relative path to the Threepenny binary.</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a><span class="kw">const</span> relBin <span class="op">=</span> <span class="st">&#39;./build/ThreepennyElectron&#39;</span><span class="op">;</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a><span class="co">// Assign a random port to run on.</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a><span class="fu">freeport</span>((err<span class="op">,</span> port) <span class="kw">=&gt;</span> {</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a>  <span class="cf">if</span> (err) <span class="cf">throw</span> err<span class="op">;</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>  <span class="kw">const</span> url <span class="op">=</span> <span class="vs">`http://localhost:</span><span class="sc">${</span>port<span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a>  <span class="kw">let</span> child <span class="op">=</span> <span class="kw">null</span><span class="op">;</span> <span class="co">// the Threepenny Server process we will spawn</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>  <span class="co">// Keep a global reference of the window object, if we don&#39;t, the window will</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>  <span class="co">// be closed automatically when the JavaScript object is garbage collected.</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a>  <span class="kw">let</span> win<span class="op">;</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>  <span class="co">// Called when Electron has finished initialization and is ready to create</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true"></a>  <span class="co">// browser windows. Some APIs can only be used after this event occurs. We</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true"></a>  <span class="co">// start the child process and wait before loading the web page.</span></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true"></a>  app<span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;ready&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true"></a>    child <span class="op">=</span> <span class="fu">spawn</span>(path<span class="op">.</span><span class="fu">join</span>(<span class="bu">__dirname</span><span class="op">,</span> relBin)<span class="op">,</span> [port])<span class="op">;</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stdout</span><span class="op">.</span><span class="fu">setEncoding</span>(<span class="st">&#39;utf8&#39;</span>)<span class="op">;</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stderr</span><span class="op">.</span><span class="fu">setEncoding</span>(<span class="st">&#39;utf8&#39;</span>)<span class="op">;</span></span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stdout</span><span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;data&#39;</span><span class="op">,</span> <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>)<span class="op">;</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stderr</span><span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;data&#39;</span><span class="op">,</span> <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>)<span class="op">;</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true"></a>    child<span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;close&#39;</span><span class="op">,</span> code <span class="kw">=&gt;</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true"></a>      <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`Threepenny app exited with code </span><span class="sc">${</span>code<span class="sc">}</span><span class="vs">`</span>))<span class="op">;</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true"></a></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true"></a>    <span class="co">// Wait until the Threepenny server is ready for connections.</span></span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true"></a>    <span class="fu">waitOn</span>({ <span class="dt">resources</span><span class="op">:</span> [url]<span class="op">,</span> timeout }<span class="op">,</span> (err_) <span class="kw">=&gt;</span> {</span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true"></a>      <span class="cf">if</span> (err_) <span class="cf">throw</span> err_<span class="op">;</span></span>
<span id="cb24-30"><a href="#cb24-30" aria-hidden="true"></a>      <span class="fu">createWindow</span>()<span class="op">;</span></span>
<span id="cb24-31"><a href="#cb24-31" aria-hidden="true"></a>    })<span class="op">;</span></span>
<span id="cb24-32"><a href="#cb24-32" aria-hidden="true"></a>  })<span class="op">;</span></span>
<span id="cb24-33"><a href="#cb24-33" aria-hidden="true"></a></span>
<span id="cb24-34"><a href="#cb24-34" aria-hidden="true"></a>  <span class="kw">function</span> <span class="fu">createWindow</span>() {</span>
<span id="cb24-35"><a href="#cb24-35" aria-hidden="true"></a>      <span class="co">// Create the browser window.</span></span>
<span id="cb24-36"><a href="#cb24-36" aria-hidden="true"></a>      win <span class="op">=</span> <span class="kw">new</span> <span class="fu">BrowserWindow</span>({</span>
<span id="cb24-37"><a href="#cb24-37" aria-hidden="true"></a>          <span class="dt">width</span><span class="op">:</span> <span class="dv">470</span><span class="op">,</span></span>
<span id="cb24-38"><a href="#cb24-38" aria-hidden="true"></a>          <span class="dt">height</span><span class="op">:</span> <span class="dv">370</span><span class="op">,</span></span>
<span id="cb24-39"><a href="#cb24-39" aria-hidden="true"></a>          <span class="dt">maximizable</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></span>
<span id="cb24-40"><a href="#cb24-40" aria-hidden="true"></a>          <span class="dt">resizable</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></span>
<span id="cb24-41"><a href="#cb24-41" aria-hidden="true"></a>          <span class="dt">icon</span><span class="op">:</span> <span class="st">&#39;calc.ico&#39;</span><span class="op">,</span></span>
<span id="cb24-42"><a href="#cb24-42" aria-hidden="true"></a>          <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;3PennyCalc...&#39;</span></span>
<span id="cb24-43"><a href="#cb24-43" aria-hidden="true"></a>      })<span class="op">;</span></span>
<span id="cb24-44"><a href="#cb24-44" aria-hidden="true"></a></span>
<span id="cb24-45"><a href="#cb24-45" aria-hidden="true"></a>      win<span class="op">.</span><span class="fu">removeMenu</span>()<span class="op">;</span></span>
<span id="cb24-46"><a href="#cb24-46" aria-hidden="true"></a>      <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`Loading URL: </span><span class="sc">${</span>url<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb24-47"><a href="#cb24-47" aria-hidden="true"></a>      win<span class="op">.</span><span class="fu">loadURL</span>(url)<span class="op">;</span></span>
<span id="cb24-48"><a href="#cb24-48" aria-hidden="true"></a></span>
<span id="cb24-49"><a href="#cb24-49" aria-hidden="true"></a>      <span class="co">// Emitted when the window is closed.</span></span>
<span id="cb24-50"><a href="#cb24-50" aria-hidden="true"></a>      win<span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;closed&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb24-51"><a href="#cb24-51" aria-hidden="true"></a>          <span class="co">// Dereference the window object for garbage collection.</span></span>
<span id="cb24-52"><a href="#cb24-52" aria-hidden="true"></a>          win <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb24-53"><a href="#cb24-53" aria-hidden="true"></a>      })<span class="op">;</span></span>
<span id="cb24-54"><a href="#cb24-54" aria-hidden="true"></a>  }</span>
<span id="cb24-55"><a href="#cb24-55" aria-hidden="true"></a></span>
<span id="cb24-56"><a href="#cb24-56" aria-hidden="true"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="npm-handling">NPM handling</h3>
<p>To make things easier to handle I’ve improved the npm integration a bit. Once you have initialized stack with <code>stack init</code> you can build and run the calculator app (including the haskell backend) with just two npm commands:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="ex">npm</span> install</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a><span class="ex">npm</span> start</span></code></pre></div>
<p>The trick was to define a prestart script in <a href="https://github.com/thma/ThreepennyElectron/tree/master/package.json">package.json</a></p>
<div class="sourceCode" id="cb26"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="st">&quot;prestart&quot;</span><span class="op">:</span> <span class="st">&quot;node ./stack-install.js&quot;</span><span class="op">,</span></span></code></pre></div>
<p>This script simply does a <code>stack install --local-bin-path build</code>. This guarantees that the ThreepennyElectron binary is residing under <code>./build/ThreepennyElectron</code> as expected by the <code>main.js</code> script.</p>
<p>With the following npm command you can create application package ready for deployment on your platform:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="ex">npm</span> run pack-app</span></code></pre></div>
<p>You can use the parameters <code>--platform</code> and <code>--arch</code> to create packages for other platforms as well.</p>
]]></summary>
</entry>
<entry>
    <title>Lambda the Ultimate Pattern Factory</title>
    <link href="https://thma.github.io//posts/2018-11-24-lambda-the-ultimate-pattern-factory.html" />
    <id>https://thma.github.io//posts/2018-11-24-lambda-the-ultimate-pattern-factory.html</id>
    <published>2018-11-24T00:00:00Z</published>
    <updated>2018-11-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on November 24, 2018
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p><a href="https://circleci.com/gh/thma/LtuPatternFactory"><img src="https://circleci.com/gh/thma/LtuPatternFactory.svg?style=svg" alt="CircleCI" /></a></p>
<p>My first programming languages were Lisp, Scheme, and ML. When I later started to work in OO languages like C++ and Java I noticed that idioms that are standard vocabulary in functional programming (fp) were not so easy to achieve and required sophisticated structures. Books like <a href="https://en.wikipedia.org/wiki/Design_Patterns">Design Patterns: Elements of Reusable Object-Oriented Software</a> were a great starting point to reason about those structures. One of my earliest findings was that several of the GoF-Patterns had a stark resemblance of structures that are built into in functional languages: for instance the strategy pattern corresponds to higher order functions in fp (more details see <a href="#strategy">below</a>).</p>
<p>Recently, while re-reading through the <a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a> I thought it would be a good exercise to map the structure of software <a href="https://en.wikipedia.org/wiki/Software_design_pattern#Classification_and_list">design-patterns</a> to the concepts found in the Haskell type class library and in functional programming in general.</p>
<p>By searching the web I found some blog entries studying specific patterns, but I did not come across any comprehensive study. As it seemed that nobody did this kind of work yet I found it worthy to spend some time on it and write down all my findings on the subject.</p>
<p>I think this kind of exposition could be helpful if you are:</p>
<ul>
<li>a programmer with an OO background who wants to get a better grip on how to implement complexer designs in functional programming</li>
<li>a functional programmer who wants to get a deeper intuition for type classes.</li>
<li>studying the <a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a> and are looking for an accompanying reading providing example use cases and working code.</li>
</ul>
<blockquote>
<p>This project is work in progress, so please feel free to contact me with any corrections, adjustments, comments, suggestions and additional ideas you might have. Please use the <a href="https://github.com/thma/LtuPatternFactory/issues">Issue Tracker</a> to enter your requests.</p>
</blockquote>
<h2 id="table-of-contents">Table of contents</h2>
<ul>
<li><a href="#lambda-the-ultimate-pattern-factory">Lambda the ultimate pattern factory</a></li>
<li><a href="#the-patternopedia">The Patternopedia</a>
<ul>
<li><a href="#data-transfer-object--functor">Data Transfer Object → Functor</a></li>
<li><a href="#singleton--applicative">Singleton → Applicative</a></li>
<li><a href="#pipeline--monad">Pipeline → Monad</a></li>
<li><a href="#nullobject--maybe-monad">NullObject → Maybe Monad</a></li>
<li><a href="#interpreter--reader-monad">Interpreter → Reader Monad</a> <!--  * [? → MonadFail](#--monadfail)--></li>
<li><a href="#aspect-weaving--monad-transformers">Aspect Weaving → Monad Transformers</a> <!--* [? → MonadFix](#--monadfix) --></li>
<li><a href="#composite--semigroup--monoid">Composite → SemiGroup → Monoid</a> <!--* [? → Alternative, MonadPlus, ArrowPlus](--alternative-monadplus-arrowplus) --></li>
<li><a href="#visitor--foldable">Visitor → Foldable</a></li>
<li><a href="#iterator--traversable">Iterator → Traversable</a> <!-- * [? → Bifunctor](#--bifunctor) --></li>
<li><a href="#the-pattern-behind-the-patterns--category">The Pattern behind the Patterns → Category</a> <!--* [? → Arrow](#--arrow) --></li>
<li><a href="#fluent-api--comonad">Fluent Api → Comonad</a></li>
</ul></li>
<li><a href="#beyond-type-class-patterns">Beyond type class patterns</a>
<ul>
<li><a href="#dependency-injection--parameter-binding-partial-application">Dependency Injection → Parameter Binding, Partial Application</a></li>
<li><a href="#command--functions-as-first-class-citizens">Command → Functions as First Class Citizens</a></li>
<li><a href="#adapter--function-composition">Adapter → Function Composition</a></li>
<li><a href="#template-method--type-class-default-functions">Template Method → type class default functions</a></li>
<li><a href="#creational-patterns">Creational Patterns</a>
<ul>
<li><a href="#abstract-factory--functions-as-data-type-values">Abstract Factory → functions as data type values</a></li>
<li><a href="#builder--record-syntax-smart-constructor">Builder → record syntax, smart constructor</a></li>
</ul></li>
</ul></li>
<li><a href="#functional-programming-patterns">Functional Programming Patterns</a>
<ul>
<li><a href="#higher-order-functions">Higher Order Functions</a></li>
<li><a href="#map-reduce">Map Reduce</a> <!-- * [Continuation Passing](#continuation-passing) --></li>
<li><a href="#lazy-evaluation">Lazy Evaluation</a> <!-- * [Functional Reactive Programming](#functional-reactive-programming) --></li>
<li><a href="#reflection">Reflection</a></li>
</ul></li>
<li><a href="#conclusions">Conclusions</a></li>
<li><a href="#some-interesting-links">Some related links</a></li>
</ul>
<h2 id="the-patternopedia">The Patternopedia</h2>
<p>The <a href="https://wiki.haskell.org/wikiupload/8/85/TMR-Issue13.pdf">Typeclassopedia</a> is a now classic paper that introduces the Haskell type classes by clarifying their algebraic and category-theoretic background. In particular it explains the relationships among those type classes.</p>
<p>In this chapter I’m taking a tour through the Typeclassopedia from a design pattern perspective. For each of the Typeclassopedia type classes I try to explain how it corresponds to structures applied in software design patterns.</p>
<p>As a reference map I have included the following chart that depicts the Relationships between type classes covered in the Typeclassopedia:</p>
<figure>
<img src="https://wiki.haskell.org/wikiupload/c/c7/Typeclassopedia-diagram.svg" alt="" /><figcaption>The Haskell type classes covered by the Typeclassopedia</figcaption>
</figure>
<ul>
<li>Solid arrows point from the general to the specific; that is, if there is an arrow from Foo to Bar it means that every Bar is (or should be, or can be made into) a Foo.</li>
<li>Dotted lines indicate some other sort of relationship.</li>
<li>Monad and ArrowApply are equivalent.</li>
<li>Apply and Comonad are greyed out since they are not actually (yet?) in the standard Haskell libraries ∗.</li>
</ul>
<h3 id="data-transfer-object-functor">Data Transfer Object → Functor</h3>
<blockquote>
<p>In the field of programming a data transfer object (DTO) is an object that carries data between processes. The motivation for its use is that communication between processes is usually done resorting to remote interfaces (e.g., web services), where each call is an expensive operation. Because the majority of the cost of each call is related to the round-trip time between the client and the server, one way of reducing the number of calls is to use an object (the DTO) that aggregates the data that would have been transferred by the several calls, but that is served by one call only. (quoted from <a href="https://en.wikipedia.org/wiki/Data_transfer_object">Wikipedia</a></p>
</blockquote>
<p>Data Transfer Object is a pattern from Martin Fowler’s <a href="https://martinfowler.com/eaaCatalog/dataTransferObject.html">Patterns of Enterprise Application Architecture</a>. It is typically used in multi-layered applications where data is transferred between backends and frontends.</p>
<p>The aggregation of data usually also involves a denormalization of data structures. As an example, please refer to the following diagram where two entities from the backend (<code>Album</code> and <code>Artist</code>) are assembled to a compound denormalized DTO <code>AlbumDTO</code>:</p>
<figure>
<img src="https://martinfowler.com/eaaCatalog/dtoSketch.gif" alt="" /><figcaption>DTO</figcaption>
</figure>
<p>Of course, there is also an inverse mapping from <code>AlbumDTO</code> to <code>Album</code> which is not shown in this diagram.</p>
<p>In Haskell <code>Album</code>, <code>Artist</code> and <code>AlbumDTO</code> can be represented as data types with record notation:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Album</span> <span class="ot">=</span> <span class="dt">Album</span> {</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">    title       ::</span> <span class="dt">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  ,<span class="ot"> publishDate ::</span> <span class="dt">Int</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>  ,<span class="ot"> labelName   ::</span> <span class="dt">String</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  ,<span class="ot"> artist      ::</span> <span class="dt">Artist</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Artist</span> <span class="ot">=</span> <span class="dt">Artist</span> {</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="ot">    publicName ::</span> <span class="dt">String</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>  ,<span class="ot"> realName   ::</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">AlbumDTO</span> <span class="ot">=</span> <span class="dt">AlbumDTO</span> {</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a><span class="ot">    albumTitle  ::</span> <span class="dt">String</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>  ,<span class="ot"> published   ::</span> <span class="dt">Int</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a>  ,<span class="ot"> label       ::</span> <span class="dt">String</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true"></a>  ,<span class="ot"> artistName  ::</span> <span class="dt">String</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span></code></pre></div>
<p>The transfer from an <code>Album</code> to an <code>AlbumDTO</code> and vice versa can be achieved by two simple functions, that perfom the intended field wise mappings:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">toAlbumDTO ::</span> <span class="dt">Album</span> <span class="ot">-&gt;</span> <span class="dt">AlbumDTO</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>toAlbumDTO <span class="dt">Album</span> {title <span class="ot">=</span> t, publishDate <span class="ot">=</span> d, labelName <span class="ot">=</span> l, artist <span class="ot">=</span> a} <span class="ot">=</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>  <span class="dt">AlbumDTO</span> {albumTitle <span class="ot">=</span> t, published <span class="ot">=</span> d, label <span class="ot">=</span> l, artistName <span class="ot">=</span> (publicName a)}</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="ot">toAlbum ::</span> <span class="dt">AlbumDTO</span> <span class="ot">-&gt;</span> <span class="dt">Album</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>toAlbum <span class="dt">AlbumDTO</span> {albumTitle <span class="ot">=</span> t, published <span class="ot">=</span> d, label <span class="ot">=</span> l, artistName <span class="ot">=</span> n} <span class="ot">=</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  <span class="dt">Album</span> {title <span class="ot">=</span> t, publishDate <span class="ot">=</span> d, labelName <span class="ot">=</span> l, artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> n, realName <span class="ot">=</span> <span class="dt">Nothing</span>}}</span></code></pre></div>
<p>In this few lines we have covered the basic idea of the DTO pattern.</p>
<p>Now, let’s consider the typical situation that you don’t have to transfer only a <em>single</em> <code>Album</code> instance but a whole list of <code>Album</code> instances, e.g.:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">albums ::</span> [<span class="dt">Album</span>]</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>albums <span class="ot">=</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    [</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>      <span class="dt">Album</span> {title <span class="ot">=</span> <span class="st">&quot;Microgravity&quot;</span>,</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>             publishDate <span class="ot">=</span> <span class="dv">1991</span>,</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>             labelName <span class="ot">=</span> <span class="st">&quot;Origo Sound&quot;</span>,</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>             artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> <span class="st">&quot;Biosphere&quot;</span>, realName <span class="ot">=</span> <span class="dt">Just</span> <span class="st">&quot;Geir Jenssen&quot;</span>}}</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    , <span class="dt">Album</span> {title <span class="ot">=</span> <span class="st">&quot;Apollo - Atmospheres &amp; Soundtracks&quot;</span>,</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>             publishDate <span class="ot">=</span> <span class="dv">1983</span>,</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>             labelName <span class="ot">=</span> <span class="st">&quot;Editions EG&quot;</span>,</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>             artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> <span class="st">&quot;Brian Eno&quot;</span>, realName <span class="ot">=</span> <span class="dt">Just</span> <span class="st">&quot;Brian Peter George St. John le Baptiste de la Salle Eno&quot;</span>}}</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    ]</span></code></pre></div>
<p>In this case we have to apply the <code>toAlbumDTO</code> function to all elements of the list. In Haskell this <em>higher order</em> operation is called <code>map</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="fu">map</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="fu">map</span> _f []    <span class="ot">=</span> []</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="fu">map</span> f (x<span class="op">:</span>xs) <span class="ot">=</span> f x <span class="op">:</span> <span class="fu">map</span> f xs</span></code></pre></div>
<p><code>map</code> takes a function <code>f :: (a -&gt; b)</code> (a function from type <code>a</code> to type <code>b</code>) and an <code>[a]</code> list and returns a <code>[b]</code> list. The <code>b</code> elements are produced by applying the function <code>f</code> to each element of the input list. Applying <code>toAlbumDTO</code> to a list of albums can thus be done in the Haskell REPL GHCi as follows:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">map</span> toAlbumDTO albums</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>[<span class="dt">AlbumDTO</span> {albumTitle <span class="ot">=</span> <span class="st">&quot;Microgravity&quot;</span>, published <span class="ot">=</span> <span class="dv">1991</span>, label <span class="ot">=</span> <span class="st">&quot;Origo Sound&quot;</span>, artistName <span class="ot">=</span> <span class="st">&quot;Biosphere&quot;</span>},</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a> <span class="dt">AlbumDTO</span> {albumTitle <span class="ot">=</span> <span class="st">&quot;Apollo - Atmospheres &amp; Soundtracks&quot;</span>, published <span class="ot">=</span> <span class="dv">1983</span>, label <span class="ot">=</span> <span class="st">&quot;Editions EG&quot;</span>, artistName <span class="ot">=</span> <span class="st">&quot;Brian Eno&quot;</span>}]</span></code></pre></div>
<p>This mapping of functions over lists is a basic technique known in many functional languages. In Haskell further generalises this technique with the concept of the <code>Functor</code> type class.</p>
<blockquote>
<p>The <code>Functor</code> class is the most basic and ubiquitous type class in the Haskell libraries. A simple intuition is that a <code>Functor</code> represents a “container” of some sort, along with the ability to apply a function uniformly to every element in the container. For example, a list is a container of elements, and we can apply a function to every element of a list, using <code>map</code>. As another example, a binary tree is also a container of elements, and it’s not hard to come up with a way to recursively apply a function to every element in a tree.</p>
<p>Another intuition is that a Functor represents some sort of “computational context”. This intuition is generally more useful, but is more difficult to explain, precisely because it is so general.</p>
<p>Quoted from <a href="https://wiki.haskell.org/Typeclassopedia#Functor">Typeclassopedia</a></p>
</blockquote>
<p>Basically, all instances of the <code>Functor</code> type class must provide a function <code>fmap</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span>  <span class="dt">Functor</span> f  <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">    fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>For Lists the implementation is simply the <code>map</code> function that we already have seen above:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> [] <span class="kw">where</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>    <span class="fu">fmap</span> <span class="ot">=</span> <span class="fu">map</span></span></code></pre></div>
<p>Functors have interesting properties, they fulfill the two so called <em>functor laws</em>, which are part of the definition of a mathematical functor:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">fmap</span> <span class="fu">id</span> <span class="ot">=</span> <span class="fu">id</span>                        <span class="co">-- (1)</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="fu">fmap</span> (g <span class="op">.</span> h) <span class="ot">=</span> (<span class="fu">fmap</span> g) <span class="op">.</span> (<span class="fu">fmap</span> h)  <span class="co">-- (2)</span></span></code></pre></div>
<p>The first law <code>(1)</code> states that mapping the identity function over every item in a container has no effect.</p>
<p>The second <code>(2)</code> says that mapping a composition of two functions over every item in a container is the same as first mapping one function, and then mapping the other.</p>
<p>These laws are very useful when we consider composing complex mappings from simpler operations.</p>
<p>Say we want to extend our DTO mapping functionality by also providing some kind of marshalling. For a single album instance, we can use function composition <code>(f . g) x == f (g x)</code>, which is defined in Haskell as:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>(<span class="op">.</span>) f g x <span class="ot">=</span> f (g x)</span></code></pre></div>
<p>In the following GHCi session we are using <code>(.)</code> to first convert an <code>Album</code> to its <code>AlbumDTO</code> representation and then turn that into a <code>String</code> by using the <code>show</code> function:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> album1 <span class="ot">=</span> albums <span class="op">!!</span> <span class="dv">0</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">print</span> album1</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="dt">Album</span> {title <span class="ot">=</span> <span class="st">&quot;Microgravity&quot;</span>, publishDate <span class="ot">=</span> <span class="dv">1991</span>, labelName <span class="ot">=</span> <span class="st">&quot;Origo Sound&quot;</span>, artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> <span class="st">&quot;Biosphere&quot;</span>, realName <span class="ot">=</span> <span class="dt">Just</span> <span class="st">&quot;Geir Jenssen&quot;</span>}}</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> marshalled <span class="ot">=</span> (<span class="fu">show</span> <span class="op">.</span> toAlbumDTO) album1</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t marshalled</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true"></a><span class="ot">marshalled ::</span> <span class="dt">String</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">print</span> marshalled</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true"></a><span class="st">&quot;AlbumDTO {albumTitle = \&quot;Microgravity\&quot;, published = 1991, label = \&quot;Origo Sound\&quot;, artistName = \&quot;Biosphere\&quot;}&quot;</span></span></code></pre></div>
<p>As we can rely on the functor law <code>fmap (g . h) = (fmap g) . (fmap h)</code> we can use fmap to use the same composed function on any functor, for example our list of albums:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">fmap</span> (<span class="fu">show</span> <span class="op">.</span> toAlbumDTO) albums</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>[<span class="st">&quot;AlbumDTO {albumTitle = \&quot;Microgravity\&quot;, published = 1991, label = \&quot;Origo Sound\&quot;, artistName = \&quot;Biosphere\&quot;}&quot;</span>,</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a> <span class="st">&quot;AlbumDTO {albumTitle = \&quot;Apollo - Atmospheres &amp; Soundtracks\&quot;, published = 1983, label = \&quot;Editions EG\&quot;, artistName = \&quot;Brian Eno\&quot;}&quot;</span>]</span></code></pre></div>
<p>We can build more complex mappings by chaining multiple functions, to produce for example a gzipped byte string output:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> gzipped <span class="ot">=</span> (compress <span class="op">.</span> <span class="fu">pack</span> <span class="op">.</span> <span class="fu">show</span> <span class="op">.</span> toAlbumDTO) album1</span></code></pre></div>
<p>As the sequence of operation must be read from right to left for the <code>(.)</code> operator this becomes quite unintuitive for longer sequences. Thus, Haskellers often use the flipped version of <code>(.)</code>, <code>(&gt;&gt;&gt;)</code> which is defined as:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>f <span class="op">&gt;&gt;&gt;</span> g <span class="ot">=</span> g <span class="op">.</span> f</span></code></pre></div>
<p>Using <code>(&gt;&gt;&gt;)</code> the intent of our composition chain becomes much clearer (at least when you are trained to read from left to right):</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> gzipped <span class="ot">=</span> (toAlbumDTO <span class="op">&gt;&gt;&gt;</span> <span class="fu">show</span> <span class="op">&gt;&gt;&gt;</span> <span class="fu">pack</span> <span class="op">&gt;&gt;&gt;</span> compress) album1</span></code></pre></div>
<p>Unmarshalling can be defined using the inverse operations:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> unzipped <span class="ot">=</span> (decompress <span class="op">&gt;&gt;&gt;</span> unpack <span class="op">&gt;&gt;&gt;</span> <span class="fu">read</span> <span class="op">&gt;&gt;&gt;</span> toAlbum) gzipped</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t unzipped</span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a><span class="ot">unzipped ::</span> <span class="dt">Album</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">print</span> unzipped</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a><span class="dt">Album</span> {title <span class="ot">=</span> <span class="st">&quot;Microgravity&quot;</span>, publishDate <span class="ot">=</span> <span class="dv">1991</span>, labelName <span class="ot">=</span> <span class="st">&quot;Origo Sound&quot;</span>, artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> <span class="st">&quot;Biosphere&quot;</span>, realName <span class="ot">=</span> <span class="dt">Nothing</span>}}</span></code></pre></div>
<p>Of course, we can use <code>fmap</code> to apply such composed mapping function to any container type instantiating the <code>Functor</code> type class:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> marshalled   <span class="ot">=</span> <span class="fu">fmap</span> (toAlbumDTO <span class="op">&gt;&gt;&gt;</span> <span class="fu">show</span> <span class="op">&gt;&gt;&gt;</span> <span class="fu">pack</span> <span class="op">&gt;&gt;&gt;</span> compress) albums</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> unmarshalled <span class="ot">=</span> <span class="fu">fmap</span> (decompress <span class="op">&gt;&gt;&gt;</span> unpack <span class="op">&gt;&gt;&gt;</span> <span class="fu">read</span> <span class="op">&gt;&gt;&gt;</span> toAlbum) marshalled</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">print</span> unmarshalled</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>[<span class="dt">Album</span> {title <span class="ot">=</span> <span class="st">&quot;Microgravity&quot;</span>, publishDate <span class="ot">=</span> <span class="dv">1991</span>, labelName <span class="ot">=</span> <span class="st">&quot;Origo Sound&quot;</span>, artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> <span class="st">&quot;Biosphere&quot;</span>, realName <span class="ot">=</span> <span class="dt">Nothing</span>}},</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a> <span class="dt">Album</span> {title <span class="ot">=</span> <span class="st">&quot;Apollo - Atmospheres &amp; Soundtracks&quot;</span>, publishDate <span class="ot">=</span> <span class="dv">1983</span>, labelName <span class="ot">=</span> <span class="st">&quot;Editions EG&quot;</span>, artist <span class="ot">=</span> <span class="dt">Artist</span> {publicName <span class="ot">=</span> <span class="st">&quot;Brian Eno&quot;</span>, realName <span class="ot">=</span> <span class="dt">Nothing</span>}}]</span></code></pre></div>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/DataTransferObject.hs">Sourcecode for this section</a></p>
<h3 id="singleton-applicative">Singleton → Applicative</h3>
<blockquote>
<p>“The singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.” (quoted from <a href="https://en.wikipedia.org/wiki/Singleton_pattern">Wikipedia</a></p>
</blockquote>
<p>The singleton pattern ensures that multiple requests to a given object always return one and the same singleton instance. In functional programming this semantics can be achieved by <code>let</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">let</span> singleton <span class="ot">=</span> someExpensiveComputation</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="kw">in</span>  mainComputation</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="co">--or in lambda notation:</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>(\singleton <span class="ot">-&gt;</span> mainComputation) someExpensiveComputation</span></code></pre></div>
<p>Via the <code>let</code>-Binding we can thread the singleton through arbitrary code in the <code>in</code> block. All occurences of <code>singleton</code> in the <code>mainComputation</code>will point to the same instance.</p>
<p>Type classes provide several tools to make this kind of threading more convenient or even to avoid explicit threading of instances.</p>
<h4 id="using-applicative-functor-for-threading-of-singletons">Using Applicative Functor for threading of singletons</h4>
<p>The following code defines a simple expression evaluator:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Exp</span> e <span class="ot">=</span> <span class="dt">Var</span> <span class="dt">String</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Val</span> e</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Add</span> (<span class="dt">Exp</span> e) (<span class="dt">Exp</span> e)</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Mul</span> (<span class="dt">Exp</span> e) (<span class="dt">Exp</span> e)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a><span class="co">-- the environment is a list of tuples mapping variable names to values of type e</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Env</span> e <span class="ot">=</span> [(<span class="dt">String</span>, e)]</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a><span class="co">-- a simple evaluator reducing expression to numbers</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Num</span> e <span class="ot">=&gt;</span> <span class="dt">Exp</span> e <span class="ot">-&gt;</span> <span class="dt">Env</span> e <span class="ot">-&gt;</span> e</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)   env <span class="ot">=</span> fetch x env</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)   env <span class="ot">=</span> i</span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true"></a>eval (<span class="dt">Add</span> p q) env <span class="ot">=</span> eval p env <span class="op">+</span> eval q env  </span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true"></a>eval (<span class="dt">Mul</span> p q) env <span class="ot">=</span> eval p env <span class="op">*</span> eval q env</span></code></pre></div>
<p><code>eval</code> is a classic evaluator function that recursively evaluates sub-expression before applying <code>+</code> or <code>*</code>. Note how the explicit <code>env</code>parameter is threaded through the recursive eval calls. This is needed to have the environment avalailable for variable lookup at any recursive call depth.</p>
<p>If we now bind <code>env</code> to a value as in the following snippet it is used as an immutable singleton within the recursive evaluation of <code>eval exp env</code>.</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>  <span class="kw">let</span> <span class="fu">exp</span> <span class="ot">=</span> <span class="dt">Mul</span> (<span class="dt">Add</span> (<span class="dt">Val</span> <span class="dv">3</span>) (<span class="dt">Val</span> <span class="dv">1</span>))</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>                (<span class="dt">Mul</span> (<span class="dt">Val</span> <span class="dv">2</span>) (<span class="dt">Var</span> <span class="st">&quot;pi&quot;</span>))</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>      env <span class="ot">=</span> [(<span class="st">&quot;pi&quot;</span>, <span class="fu">pi</span>)]</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> eval <span class="fu">exp</span> env</span></code></pre></div>
<p>Experienced Haskellers will notice the <a href="https://wiki.haskell.org/Eta_conversion">“eta-reduction smell”</a> in <code>eval (Var x) env = fetch x env</code> which hints at the possibilty to remove <code>env</code> as an explicit parameter. We can not do this right away as the other equations for <code>eval</code> do not allow eta-reduction. In order to do so we have to apply the combinators of the <code>Applicative Functor</code>:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> <span class="dt">Applicative</span> f <span class="kw">where</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="ot">    pure  ::</span> a <span class="ot">-&gt;</span> f a</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a><span class="ot">    (&lt;*&gt;) ::</span> f (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Applicative</span> ((<span class="ot">-&gt;</span>) a) <span class="kw">where</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a>    <span class="fu">pure</span>        <span class="ot">=</span> <span class="fu">const</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true"></a>    (<span class="op">&lt;*&gt;</span>) f g x <span class="ot">=</span> f x (g x)</span></code></pre></div>
<p>This <code>Applicative</code> allows us to rewrite <code>eval</code> as follows:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Num</span> e <span class="ot">=&gt;</span> <span class="dt">Exp</span> e <span class="ot">-&gt;</span> <span class="dt">Env</span> e <span class="ot">-&gt;</span> e</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)   <span class="ot">=</span> fetch x</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)   <span class="ot">=</span> <span class="fu">pure</span> i</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>eval (<span class="dt">Add</span> p q) <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">+</span>) <span class="op">&lt;*&gt;</span> eval p  <span class="op">&lt;*&gt;</span> eval q  </span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>eval (<span class="dt">Mul</span> p q) <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">*</span>) <span class="op">&lt;*&gt;</span> eval p  <span class="op">&lt;*&gt;</span> eval q</span></code></pre></div>
<p>Any explicit handling of the variable <code>env</code> is now removed. (I took this example from the classic paper <a href="http://www.soi.city.ac.uk/~ross/papers/Applicative.pdf">Applicative programming with effects</a> which details how <code>pure</code> and <code>&lt;*&gt;</code> correspond to the combinatory logic combinators <code>K</code> and <code>S</code>.)</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Singleton.hs">Sourcecode for this section</a></p>
<h3 id="pipeline-monad">Pipeline → Monad</h3>
<blockquote>
<p>In software engineering, a pipeline consists of a chain of processing elements (processes, threads, coroutines, functions, etc.), arranged so that the output of each element is the input of the next; the name is by analogy to a physical pipeline. (Quoted from: <a href="https://en.wikipedia.org/wiki/Pipeline_(software)">Wikipedia</a></p>
</blockquote>
<p>The concept of pipes and filters in Unix shell scripts is a typical example of the pipeline architecture pattern.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a>$ <span class="bu">echo</span> <span class="st">&quot;hello world&quot;</span> <span class="kw">|</span> <span class="fu">wc</span> -w <span class="kw">|</span> <span class="fu">xargs</span> printf <span class="st">&quot;%d*3\n&quot;</span> <span class="kw">|</span> <span class="fu">bc</span> -l</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="ex">6</span></span></code></pre></div>
<p>This works exactly as stated in the wikipedia definition of the pattern: the output of <code>echo "hello world"</code> is used as input for the next command <code>wc -w</code>. The ouptput of this command is then piped as input into <code>xargs printf "%d*3\n"</code> and so on. On the first glance this might look like ordinary function composition. We could for instance come up with the following approximation in Haskell:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a>((<span class="dv">3</span> <span class="op">*</span>) <span class="op">.</span> <span class="fu">length</span> <span class="op">.</span> <span class="fu">words</span>) <span class="st">&quot;hello world&quot;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="dv">6</span></span></code></pre></div>
<p>But with this design we missed an important feature of the chain of shell commands: The commands do not work on elementary types like Strings or numbers but on input and output streams that are used to propagate the actual elementary data around. So we can’t just send a String into the <code>wc</code> command as in <code>"hello world" | wc -w</code>. Instead we have to use <code>echo</code> to place the string into a stream that we can then use as input to the <code>wc</code> command:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="op">&gt;</span> <span class="bu">echo</span> <span class="st">&quot;hello world&quot;</span> <span class="kw">|</span> <span class="fu">wc</span> -w</span></code></pre></div>
<p>So we might say that <code>echo</code> <em>injects</em> the String <code>"hello world"</code> into the stream context. We can capture this behaviour in a functional program like this:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="co">-- The Stream type is a wrapper around an arbitrary payload type &#39;a&#39;</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Stream</span> a <span class="ot">=</span> <span class="dt">Stream</span> a <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a><span class="co">-- echo injects an item of type &#39;a&#39; into the Stream context</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a><span class="ot">echo ::</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> a</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>echo <span class="ot">=</span> <span class="dt">Stream</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true"></a></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true"></a><span class="co">-- the &#39;andThen&#39; operator used for chaining commands</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">7</span> <span class="op">|&gt;</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true"></a><span class="ot">(|&gt;) ::</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Stream</span> b) <span class="ot">-&gt;</span> <span class="dt">Stream</span> b</span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true"></a><span class="dt">Stream</span> x <span class="op">|&gt;</span> f <span class="ot">=</span> f x</span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true"></a></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true"></a></span>
<span id="cb25-14"><a href="#cb25-14" aria-hidden="true"></a><span class="co">-- echo and |&gt; are used to create the actual pipeline</span></span>
<span id="cb25-15"><a href="#cb25-15" aria-hidden="true"></a><span class="ot">pipeline ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Stream</span> <span class="dt">Int</span></span>
<span id="cb25-16"><a href="#cb25-16" aria-hidden="true"></a>pipeline str <span class="ot">=</span></span>
<span id="cb25-17"><a href="#cb25-17" aria-hidden="true"></a>  echo str <span class="op">|&gt;</span> echo <span class="op">.</span> <span class="fu">length</span> <span class="op">.</span> <span class="fu">words</span> <span class="op">|&gt;</span> echo <span class="op">.</span> (<span class="dv">3</span> <span class="op">*</span>)</span>
<span id="cb25-18"><a href="#cb25-18" aria-hidden="true"></a><span class="co">-- now executing the program in ghci repl:</span></span>
<span id="cb25-19"><a href="#cb25-19" aria-hidden="true"></a>ghci<span class="op">&gt;</span> pipeline <span class="st">&quot;hello world&quot;</span></span>
<span id="cb25-20"><a href="#cb25-20" aria-hidden="true"></a><span class="dt">Stream</span> <span class="dv">6</span>  </span></code></pre></div>
<p>The <code>echo</code> function injects any input into the <code>Stream</code> context:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> echo <span class="st">&quot;hello world&quot;</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a><span class="dt">Stream</span> <span class="st">&quot;hello world&quot;</span></span></code></pre></div>
<p>The <code>|&gt;</code> (pronounced as “andThen”) does the function chaining:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> echo <span class="st">&quot;hello world&quot;</span> <span class="op">|&gt;</span> echo <span class="op">.</span> <span class="fu">words</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a><span class="dt">Stream</span> [<span class="st">&quot;hello&quot;</span>,<span class="st">&quot;world&quot;</span>]</span></code></pre></div>
<p>The result of <code>|&gt;</code> is of type <code>Stream b</code> that’s why we cannot just write <code>echo "hello world" |&gt; words</code>. We have to use echo to create a <code>Stream</code> output that can be digested by a subsequent <code>|&gt;</code>.</p>
<p>The interplay of a Context type <code>Stream a</code> and the functions <code>echo</code> and <code>|&gt;</code> is a well known pattern from functional languages: it’s the legendary <em>Monad</em>. As the <a href="https://en.wikipedia.org/wiki/Pipeline_(software)">Wikipedia article on the pipeline pattern</a> states:</p>
<blockquote>
<p>Pipes and filters can be viewed as a form of functional programming, using byte streams as data objects; more specifically, they can be seen as a particular form of monad for I/O.</p>
</blockquote>
<p>There is an interesting paper available elaborating on the monadic nature of Unix pipes: <a href="http://okmij.org/ftp/Computation/monadic-shell.html">Monadic Shell</a>.</p>
<p>Here is the definition of the Monad type class in Haskell:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Applicative</span> m <span class="ot">=&gt;</span> <span class="dt">Monad</span> m <span class="kw">where</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true"></a>    <span class="co">-- | Sequentially compose two actions, passing any value produced</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true"></a>    <span class="co">-- by the first as an argument to the second.</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true"></a><span class="ot">    (&gt;&gt;=)  ::</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true"></a></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true"></a>    <span class="co">-- | Inject a value into the monadic type.</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true"></a><span class="ot">    return ::</span> a <span class="ot">-&gt;</span> m a</span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true"></a>    <span class="fu">return</span> <span class="ot">=</span> <span class="fu">pure</span></span></code></pre></div>
<p>By looking at the types of <code>&gt;&gt;=</code> and <code>return</code> it’s easy to see the direct correspondence to <code>|&gt;</code> and <code>echo</code> in the pipeline example above:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="ot">    (|&gt;)   ::</span> <span class="dt">Stream</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Stream</span> b) <span class="ot">-&gt;</span> <span class="dt">Stream</span> b</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a><span class="ot">    echo   ::</span> a <span class="ot">-&gt;</span> <span class="dt">Stream</span> a</span></code></pre></div>
<p>Mhh, this is nice, but still looks a lot like ordinary composition of functions, just with the addition of a wrapper. In this simplified example that’s true, because we have designed the <code>|&gt;</code> operator to simply unwrap a value from the Stream and bind it to the formal parameter of the subsequent function:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true"></a><span class="dt">Stream</span> x <span class="op">|&gt;</span> f <span class="ot">=</span> f x</span></code></pre></div>
<p>But we are free to implement the <code>andThen</code> operator in any way that we seem fit as long we maintain the type signature and the <a href="https://en.wikipedia.org/wiki/Monad_%28functional_programming%29#Monad_laws">monad laws</a>. So we could for instance change the semantics of <code>&gt;&gt;=</code> to keep a log along the execution pipeline:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="co">-- The DeriveFunctor Language Pragma provides automatic derivation of Functor instances</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveFunctor #-}</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true"></a></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true"></a><span class="co">-- a Log is just a list of Strings</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Log</span> <span class="ot">=</span> [<span class="dt">String</span>]</span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true"></a></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true"></a><span class="co">-- the Stream type is extended by a Log that keeps track of any logged messages</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">LoggerStream</span> a <span class="ot">=</span> <span class="dt">LoggerStream</span> (a, <span class="dt">Log</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Functor</span>)</span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true"></a></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Applicative</span> <span class="dt">LoggerStream</span> <span class="kw">where</span></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true"></a>  <span class="fu">pure</span> <span class="ot">=</span> <span class="fu">return</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true"></a>  <span class="dt">LoggerStream</span> (f, _) <span class="op">&lt;*&gt;</span> r <span class="ot">=</span> <span class="fu">fmap</span> f r  </span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true"></a></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true"></a><span class="co">-- our definition of the Logging Stream Monad:</span></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monad</span> <span class="dt">LoggerStream</span> <span class="kw">where</span></span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true"></a>  <span class="co">-- returns a Stream wrapping a tuple of the actual payload and an empty Log</span></span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true"></a>  <span class="fu">return</span> a <span class="ot">=</span> <span class="dt">LoggerStream</span> (a, [])</span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true"></a></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true"></a>  <span class="co">-- we define (&gt;&gt;=) to return a tuple (composed functions, concatenated logs)</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true"></a>  m1 <span class="op">&gt;&gt;=</span> m2  <span class="ot">=</span> <span class="kw">let</span> <span class="dt">LoggerStream</span>(f1, l1) <span class="ot">=</span> m1</span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true"></a>                   <span class="dt">LoggerStream</span>(f2, l2) <span class="ot">=</span> m2 f1</span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true"></a>               <span class="kw">in</span> <span class="dt">LoggerStream</span>(f2, l1 <span class="op">++</span> l2)</span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true"></a></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true"></a><span class="co">-- compute length of a String and provide a log message</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true"></a><span class="ot">logLength ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">LoggerStream</span> <span class="dt">Int</span></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true"></a>logLength str <span class="ot">=</span> <span class="kw">let</span> l <span class="ot">=</span> <span class="fu">length</span>(<span class="fu">words</span> str)</span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true"></a>                <span class="kw">in</span> <span class="dt">LoggerStream</span> (l, [<span class="st">&quot;length(&quot;</span> <span class="op">++</span> str <span class="op">++</span> <span class="st">&quot;) = &quot;</span> <span class="op">++</span> <span class="fu">show</span> l])</span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true"></a></span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true"></a><span class="co">-- multiply x with 3 and provide a log message</span></span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true"></a><span class="ot">logMultiply ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">LoggerStream</span> <span class="dt">Int</span></span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true"></a>logMultiply x <span class="ot">=</span> <span class="kw">let</span> z <span class="ot">=</span> x <span class="op">*</span> <span class="dv">3</span></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true"></a>                <span class="kw">in</span> <span class="dt">LoggerStream</span> (z, [<span class="st">&quot;multiply(&quot;</span> <span class="op">++</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot;, 3&quot;</span> <span class="op">++</span><span class="st">&quot;) = &quot;</span> <span class="op">++</span> <span class="fu">show</span> z])</span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true"></a></span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true"></a><span class="co">-- the logging version of the pipeline</span></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true"></a><span class="ot">logPipeline ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">LoggerStream</span> <span class="dt">Int</span></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true"></a>logPipeline str <span class="ot">=</span></span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true"></a>  <span class="fu">return</span> str <span class="op">&gt;&gt;=</span> logLength <span class="op">&gt;&gt;=</span> logMultiply</span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true"></a></span>
<span id="cb31-39"><a href="#cb31-39" aria-hidden="true"></a><span class="co">-- and then in Ghci:</span></span>
<span id="cb31-40"><a href="#cb31-40" aria-hidden="true"></a><span class="op">&gt;</span> logPipeline <span class="st">&quot;hello logging world&quot;</span></span>
<span id="cb31-41"><a href="#cb31-41" aria-hidden="true"></a><span class="dt">LoggerStream</span> (<span class="dv">9</span>,[<span class="st">&quot;length(hello logging world) = 3&quot;</span>,<span class="st">&quot;multiply(3, 3) = 9&quot;</span>])</span></code></pre></div>
<p>What’s noteworthy here is that Monads allow to make the mechanism of chaining functions <em>explicit</em>. We can define what <code>andThen</code> should mean in our pipeline by choosing a different Monad implementation. So in a sense Monads could be called <a href="http://book.realworldhaskell.org/read/monads.html#id642960">programmable semicolons</a></p>
<p>To make this statement a bit clearer we will have a closer look at the internal workings of the <code>Maybe</code> Monad in the next section.</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Pipeline.hs">Sourcecode for this section</a></p>
<h3 id="nullobject-maybe-monad">NullObject → Maybe Monad</h3>
<blockquote>
<p>[…] a null object is an object with no referenced value or with defined neutral (“null”) behavior. The null object design pattern describes the uses of such objects and their behavior (or lack thereof). <a href="https://en.wikipedia.org/wiki/Null_object_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<p>In functional programming the null object pattern is typically formalized with option types: &gt; […] an option type or maybe type is a polymorphic type that represents encapsulation of an optional value; e.g., it is used as the return type of functions which may or may not return a meaningful value when they are applied. It consists of a constructor which either is empty (named None or <code>Nothing</code>), or which encapsulates the original data type <code>A</code> (written <code>Just A</code> or Some A). &gt; <a href="https://en.wikipedia.org/wiki/Option_type">Quoted from Wikipedia</a></p>
<p>(See also: <a href="http://blog.ploeh.dk/2018/04/23/null-object-as-identity/">Null Object as Identity</a>)</p>
<p>In Haskell the most simple option type is <code>Maybe</code>. Let’s directly dive into an example. We define a reverse index, mapping songs to album titles. If we now lookup up a song title we may either be lucky and find the respective album or not so lucky when there is no album matching our song:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Data.Map</span> (<span class="dt">Map</span>, fromList)</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map</span> <span class="kw">as</span> <span class="dt">Map</span> (lookup) <span class="co">-- avoid clash with Prelude.lookup</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true"></a></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true"></a><span class="co">-- type aliases for Songs and Albums</span></span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Song</span>   <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Album</span>  <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true"></a></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true"></a><span class="co">-- the simplified reverse song index</span></span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true"></a><span class="ot">songMap ::</span> <span class="dt">Map</span> <span class="dt">Song</span> <span class="dt">Album</span></span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true"></a>songMap <span class="ot">=</span> fromList</span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true"></a>    [(<span class="st">&quot;Baby Satellite&quot;</span>,<span class="st">&quot;Microgravity&quot;</span>)</span>
<span id="cb32-12"><a href="#cb32-12" aria-hidden="true"></a>    ,(<span class="st">&quot;An Ending&quot;</span>, <span class="st">&quot;Apollo: Atmospheres and Soundtracks&quot;</span>)]</span></code></pre></div>
<p>We can lookup this map by using the function <code>Map.lookup :: Ord k =&gt; k -&gt; Map k a -&gt; Maybe a</code>.</p>
<p>If no match is found it will return <code>Nothing</code> if a match is found it will return <code>Just match</code>:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> Map.lookup <span class="st">&quot;Baby Satellite&quot;</span> songMap</span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true"></a><span class="dt">Just</span> <span class="st">&quot;Microgravity&quot;</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> Map.lookup <span class="st">&quot;The Fairy Tale&quot;</span> songMap</span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true"></a><span class="dt">Nothing</span></span></code></pre></div>
<p>Actually the <code>Maybe</code> type is defined as:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="kw">data</span>  <span class="dt">Maybe</span> a  <span class="ot">=</span>  <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p>All code using the <code>Map.lookup</code> function will never be confronted with any kind of Exceptions, null pointers or other nasty things. Even in case of errors a lookup will always return a properly typed <code>Maybe</code> instance. By pattern matching for <code>Nothing</code> or <code>Just a</code> client code can react on failing matches or positive results:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true"></a>    <span class="kw">case</span> Map.lookup <span class="st">&quot;Ancient Campfire&quot;</span> songMap <span class="kw">of</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">print</span> <span class="st">&quot;sorry, could not find your song&quot;</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true"></a>        <span class="dt">Just</span> a  <span class="ot">-&gt;</span> <span class="fu">print</span> a</span></code></pre></div>
<p>Let’s try to apply this to an extension of our simple song lookup. Let’s assume that our music database has much more information available. Apart from a reverse index from songs to albums, there might also be an index mapping album titles to artists. And we might also have an index mapping artist names to their websites:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Song</span>   <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Album</span>  <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Artist</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">URL</span>    <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true"></a></span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true"></a><span class="ot">songMap ::</span> <span class="dt">Map</span> <span class="dt">Song</span> <span class="dt">Album</span></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true"></a>songMap <span class="ot">=</span> fromList</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true"></a>    [(<span class="st">&quot;Baby Satellite&quot;</span>,<span class="st">&quot;Microgravity&quot;</span>)</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true"></a>    ,(<span class="st">&quot;An Ending&quot;</span>, <span class="st">&quot;Apollo: Atmospheres and Soundtracks&quot;</span>)]</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true"></a></span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true"></a><span class="ot">albumMap ::</span> <span class="dt">Map</span> <span class="dt">Album</span> <span class="dt">Artist</span></span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true"></a>albumMap <span class="ot">=</span> fromList</span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true"></a>    [(<span class="st">&quot;Microgravity&quot;</span>,<span class="st">&quot;Biosphere&quot;</span>)</span>
<span id="cb36-14"><a href="#cb36-14" aria-hidden="true"></a>    ,(<span class="st">&quot;Apollo: Atmospheres and Soundtracks&quot;</span>, <span class="st">&quot;Brian Eno&quot;</span>)]</span>
<span id="cb36-15"><a href="#cb36-15" aria-hidden="true"></a></span>
<span id="cb36-16"><a href="#cb36-16" aria-hidden="true"></a><span class="ot">artistMap ::</span> <span class="dt">Map</span> <span class="dt">Artist</span> <span class="dt">URL</span></span>
<span id="cb36-17"><a href="#cb36-17" aria-hidden="true"></a>artistMap <span class="ot">=</span> fromList</span>
<span id="cb36-18"><a href="#cb36-18" aria-hidden="true"></a>    [(<span class="st">&quot;Biosphere&quot;</span>,<span class="st">&quot;http://www.biosphere.no//&quot;</span>)</span>
<span id="cb36-19"><a href="#cb36-19" aria-hidden="true"></a>    ,(<span class="st">&quot;Brian Eno&quot;</span>, <span class="st">&quot;http://www.brian-eno.net&quot;</span>)]</span>
<span id="cb36-20"><a href="#cb36-20" aria-hidden="true"></a></span>
<span id="cb36-21"><a href="#cb36-21" aria-hidden="true"></a><span class="ot">lookup&#39; ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> <span class="dt">Map</span> a b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb36-22"><a href="#cb36-22" aria-hidden="true"></a>lookup&#39; <span class="ot">=</span> <span class="fu">flip</span> Map.lookup</span>
<span id="cb36-23"><a href="#cb36-23" aria-hidden="true"></a></span>
<span id="cb36-24"><a href="#cb36-24" aria-hidden="true"></a><span class="ot">findAlbum ::</span> <span class="dt">Song</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Album</span></span>
<span id="cb36-25"><a href="#cb36-25" aria-hidden="true"></a>findAlbum <span class="ot">=</span> lookup&#39; songMap</span>
<span id="cb36-26"><a href="#cb36-26" aria-hidden="true"></a></span>
<span id="cb36-27"><a href="#cb36-27" aria-hidden="true"></a><span class="ot">findArtist ::</span> <span class="dt">Album</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Artist</span></span>
<span id="cb36-28"><a href="#cb36-28" aria-hidden="true"></a>findArtist <span class="ot">=</span> lookup&#39; albumMap</span>
<span id="cb36-29"><a href="#cb36-29" aria-hidden="true"></a></span>
<span id="cb36-30"><a href="#cb36-30" aria-hidden="true"></a><span class="ot">findWebSite ::</span> <span class="dt">Artist</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">URL</span></span>
<span id="cb36-31"><a href="#cb36-31" aria-hidden="true"></a>findWebSite <span class="ot">=</span> lookup&#39; artistMap</span></code></pre></div>
<p>With all this information at hand we want to write a function that has an input parameter of type <code>Song</code> and returns a <code>Maybe URL</code> by going from song to album to artist to website url:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true"></a><span class="ot">findUrlFromSong ::</span> <span class="dt">Song</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">URL</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true"></a>findUrlFromSong song <span class="ot">=</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true"></a>    <span class="kw">case</span> findAlbum song <span class="kw">of</span></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true"></a>        <span class="dt">Nothing</span>    <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true"></a>        <span class="dt">Just</span> album <span class="ot">-&gt;</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true"></a>            <span class="kw">case</span> findArtist album <span class="kw">of</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true"></a>                <span class="dt">Nothing</span>     <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true"></a>                <span class="dt">Just</span> artist <span class="ot">-&gt;</span></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true"></a>                    <span class="kw">case</span> findWebSite artist <span class="kw">of</span></span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true"></a>                        <span class="dt">Nothing</span>  <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true"></a>                        <span class="dt">Just</span> url <span class="ot">-&gt;</span> <span class="dt">Just</span> url</span></code></pre></div>
<p>This code makes use of the pattern matching logic described before. It’s worth to note that there is some nice circuit breaking happening in case of a <code>Nothing</code>. In this case <code>Nothing</code> is directly returned as result of the function and the rest of the case-ladder is not executed. What’s not so nice is <em>“the dreaded ladder of code marching off the right of the screen”</em> <a href="http://book.realworldhaskell.org/">(quoted from Real World Haskell)</a>.</p>
<p>For each find function we have to repeat the same ceremony of pattern matching on the result and either return <code>Nothing</code> or proceed with the next nested level.</p>
<p>The good news is that it is possible to avoid this ladder. We can rewrite our search by applying the <code>andThen</code> operator <code>&gt;&gt;=</code> as <code>Maybe</code> is an instance of <code>Monad</code>:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true"></a><span class="ot">findUrlFromSong&#39; ::</span> <span class="dt">Song</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">URL</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true"></a>findUrlFromSong&#39; song <span class="ot">=</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true"></a>    findAlbum song   <span class="op">&gt;&gt;=</span> \album <span class="ot">-&gt;</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true"></a>    findArtist album <span class="op">&gt;&gt;=</span> \artist <span class="ot">-&gt;</span></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true"></a>    findWebSite artist  </span></code></pre></div>
<p>or even shorter as we can eliminate the lambda expressions by applying <a href="https://wiki.haskell.org/Eta_conversion">eta-conversion</a>:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true"></a><span class="ot">findUrlFromSong&#39;&#39; ::</span> <span class="dt">Song</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">URL</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true"></a>findUrlFromSong&#39;&#39; song <span class="ot">=</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true"></a>    findAlbum song <span class="op">&gt;&gt;=</span> findArtist <span class="op">&gt;&gt;=</span> findWebSite</span></code></pre></div>
<p>Using it in GHCi:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> findUrlFromSong&#39;&#39; <span class="st">&quot;All you need is love&quot;</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true"></a><span class="dt">Nothing</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> findUrlFromSong&#39;&#39; <span class="st">&quot;An Ending&quot;</span></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true"></a><span class="dt">Just</span> <span class="st">&quot;http://www.brian-eno.net&quot;</span></span></code></pre></div>
<p>The expression <code>findAlbum song &gt;&gt;= findArtist &gt;&gt;= findWebSite</code> and the sequencing of actions in the <a href="#pipeline---monad">pipeline</a> example <code>return str &gt;&gt;= return . length . words &gt;&gt;= return . (3 *)</code> have a similar structure.</p>
<p>But the behaviour of both chains is quite different: In the Maybe Monad <code>a &gt;&gt;= b</code> does not evaluate b if <code>a == Nothing</code> but stops the whole chain of actions by simply returning <code>Nothing</code>.</p>
<p>The pattern matching and ‘short-circuiting’ is directly coded into the definition of <code>(&gt;&gt;=)</code> in the Monad implementation of <code>Maybe</code>:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true"></a><span class="kw">instance</span>  <span class="dt">Monad</span> <span class="dt">Maybe</span>  <span class="kw">where</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true"></a>    (<span class="dt">Just</span> x) <span class="op">&gt;&gt;=</span> k      <span class="ot">=</span> k x</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true"></a>    <span class="dt">Nothing</span>  <span class="op">&gt;&gt;=</span> _      <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>This elegant feature of <code>(&gt;&gt;=)</code> in the <code>Maybe</code> Monad allows us to avoid ugly and repetetive coding.</p>
<h4 id="avoiding-partial-functions-by-using-maybe">Avoiding partial functions by using Maybe</h4>
<p>Maybe is often used to avoid the exposure of partial functions to client code. Take for example division by zero or computing the square root of negative numbers which are undefined (at least for real numbers). Here come safe – that is total – definitions of these functions that return <code>Nothing</code> for undefined cases:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true"></a><span class="ot">safeRoot ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true"></a>safeRoot x</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true"></a>    <span class="op">|</span> x <span class="op">&gt;=</span> <span class="dv">0</span>    <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">sqrt</span> x)</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true"></a></span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true"></a><span class="ot">safeReciprocal ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true"></a>safeReciprocal x</span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true"></a>    <span class="op">|</span> x <span class="op">/=</span> <span class="dv">0</span>    <span class="ot">=</span> <span class="dt">Just</span> (<span class="dv">1</span><span class="op">/</span>x)</span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>As we have already learned the monadic <code>&gt;&gt;=</code> operator allows to chain such function as in the following example:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true"></a><span class="ot">safeRootReciprocal ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true"></a>safeRootReciprocal x <span class="ot">=</span> <span class="fu">return</span> x <span class="op">&gt;&gt;=</span> safeReciprocal <span class="op">&gt;&gt;=</span> safeRoot</span></code></pre></div>
<p>This can be written even more terse as:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true"></a><span class="ot">safeRootReciprocal ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true"></a>safeRootReciprocal <span class="ot">=</span> safeReciprocal <span class="op">&gt;=&gt;</span> safeRoot</span></code></pre></div>
<p>The use of the <a href="https://www.stackage.org/haddock/lts-13.0/base-4.12.0.0/Control-Monad.html#v:-62--61--62-">Kleisli ‘fish’ operator <code>&gt;=&gt;</code></a> makes it more evident that we are actually aiming at a composition of the monadic functions <code>safeReciprocal</code> and <code>safeRoot</code>.</p>
<p>There are many predefined Monads available in the Haskell curated libraries and it’s also possible to combine their effects by making use of <code>MonadTransformers</code>. But that’s a <a href="#aspect-weaving--monad-transformers">different story…</a></p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/NullObject.hs">Sourcecode for this section</a></p>
<h3 id="interpreter-reader-monad">Interpreter → Reader Monad</h3>
<blockquote>
<p>In computer programming, the interpreter pattern is a design pattern that specifies how to evaluate sentences in a language. The basic idea is to have a class for each symbol (terminal or nonterminal) in a specialized computer language. The syntax tree of a sentence in the language is an instance of the composite pattern and is used to evaluate (interpret) the sentence for a client.</p>
<p><a href="https://en.wikipedia.org/wiki/Interpreter_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<p>In the section <a href="#singleton--applicative">Singleton → Applicative</a> we have already written a simple expression evaluator. From that section it should be obvious how easy the definition of evaluators and interpreters is in functional programming languages.</p>
<p>The main ingredients are:</p>
<ul>
<li>Algebraic Data Types (ADT) used to define the expression data type which is to be evaluated</li>
<li>An evaluator function that uses pattern matching on the expression ADT</li>
<li>‘implicit’ threading of an environment</li>
</ul>
<p>In the section on Singleton we have seen that some kind of ‘implicit’ threading of the environment can be already achieved with `Applicative Functors. We still had the environment as an explicit parameter of the eval function:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Num</span> e <span class="ot">=&gt;</span> <span class="dt">Exp</span> e <span class="ot">-&gt;</span> <span class="dt">Env</span> e <span class="ot">-&gt;</span> e</span></code></pre></div>
<p>but we could omit it in the pattern matching equations:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)   <span class="ot">=</span> fetch x</span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)   <span class="ot">=</span> <span class="fu">pure</span> i</span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true"></a>eval (<span class="dt">Add</span> p q) <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">+</span>) <span class="op">&lt;*&gt;</span> eval p  <span class="op">&lt;*&gt;</span> eval q  </span>
<span id="cb46-4"><a href="#cb46-4" aria-hidden="true"></a>eval (<span class="dt">Mul</span> p q) <span class="ot">=</span> <span class="fu">pure</span> (<span class="op">*</span>) <span class="op">&lt;*&gt;</span> eval p  <span class="op">&lt;*&gt;</span> eval q</span></code></pre></div>
<p>By using Monads the handling of the environment can be made even more implicit.</p>
<p>I’ll demonstrate this with a slightly extended version of the evaluator. In the first step we extend the expression syntax to also provide let expressions and generic support for binary operators:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true"></a><span class="co">-- | a simple expression ADT</span></span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Exp</span> a <span class="ot">=</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true"></a>      <span class="dt">Var</span> <span class="dt">String</span>                            <span class="co">-- a variable to be looked up</span></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">BinOp</span> (<span class="dt">BinOperator</span> a) (<span class="dt">Exp</span> a) (<span class="dt">Exp</span> a) <span class="co">-- a binary operator applied to two expressions</span></span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Let</span> <span class="dt">String</span> (<span class="dt">Exp</span> a) (<span class="dt">Exp</span> a)            <span class="co">-- a let expression</span></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Val</span> a                                 <span class="co">-- an atomic value</span></span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true"></a></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true"></a><span class="co">-- | a binary operator type</span></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">BinOperator</span> a <span class="ot">=</span>  a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true"></a></span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true"></a><span class="co">-- | the environment is just a list of mappings from variable names to values</span></span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Env</span> a <span class="ot">=</span> [(<span class="dt">String</span>, a)]</span></code></pre></div>
<p>With this data type we can encode expressions like:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true"></a><span class="kw">let</span> x <span class="ot">=</span> <span class="dv">4</span><span class="op">+</span><span class="dv">5</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true"></a><span class="kw">in</span> <span class="dv">2</span><span class="op">*</span>x</span></code></pre></div>
<p>as:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true"></a><span class="dt">Let</span> <span class="st">&quot;x&quot;</span> (<span class="dt">BinOp</span> (<span class="op">+</span>) (<span class="dt">Val</span> <span class="dv">4</span>) (<span class="dt">Val</span> <span class="dv">5</span>))</span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true"></a>        (<span class="dt">BinOp</span> (<span class="op">*</span>) (<span class="dt">Val</span> <span class="dv">2</span>) (<span class="dt">Var</span> <span class="st">&quot;x&quot;</span>))</span></code></pre></div>
<p>In order to evaluate such expression we must be able to modify the environment at runtime to create a binding for the variable <code>x</code> which will be referred to in the <code>in</code> part of the expression.</p>
<p>Next we define an evaluator function that pattern matches the above expression ADT:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">MonadReader</span> (<span class="dt">Env</span> a) m <span class="ot">=&gt;</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> m a</span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)          <span class="ot">=</span> <span class="fu">return</span> i</span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)          <span class="ot">=</span> asks (fetch x)</span>
<span id="cb50-4"><a href="#cb50-4" aria-hidden="true"></a>eval (<span class="dt">BinOp</span> op e1 e2) <span class="ot">=</span> liftM2 op (eval e1) (eval e2)</span>
<span id="cb50-5"><a href="#cb50-5" aria-hidden="true"></a>eval (<span class="dt">Let</span> x e1 e2)    <span class="ot">=</span> eval e1 <span class="op">&gt;&gt;=</span> \v <span class="ot">-&gt;</span> local ((x,v)<span class="op">:</span>) (eval e2)</span></code></pre></div>
<p>Let’s explore this dense code line by line.</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">MonadReader</span> (<span class="dt">Env</span> a) m <span class="ot">=&gt;</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>The most simple instance for <code>MonadReader</code> is the partially applied function type <code>((-&gt;) env)</code>. Let’s assume the compiler will choose this type as the <code>MonadReader</code> instance. We can then rewrite the function signature as follows:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> ((<span class="ot">-&gt;</span>) (<span class="dt">Env</span> a)) a  <span class="co">-- expanding m to ((-&gt;) (Env a))</span></span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> <span class="dt">Env</span> a <span class="ot">-&gt;</span> a        <span class="co">-- applying infix notation for (-&gt;)</span></span></code></pre></div>
<p>This is exactly the signature we were using for the <code>Applicative</code> eval function which matches our original intent to eval an expression of type <code>Exp a</code> in an environment of type <code>Env a</code> to a result of type <code>a</code>.</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)          <span class="ot">=</span> <span class="fu">return</span> i</span></code></pre></div>
<p>In this line we are pattern matching for a <code>(Val i)</code>. The atomic value <code>i</code> is <code>return</code>ed, that is lifted to a value of the type <code>Env a -&gt; a</code>.</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)          <span class="ot">=</span> asks (fetch x)</span></code></pre></div>
<p><code>asks</code> is a helper function that applies its argument <code>f :: env -&gt; a</code> (in our case <code>(fetch x)</code> which looks up variable <code>x</code>) to the environment. <code>asks</code> is thus typically used to handle environment lookups:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true"></a><span class="ot">asks ::</span> (<span class="dt">MonadReader</span> env m) <span class="ot">=&gt;</span> (env <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> m a</span>
<span id="cb55-2"><a href="#cb55-2" aria-hidden="true"></a>asks f <span class="ot">=</span> ask <span class="op">&gt;&gt;=</span> <span class="fu">return</span> <span class="op">.</span> f</span></code></pre></div>
<p>Now to the next line handling the application of a binary operator:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true"></a>eval (<span class="dt">BinOp</span> op e1 e2) <span class="ot">=</span> liftM2 op (eval e1) (eval e2)</span></code></pre></div>
<p><code>op</code> is a binary function of type <code>a -&gt; a -&gt; a</code> (typical examples are binary arithmetic functions like <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>).</p>
<p>We want to apply this operation on the two expressions <code>(eval e1)</code> and <code>(eval e2)</code>. As these expressions both are to be executed within the same monadic context we have to use <code>liftM2</code> to lift <code>op</code> into this context:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true"></a><span class="co">-- | Promote a function to a monad, scanning the monadic arguments from</span></span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true"></a><span class="co">-- left to right.  For example,</span></span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true"></a><span class="co">--</span></span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true"></a><span class="co">-- &gt; liftM2 (+) [0,1] [0,2] = [0,2,1,3]</span></span>
<span id="cb57-5"><a href="#cb57-5" aria-hidden="true"></a><span class="co">-- &gt; liftM2 (+) (Just 1) Nothing = Nothing</span></span>
<span id="cb57-6"><a href="#cb57-6" aria-hidden="true"></a><span class="co">--</span></span>
<span id="cb57-7"><a href="#cb57-7" aria-hidden="true"></a><span class="ot">liftM2  ::</span> (<span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (a1 <span class="ot">-&gt;</span> a2 <span class="ot">-&gt;</span> r) <span class="ot">-&gt;</span> m a1 <span class="ot">-&gt;</span> m a2 <span class="ot">-&gt;</span> m r</span>
<span id="cb57-8"><a href="#cb57-8" aria-hidden="true"></a>liftM2 f m1 m2 <span class="ot">=</span> <span class="kw">do</span> { x1 <span class="ot">&lt;-</span> m1; x2 <span class="ot">&lt;-</span> m2; <span class="fu">return</span> (f x1 x2) }</span></code></pre></div>
<p>The last step is the evaluation of <code>Let x e1 e2</code> expressions like <code>Let "x" (Val 7) (BinOp (+) (Var "x") (Val 5))</code>. To make this work we have to evaluate <code>e1</code> and extend the environment by a binding of the variable <code>x</code> to the result of that evaluation. Then we have to evaluate <code>e2</code> in the context of the extended environment:</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true"></a>eval (<span class="dt">Let</span> x e1 e2)    <span class="ot">=</span> eval e1 <span class="op">&gt;&gt;=</span> \v <span class="ot">-&gt;</span>           <span class="co">-- bind the result of (eval e1) to v</span></span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true"></a>                        local ((x,v)<span class="op">:</span>) (eval e2)    <span class="co">-- add (x,v) to the env, eval e2 in the extended env</span></span></code></pre></div>
<p>The interesting part here is the helper function <code>local f m</code> which applies <code>f</code> to the environment and then executes <code>m</code> against the (locally) changed environment. Providing a locally modified environment as the scope of the evaluation of <code>e2</code> is exactly what the <code>let</code> binding intends:</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true"></a><span class="co">-- | Executes a computation in a modified environment.</span></span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true"></a><span class="ot">local ::</span> (r <span class="ot">-&gt;</span> r) <span class="co">-- ^ The function to modify the environment.</span></span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true"></a>        <span class="ot">-&gt;</span> m a    <span class="co">-- ^ @Reader@ to run in the modified environment.</span></span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true"></a>        <span class="ot">-&gt;</span> m a</span>
<span id="cb59-5"><a href="#cb59-5" aria-hidden="true"></a></span>
<span id="cb59-6"><a href="#cb59-6" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">MonadReader</span> r ((<span class="ot">-&gt;</span>) r) <span class="kw">where</span></span>
<span id="cb59-7"><a href="#cb59-7" aria-hidden="true"></a>    local f m <span class="ot">=</span> m <span class="op">.</span> f</span></code></pre></div>
<p>Now we can use <code>eval</code> to evaluate our example expression:</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true"></a>interpreterDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;Interpreter -&gt; Reader Monad + ADTs + pattern matching&quot;</span></span>
<span id="cb60-3"><a href="#cb60-3" aria-hidden="true"></a>    <span class="kw">let</span> exp1 <span class="ot">=</span> <span class="dt">Let</span> <span class="st">&quot;x&quot;</span></span>
<span id="cb60-4"><a href="#cb60-4" aria-hidden="true"></a>                (<span class="dt">BinOp</span> (<span class="op">+</span>) (<span class="dt">Val</span> <span class="dv">4</span>) (<span class="dt">Val</span> <span class="dv">5</span>))</span>
<span id="cb60-5"><a href="#cb60-5" aria-hidden="true"></a>                (<span class="dt">BinOp</span> (<span class="op">*</span>) (<span class="dt">Val</span> <span class="dv">2</span>) (<span class="dt">Var</span> <span class="st">&quot;x&quot;</span>))</span>
<span id="cb60-6"><a href="#cb60-6" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> runReader (eval exp1) env</span>
<span id="cb60-7"><a href="#cb60-7" aria-hidden="true"></a></span>
<span id="cb60-8"><a href="#cb60-8" aria-hidden="true"></a><span class="co">-- an then in GHCi:</span></span>
<span id="cb60-9"><a href="#cb60-9" aria-hidden="true"></a></span>
<span id="cb60-10"><a href="#cb60-10" aria-hidden="true"></a><span class="op">&gt;</span> interpreterDemo</span>
<span id="cb60-11"><a href="#cb60-11" aria-hidden="true"></a><span class="dv">18</span></span></code></pre></div>
<p>By virtue of the <code>local</code> function we used <code>MonadReader</code> as if it provided modifiable state. So for many use cases that require only <em>local</em> state modifications its not required to use the somewhat more tricky <code>MonadState</code>.</p>
<p>Writing the interpreter function with a <code>MonadState</code> looks like follows:</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true"></a><span class="ot">eval1 ::</span> (<span class="dt">MonadState</span> (<span class="dt">Env</span> a) m) <span class="ot">=&gt;</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> m a</span>
<span id="cb61-2"><a href="#cb61-2" aria-hidden="true"></a>eval1 (<span class="dt">Val</span> i)          <span class="ot">=</span> <span class="fu">return</span> i</span>
<span id="cb61-3"><a href="#cb61-3" aria-hidden="true"></a>eval1 (<span class="dt">Var</span> x)          <span class="ot">=</span> gets (fetch x)</span>
<span id="cb61-4"><a href="#cb61-4" aria-hidden="true"></a>eval1 (<span class="dt">BinOp</span> op e1 e2) <span class="ot">=</span> liftM2 op (eval1 e1) (eval1 e2)</span>
<span id="cb61-5"><a href="#cb61-5" aria-hidden="true"></a>eval1 (<span class="dt">Let</span> x e1 e2)    <span class="ot">=</span> eval1 e1        <span class="op">&gt;&gt;=</span> \v <span class="ot">-&gt;</span></span>
<span id="cb61-6"><a href="#cb61-6" aria-hidden="true"></a>                         modify ((x,v)<span class="op">:</span>) <span class="op">&gt;&gt;</span></span>
<span id="cb61-7"><a href="#cb61-7" aria-hidden="true"></a>                         eval1 e2</span></code></pre></div>
<p>This section was inspired by ideas presented in <a href="https://donsbot.wordpress.com/2006/12/11/quick-interpreters-with-the-reader-monad/">Quick Interpreters with the Reader Monad</a>.</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Interpreter.hs">Sourcecode for this section</a></p>
<!-- 
### ? → MonadFail

tbd.
-->
<h3 id="aspect-weaving-monad-transformers">Aspect Weaving → Monad Transformers</h3>
<blockquote>
<p>In computing, aspect-oriented programming (AOP) is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does so by adding additional behavior to existing code (an advice) without modifying the code itself, instead separately specifying which code is modified via a “pointcut” specification, such as “log all function calls when the function’s name begins with ‘set’”. This allows behaviors that are not central to the business logic (such as logging) to be added to a program without cluttering the code, core to the functionality.</p>
<p><a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">Quoted from Wikipedia</a></p>
</blockquote>
<h3 id="stacking-monads">Stacking Monads</h3>
<p>In section <a href="#interpreter--reader-monad">Interpreter -&gt; Reader Monad</a> we specified an Interpreter of a simple expression language by defining a monadic <code>eval</code> function:</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> <span class="dt">Reader</span> (<span class="dt">Env</span> a) a  </span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)          <span class="ot">=</span> asks (fetch x)</span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)          <span class="ot">=</span> <span class="fu">return</span> i</span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true"></a>eval (<span class="dt">BinOp</span> op e1 e2) <span class="ot">=</span> liftM2 op (eval e1) (eval e2)</span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true"></a>eval (<span class="dt">Let</span> x e1 e2) <span class="ot">=</span> eval e1 <span class="op">&gt;&gt;=</span> \v <span class="ot">-&gt;</span> local ((x,v)<span class="op">:</span>) (eval e2)</span></code></pre></div>
<p>Using the <code>Reader</code> Monad allows to thread an environment through all recursive calls of <code>eval</code>.</p>
<p>A typical extension to such an interpreter would be to provide a log mechanism that allows tracing of the actual sequence of all performed evaluation steps.</p>
<p>In Haskell the typical way to provide such a log is by means of the <code>Writer Monad</code>.</p>
<p>But how to combine the capabilities of the <code>Reader</code> monad code with those of the <code>Writer</code> monad?</p>
<p>The answer is <code>MonadTransformer</code>s: specialized types that allow us to stack two monads into a single one that shares the behavior of both.</p>
<p>In order to stack the <code>Writer</code> monad on top of the <code>Reader</code> we use the transformer type <code>WriterT</code>:</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true"></a><span class="co">-- adding a logging capability to the expression evaluator</span></span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true"></a><span class="ot">eval ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> <span class="dt">Exp</span> a <span class="ot">-&gt;</span> <span class="dt">WriterT</span> [<span class="dt">String</span>] (<span class="dt">Reader</span> (<span class="dt">Env</span> a)) a</span>
<span id="cb63-3"><a href="#cb63-3" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)          <span class="ot">=</span> tell [<span class="st">&quot;lookup &quot;</span> <span class="op">++</span> x] <span class="op">&gt;&gt;</span> asks (fetch x)</span>
<span id="cb63-4"><a href="#cb63-4" aria-hidden="true"></a>eval (<span class="dt">Val</span> i)          <span class="ot">=</span> tell [<span class="fu">show</span> i] <span class="op">&gt;&gt;</span> <span class="fu">return</span> i</span>
<span id="cb63-5"><a href="#cb63-5" aria-hidden="true"></a>eval (<span class="dt">BinOp</span> op e1 e2) <span class="ot">=</span> tell [<span class="st">&quot;Op&quot;</span>] <span class="op">&gt;&gt;</span> liftM2 op (eval e1) (eval e2)</span>
<span id="cb63-6"><a href="#cb63-6" aria-hidden="true"></a>eval (<span class="dt">Let</span> x e1 e2)    <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb63-7"><a href="#cb63-7" aria-hidden="true"></a>    tell [<span class="st">&quot;let &quot;</span> <span class="op">++</span> x]</span>
<span id="cb63-8"><a href="#cb63-8" aria-hidden="true"></a>    v <span class="ot">&lt;-</span> eval e1</span>
<span id="cb63-9"><a href="#cb63-9" aria-hidden="true"></a>    tell [<span class="st">&quot;in&quot;</span>]</span>
<span id="cb63-10"><a href="#cb63-10" aria-hidden="true"></a>    local ((x,v)<span class="op">:</span>) (eval e2)</span></code></pre></div>
<p>The signature of <code>eval</code> has been extended by Wrapping <code>WriterT [String]</code> around <code>(Reader (Env a))</code>. This denotes a Monad that combines a <code>Reader (Env a)</code> with a <code>Writer [String]</code>. <code>Writer [String]</code> is a <code>Writer</code> that maintains a list of strings as log.</p>
<p>The resulting Monad supports function of both <code>MonadReader</code> and <code>MonadWriter</code> typeclasses. As you can see in the equation for <code>eval (Var x)</code> we are using <code>MonadWriter.tell</code> for logging and <code>MonadReader.asks</code> for obtaining the environment and compose both monadic actions by <code>&gt;&gt;</code>:</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true"></a>eval (<span class="dt">Var</span> x)          <span class="ot">=</span> tell [<span class="st">&quot;lookup &quot;</span> <span class="op">++</span> x] <span class="op">&gt;&gt;</span> asks (fetch x)</span></code></pre></div>
<p>In order to execute this stacked up monads we have to apply the <code>run</code> functions of <code>WriterT</code> and <code>Reader</code>:</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runReader (runWriterT (eval letExp)) [(<span class="st">&quot;pi&quot;</span>,<span class="fu">pi</span>)]</span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true"></a>(<span class="fl">6.283185307179586</span>,[<span class="st">&quot;let x&quot;</span>,<span class="st">&quot;let y&quot;</span>,<span class="st">&quot;Op&quot;</span>,<span class="st">&quot;5.0&quot;</span>,<span class="st">&quot;7.0&quot;</span>,<span class="st">&quot;in&quot;</span>,<span class="st">&quot;Op&quot;</span>,<span class="st">&quot;lookup y&quot;</span>,<span class="st">&quot;6.0&quot;</span>,<span class="st">&quot;in&quot;</span>,<span class="st">&quot;Op&quot;</span>,<span class="st">&quot;lookup pi&quot;</span>,<span class="st">&quot;lookup x&quot;</span>])</span></code></pre></div>
<p>For more details on MonadTransformers please have a look at the following tutorials:</p>
<p><a href="https://en.wikibooks.org/wiki/Haskell/Monad_transformers">MonadTransformers Wikibook</a></p>
<p><a href="https://page.mi.fu-berlin.de/scravy/realworldhaskell/materialien/monad-transformers-step-by-step.pdf">Monad Transformers step by step</a></p>
<h3 id="specifying-aop-semantics-with-monadtransformers">Specifying AOP semantics with MonadTransformers</h3>
<p>What we have seen so far is that it possible to form Monad stacks that combine the functionality of the Monads involved: In a way a MonadTransformer adds capabilities that are cross-cutting to those of the underlying Monad.</p>
<p>In the following lines I want to show how MonadTransformers can be used to specify the formal semantics of Aspect Oriented Programming. I have taken the example from Mark P. Jones paper <a href="https://pdfs.semanticscholar.org/c4ce/14364d88d533fac6aa53481b719aa661ce73.pdf">The Essence of AspectJ</a>.</p>
<h4 id="an-interpreter-for-minipascal">An interpreter for MiniPascal</h4>
<p>We start by defining a simple imperative language – MiniPascal:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true"></a><span class="co">-- | an identifier type</span></span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Id</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb66-3"><a href="#cb66-3" aria-hidden="true"></a></span>
<span id="cb66-4"><a href="#cb66-4" aria-hidden="true"></a><span class="co">-- | Integer expressions</span></span>
<span id="cb66-5"><a href="#cb66-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">IExp</span> <span class="ot">=</span> <span class="dt">Lit</span> <span class="dt">Int</span></span>
<span id="cb66-6"><a href="#cb66-6" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IExp</span> <span class="op">:+:</span> <span class="dt">IExp</span></span>
<span id="cb66-7"><a href="#cb66-7" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IExp</span> <span class="op">:*:</span> <span class="dt">IExp</span></span>
<span id="cb66-8"><a href="#cb66-8" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IExp</span> <span class="op">:-:</span> <span class="dt">IExp</span></span>
<span id="cb66-9"><a href="#cb66-9" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IExp</span> <span class="op">:/:</span> <span class="dt">IExp</span></span>
<span id="cb66-10"><a href="#cb66-10" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IVar</span> <span class="dt">Id</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb66-11"><a href="#cb66-11" aria-hidden="true"></a></span>
<span id="cb66-12"><a href="#cb66-12" aria-hidden="true"></a><span class="co">-- | Boolean expressions</span></span>
<span id="cb66-13"><a href="#cb66-13" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">BExp</span> <span class="ot">=</span> <span class="dt">T</span></span>
<span id="cb66-14"><a href="#cb66-14" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">F</span></span>
<span id="cb66-15"><a href="#cb66-15" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Not</span> <span class="dt">BExp</span></span>
<span id="cb66-16"><a href="#cb66-16" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">BExp</span> <span class="op">:&amp;:</span> <span class="dt">BExp</span></span>
<span id="cb66-17"><a href="#cb66-17" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">BExp</span> <span class="op">:|:</span> <span class="dt">BExp</span></span>
<span id="cb66-18"><a href="#cb66-18" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IExp</span> <span class="op">:=:</span> <span class="dt">IExp</span></span>
<span id="cb66-19"><a href="#cb66-19" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">IExp</span> <span class="op">:&lt;:</span> <span class="dt">IExp</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb66-20"><a href="#cb66-20" aria-hidden="true"></a></span>
<span id="cb66-21"><a href="#cb66-21" aria-hidden="true"></a><span class="co">-- | Staments</span></span>
<span id="cb66-22"><a href="#cb66-22" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Stmt</span> <span class="ot">=</span> <span class="dt">Skip</span>        <span class="co">-- no op</span></span>
<span id="cb66-23"><a href="#cb66-23" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Id</span> <span class="op">:=</span> <span class="dt">IExp</span>        <span class="co">-- variable assignment</span></span>
<span id="cb66-24"><a href="#cb66-24" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">Begin</span> [<span class="dt">Stmt</span>]      <span class="co">-- a sequence of statements</span></span>
<span id="cb66-25"><a href="#cb66-25" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">If</span> <span class="dt">BExp</span> <span class="dt">Stmt</span> <span class="dt">Stmt</span> <span class="co">-- an if statement</span></span>
<span id="cb66-26"><a href="#cb66-26" aria-hidden="true"></a>    <span class="op">|</span> <span class="dt">While</span> <span class="dt">BExp</span> <span class="dt">Stmt</span>   <span class="co">-- a while loop</span></span>
<span id="cb66-27"><a href="#cb66-27" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>With this igredients its possible to write imperative programs like the following <code>while</code> loop that sums up the natural numbers from 1 to 10:</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true"></a><span class="co">-- an example program: the MiniPascal equivalent of `sum [1..10]`</span></span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true"></a><span class="ot">program ::</span> <span class="dt">Stmt</span></span>
<span id="cb67-3"><a href="#cb67-3" aria-hidden="true"></a>program <span class="ot">=</span></span>
<span id="cb67-4"><a href="#cb67-4" aria-hidden="true"></a>    <span class="dt">Begin</span> [</span>
<span id="cb67-5"><a href="#cb67-5" aria-hidden="true"></a>        <span class="st">&quot;total&quot;</span> <span class="op">:=</span> <span class="dt">Lit</span> <span class="dv">0</span>,</span>
<span id="cb67-6"><a href="#cb67-6" aria-hidden="true"></a>        <span class="st">&quot;count&quot;</span> <span class="op">:=</span> <span class="dt">Lit</span> <span class="dv">0</span>,</span>
<span id="cb67-7"><a href="#cb67-7" aria-hidden="true"></a>        <span class="dt">While</span> (<span class="dt">IVar</span> <span class="st">&quot;count&quot;</span> <span class="op">:&lt;:</span> <span class="dt">Lit</span> <span class="dv">10</span>)</span>
<span id="cb67-8"><a href="#cb67-8" aria-hidden="true"></a>            (<span class="dt">Begin</span> [</span>
<span id="cb67-9"><a href="#cb67-9" aria-hidden="true"></a>                <span class="st">&quot;count&quot;</span> <span class="op">:=</span> (<span class="dt">IVar</span> <span class="st">&quot;count&quot;</span> <span class="op">:+:</span> <span class="dt">Lit</span> <span class="dv">1</span>),</span>
<span id="cb67-10"><a href="#cb67-10" aria-hidden="true"></a>                <span class="st">&quot;total&quot;</span> <span class="op">:=</span> (<span class="dt">IVar</span> <span class="st">&quot;total&quot;</span> <span class="op">:+:</span> <span class="dt">IVar</span> <span class="st">&quot;count&quot;</span>)</span>
<span id="cb67-11"><a href="#cb67-11" aria-hidden="true"></a>            ])</span>
<span id="cb67-12"><a href="#cb67-12" aria-hidden="true"></a>    ]</span></code></pre></div>
<p>We define the semantics of this language with an interpreter:</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true"></a><span class="co">-- | the store used for variable assignments</span></span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Store</span> <span class="ot">=</span> <span class="dt">Map</span> <span class="dt">Id</span> <span class="dt">Int</span></span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true"></a></span>
<span id="cb68-4"><a href="#cb68-4" aria-hidden="true"></a><span class="co">-- | evaluate numeric expression.</span></span>
<span id="cb68-5"><a href="#cb68-5" aria-hidden="true"></a><span class="ot">iexp ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">IExp</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb68-6"><a href="#cb68-6" aria-hidden="true"></a>iexp (<span class="dt">Lit</span> n) <span class="ot">=</span> <span class="fu">return</span> n</span>
<span id="cb68-7"><a href="#cb68-7" aria-hidden="true"></a>iexp (e1 <span class="op">:+:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">+</span>) (iexp e1) (iexp e2)</span>
<span id="cb68-8"><a href="#cb68-8" aria-hidden="true"></a>iexp (e1 <span class="op">:*:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">*</span>) (iexp e1) (iexp e2)</span>
<span id="cb68-9"><a href="#cb68-9" aria-hidden="true"></a>iexp (e1 <span class="op">:-:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">-</span>) (iexp e1) (iexp e2)</span>
<span id="cb68-10"><a href="#cb68-10" aria-hidden="true"></a>iexp (e1 <span class="op">:/:</span> e2) <span class="ot">=</span> liftM2 <span class="fu">div</span> (iexp e1) (iexp e2)</span>
<span id="cb68-11"><a href="#cb68-11" aria-hidden="true"></a>iexp (<span class="dt">IVar</span> i)    <span class="ot">=</span> getVar i</span>
<span id="cb68-12"><a href="#cb68-12" aria-hidden="true"></a></span>
<span id="cb68-13"><a href="#cb68-13" aria-hidden="true"></a><span class="co">-- | evaluate logic expressions</span></span>
<span id="cb68-14"><a href="#cb68-14" aria-hidden="true"></a><span class="ot">bexp ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">BExp</span> <span class="ot">-&gt;</span> m <span class="dt">Bool</span></span>
<span id="cb68-15"><a href="#cb68-15" aria-hidden="true"></a>bexp <span class="dt">T</span>           <span class="ot">=</span> <span class="fu">return</span> <span class="dt">True</span></span>
<span id="cb68-16"><a href="#cb68-16" aria-hidden="true"></a>bexp <span class="dt">F</span>           <span class="ot">=</span> <span class="fu">return</span> <span class="dt">False</span></span>
<span id="cb68-17"><a href="#cb68-17" aria-hidden="true"></a>bexp (<span class="dt">Not</span> b)     <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">not</span> (bexp b)</span>
<span id="cb68-18"><a href="#cb68-18" aria-hidden="true"></a>bexp (b1 <span class="op">:&amp;:</span> b2) <span class="ot">=</span> liftM2 (<span class="op">&amp;&amp;</span>) (bexp b1) (bexp b2)</span>
<span id="cb68-19"><a href="#cb68-19" aria-hidden="true"></a>bexp (b1 <span class="op">:|:</span> b2) <span class="ot">=</span> liftM2 (<span class="op">||</span>) (bexp b1) (bexp b2)</span>
<span id="cb68-20"><a href="#cb68-20" aria-hidden="true"></a>bexp (e1 <span class="op">:=:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">==</span>) (iexp e1) (iexp e2)</span>
<span id="cb68-21"><a href="#cb68-21" aria-hidden="true"></a>bexp (e1 <span class="op">:&lt;:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">&lt;</span>)  (iexp e1) (iexp e2)</span>
<span id="cb68-22"><a href="#cb68-22" aria-hidden="true"></a></span>
<span id="cb68-23"><a href="#cb68-23" aria-hidden="true"></a><span class="co">-- | evaluate statements</span></span>
<span id="cb68-24"><a href="#cb68-24" aria-hidden="true"></a><span class="ot">stmt ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">Stmt</span> <span class="ot">-&gt;</span> m ()</span>
<span id="cb68-25"><a href="#cb68-25" aria-hidden="true"></a>stmt <span class="dt">Skip</span>       <span class="ot">=</span> <span class="fu">return</span> ()</span>
<span id="cb68-26"><a href="#cb68-26" aria-hidden="true"></a>stmt (i <span class="op">:=</span> e)   <span class="ot">=</span> <span class="kw">do</span> x <span class="ot">&lt;-</span> iexp e; setVar i x</span>
<span id="cb68-27"><a href="#cb68-27" aria-hidden="true"></a>stmt (<span class="dt">Begin</span> ss) <span class="ot">=</span> <span class="fu">mapM_</span> stmt ss</span>
<span id="cb68-28"><a href="#cb68-28" aria-hidden="true"></a>stmt (<span class="dt">If</span> b t e) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb68-29"><a href="#cb68-29" aria-hidden="true"></a>    x <span class="ot">&lt;-</span> bexp b</span>
<span id="cb68-30"><a href="#cb68-30" aria-hidden="true"></a>    <span class="kw">if</span> x <span class="kw">then</span> stmt t</span>
<span id="cb68-31"><a href="#cb68-31" aria-hidden="true"></a>         <span class="kw">else</span> stmt e</span>
<span id="cb68-32"><a href="#cb68-32" aria-hidden="true"></a>stmt (<span class="dt">While</span> b t) <span class="ot">=</span> loop</span>
<span id="cb68-33"><a href="#cb68-33" aria-hidden="true"></a>    <span class="kw">where</span> loop <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb68-34"><a href="#cb68-34" aria-hidden="true"></a>            x <span class="ot">&lt;-</span> bexp b</span>
<span id="cb68-35"><a href="#cb68-35" aria-hidden="true"></a>            when x <span class="op">$</span> stmt t <span class="op">&gt;&gt;</span> loop</span>
<span id="cb68-36"><a href="#cb68-36" aria-hidden="true"></a></span>
<span id="cb68-37"><a href="#cb68-37" aria-hidden="true"></a><span class="co">-- | a variable assignments updates the store (which is maintained in the state)</span></span>
<span id="cb68-38"><a href="#cb68-38" aria-hidden="true"></a><span class="ot">setVar ::</span> (<span class="dt">MonadState</span> (<span class="dt">Map</span> k a) m, <span class="dt">Ord</span> k) <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> m ()</span>
<span id="cb68-39"><a href="#cb68-39" aria-hidden="true"></a>setVar i x <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb68-40"><a href="#cb68-40" aria-hidden="true"></a>    store <span class="ot">&lt;-</span> get</span>
<span id="cb68-41"><a href="#cb68-41" aria-hidden="true"></a>    put (Map.insert i x store)</span>
<span id="cb68-42"><a href="#cb68-42" aria-hidden="true"></a></span>
<span id="cb68-43"><a href="#cb68-43" aria-hidden="true"></a><span class="co">-- | lookup a variable in the store. return 0 if no value is found</span></span>
<span id="cb68-44"><a href="#cb68-44" aria-hidden="true"></a><span class="ot">getVar ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb68-45"><a href="#cb68-45" aria-hidden="true"></a>getVar i <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb68-46"><a href="#cb68-46" aria-hidden="true"></a>    s <span class="ot">&lt;-</span> get</span>
<span id="cb68-47"><a href="#cb68-47" aria-hidden="true"></a>    <span class="kw">case</span> Map.lookup i s <span class="kw">of</span></span>
<span id="cb68-48"><a href="#cb68-48" aria-hidden="true"></a>        <span class="dt">Nothing</span>  <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="dv">0</span></span>
<span id="cb68-49"><a href="#cb68-49" aria-hidden="true"></a>        (<span class="dt">Just</span> v) <span class="ot">-&gt;</span> <span class="fu">return</span> v</span>
<span id="cb68-50"><a href="#cb68-50" aria-hidden="true"></a></span>
<span id="cb68-51"><a href="#cb68-51" aria-hidden="true"></a><span class="co">-- | evaluate a statement</span></span>
<span id="cb68-52"><a href="#cb68-52" aria-hidden="true"></a><span class="ot">run ::</span> <span class="dt">Stmt</span> <span class="ot">-&gt;</span> <span class="dt">Store</span></span>
<span id="cb68-53"><a href="#cb68-53" aria-hidden="true"></a>run s <span class="ot">=</span> execState (stmt s) (Map.fromList [])</span>
<span id="cb68-54"><a href="#cb68-54" aria-hidden="true"></a></span>
<span id="cb68-55"><a href="#cb68-55" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb68-56"><a href="#cb68-56" aria-hidden="true"></a>ghci<span class="op">&gt;</span> run program</span>
<span id="cb68-57"><a href="#cb68-57" aria-hidden="true"></a>fromList [(<span class="st">&quot;count&quot;</span>,<span class="dv">10</span>),(<span class="st">&quot;total&quot;</span>,<span class="dv">55</span>)]</span></code></pre></div>
<p>So far this is nothing special, just a minimal interpreter for an imperative language. Side effects in form of variable assignments are modelled with an environment that is maintained in a state monad.</p>
<p>In the next step we want to extend this language with features of aspect oriented programming in the style of <em>AspectJ</em>: join points, point cuts, and advices.</p>
<h4 id="an-interpreter-for-aspectpascal">An Interpreter for AspectPascal</h4>
<p>To keep things simple we will specify only two types of joint points: variable assignment and variable reading:</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">JoinPointDesc</span> <span class="ot">=</span> <span class="dt">Get</span> <span class="dt">Id</span> <span class="op">|</span> <span class="dt">Set</span> <span class="dt">Id</span></span></code></pre></div>
<p><code>Get i</code> describes a join point at which the variable <code>i</code> is read, while <code>Set i</code> described a join point at which a value is assigned to the variable <code>i</code>.</p>
<p>Following the concepts of ApectJ pointcut expressions are used to describe sets of join points. The abstract syntax for pointcuts is as follows:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PointCut</span> <span class="ot">=</span> <span class="dt">Setter</span>                  <span class="co">-- the pointcut of all join points at which a variable is being set</span></span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true"></a>              <span class="op">|</span> <span class="dt">Getter</span>                  <span class="co">-- the pointcut of all join points at which a variable is being read</span></span>
<span id="cb70-3"><a href="#cb70-3" aria-hidden="true"></a>              <span class="op">|</span> <span class="dt">AtVar</span> <span class="dt">Id</span>                <span class="co">-- the point cut of all join points at which a the variable is being set or read</span></span>
<span id="cb70-4"><a href="#cb70-4" aria-hidden="true"></a>              <span class="op">|</span> <span class="dt">NotAt</span> <span class="dt">PointCut</span>          <span class="co">-- not a</span></span>
<span id="cb70-5"><a href="#cb70-5" aria-hidden="true"></a>              <span class="op">|</span> <span class="dt">PointCut</span> <span class="op">:||:</span> <span class="dt">PointCut</span>  <span class="co">-- a or b</span></span>
<span id="cb70-6"><a href="#cb70-6" aria-hidden="true"></a>              <span class="op">|</span> <span class="dt">PointCut</span> <span class="op">:&amp;&amp;:</span> <span class="dt">PointCut</span>  <span class="co">-- a and b</span></span></code></pre></div>
<p>For example this syntax can be used to specify the pointcut of all join points at which the variable <code>x</code> is set:</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true"></a>(<span class="dt">Setter</span> <span class="op">:&amp;&amp;:</span> <span class="dt">AtVar</span> <span class="st">&quot;x&quot;</span>)</span></code></pre></div>
<p>The following function computes whether a <code>PointCut</code> contains a given <code>JoinPoint</code>:</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true"></a><span class="ot">includes ::</span> <span class="dt">PointCut</span> <span class="ot">-&gt;</span> (<span class="dt">JoinPointDesc</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>)</span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true"></a>includes <span class="dt">Setter</span>     (<span class="dt">Set</span> i) <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb72-3"><a href="#cb72-3" aria-hidden="true"></a>includes <span class="dt">Getter</span>     (<span class="dt">Get</span> i) <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb72-4"><a href="#cb72-4" aria-hidden="true"></a>includes (<span class="dt">AtVar</span> i)  (<span class="dt">Get</span> j) <span class="ot">=</span> i <span class="op">==</span> j</span>
<span id="cb72-5"><a href="#cb72-5" aria-hidden="true"></a>includes (<span class="dt">AtVar</span> i)  (<span class="dt">Set</span> j) <span class="ot">=</span> i <span class="op">==</span> j</span>
<span id="cb72-6"><a href="#cb72-6" aria-hidden="true"></a>includes (<span class="dt">NotAt</span> p)  d       <span class="ot">=</span> <span class="fu">not</span> (includes p d)</span>
<span id="cb72-7"><a href="#cb72-7" aria-hidden="true"></a>includes (p <span class="op">:||:</span> q) d       <span class="ot">=</span> includes p d <span class="op">||</span> includes q d</span>
<span id="cb72-8"><a href="#cb72-8" aria-hidden="true"></a>includes (p <span class="op">:&amp;&amp;:</span> q) d       <span class="ot">=</span> includes p d <span class="op">&amp;&amp;</span> includes q d</span>
<span id="cb72-9"><a href="#cb72-9" aria-hidden="true"></a>includes _ _                <span class="ot">=</span> <span class="dt">False</span></span></code></pre></div>
<p>In AspectJ aspect oriented extensions to a program are described using the notion of advices. We follow the same design here: each advice includes a pointcut to specify the join points at which the advice should be used, and a statement (in MiniPascal syntax) to specify the action that should be performed at each matching join point.</p>
<p>In AspectPascal we only support two kinds of advice: <code>Before</code>, which will be executed on entry to a join point, and <code>After</code> which will be executed on the exit from a join point:</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Advice</span> <span class="ot">=</span> <span class="dt">Before</span> <span class="dt">PointCut</span> <span class="dt">Stmt</span></span>
<span id="cb73-2"><a href="#cb73-2" aria-hidden="true"></a>            <span class="op">|</span> <span class="dt">After</span>  <span class="dt">PointCut</span> <span class="dt">Stmt</span></span></code></pre></div>
<p>This allows to define <code>Advice</code>s like the following:</p>
<div class="sourceCode" id="cb74"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true"></a><span class="co">-- the countSets Advice traces each setting of a variable and increments the counter &quot;countSet&quot;</span></span>
<span id="cb74-2"><a href="#cb74-2" aria-hidden="true"></a>countSets <span class="ot">=</span> <span class="dt">After</span> (<span class="dt">Setter</span> <span class="op">:&amp;&amp;:</span> <span class="dt">NotAt</span> (<span class="dt">AtVar</span> <span class="st">&quot;countSet&quot;</span>) <span class="op">:&amp;&amp;:</span> <span class="dt">NotAt</span> (<span class="dt">AtVar</span> <span class="st">&quot;countGet&quot;</span>))</span>
<span id="cb74-3"><a href="#cb74-3" aria-hidden="true"></a>                  (<span class="st">&quot;countSet&quot;</span> <span class="op">:=</span> (<span class="dt">IVar</span> <span class="st">&quot;countSet&quot;</span> <span class="op">:+:</span> <span class="dt">Lit</span> <span class="dv">1</span>))</span>
<span id="cb74-4"><a href="#cb74-4" aria-hidden="true"></a></span>
<span id="cb74-5"><a href="#cb74-5" aria-hidden="true"></a><span class="co">-- the countGets Advice traces each lookup of a variable and increments the counter &quot;countGet&quot;</span></span>
<span id="cb74-6"><a href="#cb74-6" aria-hidden="true"></a>countGets <span class="ot">=</span> <span class="dt">After</span> (<span class="dt">Getter</span> <span class="op">:&amp;&amp;:</span> <span class="dt">NotAt</span> (<span class="dt">AtVar</span> <span class="st">&quot;countSet&quot;</span>) <span class="op">:&amp;&amp;:</span> <span class="dt">NotAt</span> (<span class="dt">AtVar</span> <span class="st">&quot;countGet&quot;</span>))</span>
<span id="cb74-7"><a href="#cb74-7" aria-hidden="true"></a>                  (<span class="st">&quot;countGet&quot;</span> <span class="op">:=</span> (<span class="dt">IVar</span> <span class="st">&quot;countGet&quot;</span> <span class="op">:+:</span> <span class="dt">Lit</span> <span class="dv">1</span>))</span></code></pre></div>
<p>The rather laborious PointCut definition is used to select access to all variable apart from <code>countGet</code> and <code>countSet</code>. This is required as the action part of the <code>Advices</code> are normal MiniPascal statements that are executed by the same interpreter as the main program which is to be extended by advices. If those filters were not present execution of those advices would result in non-terminating loops, as the action statements also access variables.</p>
<p>A complete AspectPascal program will now consist of a <code>stmt</code> (the original program) plus a list of <code>advices</code> that should be executed to implement the cross-cutting aspects:</p>
<div class="sourceCode" id="cb75"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb75-1"><a href="#cb75-1" aria-hidden="true"></a><span class="co">-- | Aspects are just a list of Advices</span></span>
<span id="cb75-2"><a href="#cb75-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Aspects</span> <span class="ot">=</span> [<span class="dt">Advice</span>]</span></code></pre></div>
<p>In order to extend our interpreter to execute additional behaviour decribed in <code>advices</code> we will have to provide all evaluating functions with access to the <code>Aspects</code>. As the <code>Aspects</code> will not be modified at runtime the typical solution would be to provide them by a <code>Reader Aspects</code> monad. We already have learnt that we can use a MonadTransformer to stack our existing <code>State</code> monad with a <code>Reader</code> monad. The respective Transformer is <code>ReaderT</code>. We thus extend the signature of the evaluation functions accordingly, eg:</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true"></a><span class="co">-- from:</span></span>
<span id="cb76-2"><a href="#cb76-2" aria-hidden="true"></a><span class="ot">iexp ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">IExp</span> <span class="ot">-&gt;</span> m <span class="dt">Int</span></span>
<span id="cb76-3"><a href="#cb76-3" aria-hidden="true"></a></span>
<span id="cb76-4"><a href="#cb76-4" aria-hidden="true"></a><span class="co">-- to:</span></span>
<span id="cb76-5"><a href="#cb76-5" aria-hidden="true"></a><span class="ot">iexp ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">IExp</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Aspects</span> m <span class="dt">Int</span></span></code></pre></div>
<p>Apart from extendig the signatures we have to modify all places where variables are accessed to apply the matching advices. So for instance in the equation for <code>iexp (IVar i)</code> we specify that <code>(getVar i)</code> should be executed with applying all advices that match the read access to variable <code>i</code> – that is <code>(Get i)</code> by writing:</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true"></a>iexp (<span class="dt">IVar</span> i)    <span class="ot">=</span> withAdvice (<span class="dt">Get</span> i) (getVar i)</span></code></pre></div>
<p>So the complete definition of <code>iexp</code> is:</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb78-1"><a href="#cb78-1" aria-hidden="true"></a><span class="ot">iexp ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">IExp</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Aspects</span> m <span class="dt">Int</span></span>
<span id="cb78-2"><a href="#cb78-2" aria-hidden="true"></a>iexp (<span class="dt">Lit</span> n) <span class="ot">=</span> <span class="fu">return</span> n</span>
<span id="cb78-3"><a href="#cb78-3" aria-hidden="true"></a>iexp (e1 <span class="op">:+:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">+</span>) (iexp e1) (iexp e2)</span>
<span id="cb78-4"><a href="#cb78-4" aria-hidden="true"></a>iexp (e1 <span class="op">:*:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">*</span>) (iexp e1) (iexp e2)</span>
<span id="cb78-5"><a href="#cb78-5" aria-hidden="true"></a>iexp (e1 <span class="op">:-:</span> e2) <span class="ot">=</span> liftM2 (<span class="op">-</span>) (iexp e1) (iexp e2)</span>
<span id="cb78-6"><a href="#cb78-6" aria-hidden="true"></a>iexp (e1 <span class="op">:/:</span> e2) <span class="ot">=</span> liftM2 <span class="fu">div</span> (iexp e1) (iexp e2)</span>
<span id="cb78-7"><a href="#cb78-7" aria-hidden="true"></a>iexp (<span class="dt">IVar</span> i)    <span class="ot">=</span> withAdvice (<span class="dt">Get</span> i) (getVar i)</span></code></pre></div>
<blockquote>
<p>[…] if <code>c</code> is a computation corresponding to some join point with description <code>d</code>, then <code>withAdvice d c</code> wraps the execution of <code>c</code> with the execution of the appropriate Before and After advice, if any:</p>
</blockquote>
<div class="sourceCode" id="cb79"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true"></a><span class="ot">withAdvice ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">JoinPointDesc</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Aspects</span> m a <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Aspects</span> m a</span>
<span id="cb79-2"><a href="#cb79-2" aria-hidden="true"></a>withAdvice d c <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb79-3"><a href="#cb79-3" aria-hidden="true"></a>    aspects <span class="ot">&lt;-</span> ask                <span class="co">-- obtaining the Aspects from the Reader monad</span></span>
<span id="cb79-4"><a href="#cb79-4" aria-hidden="true"></a>    <span class="fu">mapM_</span> stmt (before d aspects) <span class="co">-- execute the statements of all Before advices</span></span>
<span id="cb79-5"><a href="#cb79-5" aria-hidden="true"></a>    x <span class="ot">&lt;-</span> c                        <span class="co">-- execute the actual business logic</span></span>
<span id="cb79-6"><a href="#cb79-6" aria-hidden="true"></a>    <span class="fu">mapM_</span> stmt (after d aspects)  <span class="co">-- execute the statements of all After advices</span></span>
<span id="cb79-7"><a href="#cb79-7" aria-hidden="true"></a>    <span class="fu">return</span> x</span>
<span id="cb79-8"><a href="#cb79-8" aria-hidden="true"></a></span>
<span id="cb79-9"><a href="#cb79-9" aria-hidden="true"></a><span class="co">-- collect the statements of Before and After advices matching the join point</span></span>
<span id="cb79-10"><a href="#cb79-10" aria-hidden="true"></a>before,<span class="ot"> after ::</span> <span class="dt">JoinPointDesc</span> <span class="ot">-&gt;</span> <span class="dt">Aspects</span> <span class="ot">-&gt;</span> [<span class="dt">Stmt</span>]</span>
<span id="cb79-11"><a href="#cb79-11" aria-hidden="true"></a>before d as <span class="ot">=</span> [s <span class="op">|</span> <span class="dt">Before</span> c s <span class="ot">&lt;-</span> as, includes c d]</span>
<span id="cb79-12"><a href="#cb79-12" aria-hidden="true"></a>after  d as <span class="ot">=</span> [s <span class="op">|</span> <span class="dt">After</span>  c s <span class="ot">&lt;-</span> as, includes c d]</span></code></pre></div>
<p>In the same way the equation for variable assignment <code>stmt (i := e)</code> we specify that <code>(setVar i x)</code> should be executed with applying all advices that match the write access to variable <code>i</code> – that is <code>(Set i)</code> by noting:</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true"></a>stmt (i <span class="op">:=</span> e)   <span class="ot">=</span> <span class="kw">do</span> x <span class="ot">&lt;-</span> iexp e; withAdvice (<span class="dt">Set</span> i) (setVar i x)</span></code></pre></div>
<p>The complete implementation for <code>stmt</code> then looks like follows:</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb81-1"><a href="#cb81-1" aria-hidden="true"></a><span class="ot">stmt ::</span> <span class="dt">MonadState</span> <span class="dt">Store</span> m <span class="ot">=&gt;</span> <span class="dt">Stmt</span> <span class="ot">-&gt;</span> <span class="dt">ReaderT</span> <span class="dt">Aspects</span> m ()</span>
<span id="cb81-2"><a href="#cb81-2" aria-hidden="true"></a>stmt <span class="dt">Skip</span>       <span class="ot">=</span> <span class="fu">return</span> ()</span>
<span id="cb81-3"><a href="#cb81-3" aria-hidden="true"></a>stmt (i <span class="op">:=</span> e)   <span class="ot">=</span> <span class="kw">do</span> x <span class="ot">&lt;-</span> iexp e; withAdvice (<span class="dt">Set</span> i) (setVar i x)</span>
<span id="cb81-4"><a href="#cb81-4" aria-hidden="true"></a>stmt (<span class="dt">Begin</span> ss) <span class="ot">=</span> <span class="fu">mapM_</span> stmt ss</span>
<span id="cb81-5"><a href="#cb81-5" aria-hidden="true"></a>stmt (<span class="dt">If</span> b t e) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb81-6"><a href="#cb81-6" aria-hidden="true"></a>    x <span class="ot">&lt;-</span> bexp b</span>
<span id="cb81-7"><a href="#cb81-7" aria-hidden="true"></a>    <span class="kw">if</span> x <span class="kw">then</span> stmt t</span>
<span id="cb81-8"><a href="#cb81-8" aria-hidden="true"></a>         <span class="kw">else</span> stmt e</span>
<span id="cb81-9"><a href="#cb81-9" aria-hidden="true"></a>stmt (<span class="dt">While</span> b t) <span class="ot">=</span> loop</span>
<span id="cb81-10"><a href="#cb81-10" aria-hidden="true"></a>    <span class="kw">where</span> loop <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb81-11"><a href="#cb81-11" aria-hidden="true"></a>            x <span class="ot">&lt;-</span> bexp b</span>
<span id="cb81-12"><a href="#cb81-12" aria-hidden="true"></a>            when x <span class="op">$</span> stmt t <span class="op">&gt;&gt;</span> loop</span></code></pre></div>
<p>Finally we have to extend <code>run</code> function to properly handle the monad stack:</p>
<div class="sourceCode" id="cb82"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true"></a><span class="ot">run ::</span> <span class="dt">Aspects</span> <span class="ot">-&gt;</span> <span class="dt">Stmt</span> <span class="ot">-&gt;</span> <span class="dt">Store</span></span>
<span id="cb82-2"><a href="#cb82-2" aria-hidden="true"></a>run a s <span class="ot">=</span> execState (runReaderT (stmt s) a) (Map.fromList [])</span>
<span id="cb82-3"><a href="#cb82-3" aria-hidden="true"></a></span>
<span id="cb82-4"><a href="#cb82-4" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb82-5"><a href="#cb82-5" aria-hidden="true"></a>ghci<span class="op">&gt;</span> run [] program</span>
<span id="cb82-6"><a href="#cb82-6" aria-hidden="true"></a>fromList [(<span class="st">&quot;count&quot;</span>,<span class="dv">10</span>),(<span class="st">&quot;total&quot;</span>,<span class="dv">55</span>)]</span>
<span id="cb82-7"><a href="#cb82-7" aria-hidden="true"></a></span>
<span id="cb82-8"><a href="#cb82-8" aria-hidden="true"></a>ghci<span class="op">&gt;</span> run [countSets] program</span>
<span id="cb82-9"><a href="#cb82-9" aria-hidden="true"></a>fromList [(<span class="st">&quot;count&quot;</span>,<span class="dv">10</span>),(<span class="st">&quot;countSet&quot;</span>,<span class="dv">22</span>),(<span class="st">&quot;total&quot;</span>,<span class="dv">55</span>)]</span>
<span id="cb82-10"><a href="#cb82-10" aria-hidden="true"></a></span>
<span id="cb82-11"><a href="#cb82-11" aria-hidden="true"></a>ghci<span class="op">&gt;</span> run [countSets, countGets] program</span>
<span id="cb82-12"><a href="#cb82-12" aria-hidden="true"></a>fromList [(<span class="st">&quot;count&quot;</span>,<span class="dv">10</span>),(<span class="st">&quot;countGet&quot;</span>,<span class="dv">41</span>),(<span class="st">&quot;countSet&quot;</span>,<span class="dv">22</span>),(<span class="st">&quot;total&quot;</span>,<span class="dv">55</span>)]</span></code></pre></div>
<p>So executing the program with an empty list of advices yields the same result as executing the program with initial interpreter. Once we execute the program with the advices <code>countGets</code> and <code>countSets</code> the resulting map contains values for the variables <code>countGet</code> and <code>countSet</code> which have been incremented by the statements of both advices.</p>
<p>We have utilized Monad Transformers to extend our original interpreter in a minamally invasive way, to provide a formal and executable semantics for a simple aspect-oriented language in the style of AspectJ.</p>
<!-- 
### ? → MonadFix

tbd.
-->
<h3 id="composite-semigroup-monoid">Composite → SemiGroup → Monoid</h3>
<blockquote>
<p>In software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes a group of objects that is treated the same way as a single instance of the same type of object. The intent of a composite is to “compose” objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly. (Quoted from <a href="https://en.wikipedia.org/wiki/Composite_pattern">Wikipedia</a>)</p>
</blockquote>
<p>A typical example for the composite pattern is the hierarchical grouping of test cases to TestSuites in a testing framework. Take for instance the following class diagram from the <a href="http://junit.sourceforge.net/doc/cookstour/cookstour.htm">JUnit cooks tour</a> which shows how JUnit applies the Composite pattern to group <code>TestCases</code> to <code>TestSuites</code> while both of them implement the <code>Test</code> interface:</p>
<figure>
<img src="http://junit.sourceforge.net/doc/cookstour/Image5.gif" alt="" /><figcaption>Composite Pattern used in Junit</figcaption>
</figure>
<p>In Haskell we could model this kind of hierachy with an algebraic data type (ADT):</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb83-1"><a href="#cb83-1" aria-hidden="true"></a><span class="co">-- the composite data structure: a Test can be either a single TestCase</span></span>
<span id="cb83-2"><a href="#cb83-2" aria-hidden="true"></a><span class="co">-- or a TestSuite holding a list of Tests</span></span>
<span id="cb83-3"><a href="#cb83-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Test</span> <span class="ot">=</span> <span class="dt">TestCase</span> <span class="dt">TestCase</span></span>
<span id="cb83-4"><a href="#cb83-4" aria-hidden="true"></a>          <span class="op">|</span> <span class="dt">TestSuite</span> [<span class="dt">Test</span>]</span>
<span id="cb83-5"><a href="#cb83-5" aria-hidden="true"></a></span>
<span id="cb83-6"><a href="#cb83-6" aria-hidden="true"></a><span class="co">-- a test case produces a boolean when executed</span></span>
<span id="cb83-7"><a href="#cb83-7" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">TestCase</span> <span class="ot">=</span> () <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>The function <code>run</code> as defined below can either execute a single TestCase or a composite TestSuite:</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true"></a><span class="co">-- execution of a Test.</span></span>
<span id="cb84-2"><a href="#cb84-2" aria-hidden="true"></a><span class="ot">run ::</span> <span class="dt">Test</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb84-3"><a href="#cb84-3" aria-hidden="true"></a>run (<span class="dt">TestCase</span> t)  <span class="ot">=</span> t () <span class="co">-- evaluating the TestCase by applying t to ()</span></span>
<span id="cb84-4"><a href="#cb84-4" aria-hidden="true"></a>run (<span class="dt">TestSuite</span> l) <span class="ot">=</span> <span class="fu">all</span> (<span class="dt">True</span> <span class="op">==</span>) (<span class="fu">map</span> run l) <span class="co">-- running all tests in l and return True if all tests pass</span></span>
<span id="cb84-5"><a href="#cb84-5" aria-hidden="true"></a></span>
<span id="cb84-6"><a href="#cb84-6" aria-hidden="true"></a><span class="co">-- a few most simple test cases</span></span>
<span id="cb84-7"><a href="#cb84-7" aria-hidden="true"></a><span class="ot">t1 ::</span> <span class="dt">Test</span></span>
<span id="cb84-8"><a href="#cb84-8" aria-hidden="true"></a>t1 <span class="ot">=</span> <span class="dt">TestCase</span> (\() <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb84-9"><a href="#cb84-9" aria-hidden="true"></a><span class="ot">t2 ::</span> <span class="dt">Test</span></span>
<span id="cb84-10"><a href="#cb84-10" aria-hidden="true"></a>t2 <span class="ot">=</span> <span class="dt">TestCase</span> (\() <span class="ot">-&gt;</span> <span class="dt">True</span>)</span>
<span id="cb84-11"><a href="#cb84-11" aria-hidden="true"></a><span class="ot">t3 ::</span> <span class="dt">Test</span></span>
<span id="cb84-12"><a href="#cb84-12" aria-hidden="true"></a>t3 <span class="ot">=</span> <span class="dt">TestCase</span> (\() <span class="ot">-&gt;</span> <span class="dt">False</span>)</span>
<span id="cb84-13"><a href="#cb84-13" aria-hidden="true"></a><span class="co">-- collecting all test cases in a TestSuite</span></span>
<span id="cb84-14"><a href="#cb84-14" aria-hidden="true"></a>ts <span class="ot">=</span> <span class="dt">TestSuite</span> [t1,t2,t3]</span></code></pre></div>
<p>As run is of type <code>run :: Test -&gt; Bool</code> we can use it to execute single <code>TestCases</code> or complete <code>TestSuites</code>. Let’s try it in GHCI:</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb85-1"><a href="#cb85-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> run t1</span>
<span id="cb85-2"><a href="#cb85-2" aria-hidden="true"></a><span class="dt">True</span></span>
<span id="cb85-3"><a href="#cb85-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> run ts</span>
<span id="cb85-4"><a href="#cb85-4" aria-hidden="true"></a><span class="dt">False</span></span></code></pre></div>
<p>In order to aggregate TestComponents we follow the design of JUnit and define a function <code>addTest</code>. Adding two atomic Tests will result in a TestSuite holding a list with the two Tests. If a Test is added to a TestSuite, the test is added to the list of tests of the suite. Adding TestSuites will merge them.</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true"></a><span class="co">-- adding Tests</span></span>
<span id="cb86-2"><a href="#cb86-2" aria-hidden="true"></a><span class="ot">addTest ::</span> <span class="dt">Test</span> <span class="ot">-&gt;</span> <span class="dt">Test</span> <span class="ot">-&gt;</span> <span class="dt">Test</span></span>
<span id="cb86-3"><a href="#cb86-3" aria-hidden="true"></a>addTest t1<span class="op">@</span>(<span class="dt">TestCase</span> _) t2<span class="op">@</span>(<span class="dt">TestCase</span> _)   <span class="ot">=</span> <span class="dt">TestSuite</span> [t1,t2]</span>
<span id="cb86-4"><a href="#cb86-4" aria-hidden="true"></a>addTest t1<span class="op">@</span>(<span class="dt">TestCase</span> _) (<span class="dt">TestSuite</span> list)  <span class="ot">=</span> <span class="dt">TestSuite</span> ([t1] <span class="op">++</span> list)</span>
<span id="cb86-5"><a href="#cb86-5" aria-hidden="true"></a>addTest (<span class="dt">TestSuite</span> list) t2<span class="op">@</span>(<span class="dt">TestCase</span> _)  <span class="ot">=</span> <span class="dt">TestSuite</span> (list <span class="op">++</span> [t2])</span>
<span id="cb86-6"><a href="#cb86-6" aria-hidden="true"></a>addTest (<span class="dt">TestSuite</span> l1) (<span class="dt">TestSuite</span> l2)     <span class="ot">=</span> <span class="dt">TestSuite</span> (l1 <span class="op">++</span> l2)</span></code></pre></div>
<p>If we take a closer look at <code>addTest</code> we will see that it is a associative binary operation on the set of <code>Test</code>s.</p>
<p>In mathemathics a set with an associative binary operation is a <a href="https://en.wikipedia.org/wiki/Semigroup">Semigroup</a>.</p>
<p>We can thus make our type <code>Test</code> an instance of the type class <code>Semigroup</code> with the following declaration:</p>
<div class="sourceCode" id="cb87"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">Test</span> <span class="kw">where</span></span>
<span id="cb87-2"><a href="#cb87-2" aria-hidden="true"></a>    (<span class="op">&lt;&gt;</span>)   <span class="ot">=</span> addTest</span></code></pre></div>
<p>What’s not visible from the JUnit class diagram is how typical object oriented implementations will have to deal with null-references. That is the implementations would have to make sure that the methods <code>run</code> and <code>addTest</code> will handle empty references correctly. With Haskells algebraic data types we would rather make this explicit with a dedicated <code>Empty</code> element. Here are the changes we have to add to our code:</p>
<div class="sourceCode" id="cb88"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb88-1"><a href="#cb88-1" aria-hidden="true"></a><span class="co">-- the composite data structure: a Test can be Empty, a single TestCase</span></span>
<span id="cb88-2"><a href="#cb88-2" aria-hidden="true"></a><span class="co">-- or a TestSuite holding a list of Tests</span></span>
<span id="cb88-3"><a href="#cb88-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Test</span> <span class="ot">=</span> <span class="dt">Empty</span></span>
<span id="cb88-4"><a href="#cb88-4" aria-hidden="true"></a>          <span class="op">|</span> <span class="dt">TestCase</span> <span class="dt">TestCase</span></span>
<span id="cb88-5"><a href="#cb88-5" aria-hidden="true"></a>          <span class="op">|</span> <span class="dt">TestSuite</span> [<span class="dt">Test</span>]</span>
<span id="cb88-6"><a href="#cb88-6" aria-hidden="true"></a></span>
<span id="cb88-7"><a href="#cb88-7" aria-hidden="true"></a><span class="co">-- execution of a Test.</span></span>
<span id="cb88-8"><a href="#cb88-8" aria-hidden="true"></a><span class="ot">run ::</span> <span class="dt">Test</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb88-9"><a href="#cb88-9" aria-hidden="true"></a>run <span class="dt">Empty</span>         <span class="ot">=</span> <span class="dt">True</span> <span class="co">-- empty tests will pass</span></span>
<span id="cb88-10"><a href="#cb88-10" aria-hidden="true"></a>run (<span class="dt">TestCase</span> t)  <span class="ot">=</span> t () <span class="co">-- evaluating the TestCase by applying t to ()</span></span>
<span id="cb88-11"><a href="#cb88-11" aria-hidden="true"></a><span class="co">--run (TestSuite l) = foldr ((&amp;&amp;) . run) True l</span></span>
<span id="cb88-12"><a href="#cb88-12" aria-hidden="true"></a>run (<span class="dt">TestSuite</span> l) <span class="ot">=</span> <span class="fu">all</span> (<span class="dt">True</span> <span class="op">==</span>) (<span class="fu">map</span> run l) <span class="co">-- running all tests in l and return True if all tests pass</span></span>
<span id="cb88-13"><a href="#cb88-13" aria-hidden="true"></a></span>
<span id="cb88-14"><a href="#cb88-14" aria-hidden="true"></a><span class="co">-- addTesting Tests</span></span>
<span id="cb88-15"><a href="#cb88-15" aria-hidden="true"></a><span class="ot">addTest ::</span> <span class="dt">Test</span> <span class="ot">-&gt;</span> <span class="dt">Test</span> <span class="ot">-&gt;</span> <span class="dt">Test</span></span>
<span id="cb88-16"><a href="#cb88-16" aria-hidden="true"></a>addTest <span class="dt">Empty</span> t                           <span class="ot">=</span> t</span>
<span id="cb88-17"><a href="#cb88-17" aria-hidden="true"></a>addTest t <span class="dt">Empty</span>                           <span class="ot">=</span> t</span>
<span id="cb88-18"><a href="#cb88-18" aria-hidden="true"></a>addTest t1<span class="op">@</span>(<span class="dt">TestCase</span> _) t2<span class="op">@</span>(<span class="dt">TestCase</span> _)   <span class="ot">=</span> <span class="dt">TestSuite</span> [t1,t2]</span>
<span id="cb88-19"><a href="#cb88-19" aria-hidden="true"></a>addTest t1<span class="op">@</span>(<span class="dt">TestCase</span> _) (<span class="dt">TestSuite</span> list)  <span class="ot">=</span> <span class="dt">TestSuite</span> ([t1] <span class="op">++</span> list)</span>
<span id="cb88-20"><a href="#cb88-20" aria-hidden="true"></a>addTest (<span class="dt">TestSuite</span> list) t2<span class="op">@</span>(<span class="dt">TestCase</span> _)  <span class="ot">=</span> <span class="dt">TestSuite</span> (list <span class="op">++</span> [t2])</span>
<span id="cb88-21"><a href="#cb88-21" aria-hidden="true"></a>addTest (<span class="dt">TestSuite</span> l1) (<span class="dt">TestSuite</span> l2)     <span class="ot">=</span> <span class="dt">TestSuite</span> (l1 <span class="op">++</span> l2)</span></code></pre></div>
<p>From our additions it’s obvious that <code>Empty</code> is the identity element of the <code>addTest</code> function. In Algebra a Semigroup with an identity element is called <em>Monoid</em>:</p>
<blockquote>
<p>In abstract algebra, […] a monoid is an algebraic structure with a single associative binary operation and an identity element. <a href="https://en.wikipedia.org/wiki/Monoid">Quoted from Wikipedia</a></p>
</blockquote>
<p>With haskell we can declare <code>Test</code> as an instance of the <code>Monoid</code> type class by defining:</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">Test</span> <span class="kw">where</span></span>
<span id="cb89-2"><a href="#cb89-2" aria-hidden="true"></a>    <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">Empty</span></span></code></pre></div>
<p>We can now use all functions provided by the <code>Monoid</code> type class to work with our <code>Test</code>:</p>
<div class="sourceCode" id="cb90"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb90-1"><a href="#cb90-1" aria-hidden="true"></a>compositeDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb90-2"><a href="#cb90-2" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run <span class="op">$</span> t1 <span class="op">&lt;&gt;</span> t2</span>
<span id="cb90-3"><a href="#cb90-3" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run <span class="op">$</span> t1 <span class="op">&lt;&gt;</span> t2 <span class="op">&lt;&gt;</span> t3</span></code></pre></div>
<p>We can also use the function <code>mconcat :: Monoid a =&gt; [a] -&gt; a</code> on a list of <code>Tests</code>: mconcat composes a list of Tests into a single Test. That’s exactly the mechanism of forming a TestSuite from atomic TestCases.</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true"></a>compositeDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb91-2"><a href="#cb91-2" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run <span class="op">$</span> <span class="fu">mconcat</span> [t1,t2]</span>
<span id="cb91-3"><a href="#cb91-3" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run <span class="op">$</span> <span class="fu">mconcat</span> [t1,t2,t3]</span></code></pre></div>
<p>This particular feature of <code>mconcat :: Monoid a =&gt; [a] -&gt; a</code> to condense a list of Monoids to a single Monoid can be used to drastically simplify the design of our test framework.</p>
<p>We need just one more hint from our mathematician friends:</p>
<blockquote>
<p>Functions are monoids if they return monoids <a href="http://blog.ploeh.dk/2018/05/17/composite-as-a-monoid-a-business-rules-example/">Quoted from blog.ploeh.dk</a></p>
</blockquote>
<p>Currently our <code>TestCases</code> are defined as functions yielding boolean values:</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb92-1"><a href="#cb92-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">TestCase</span> <span class="ot">=</span> () <span class="ot">-&gt;</span> <span class="dt">Bool</span></span></code></pre></div>
<p>If <code>Bool</code> was a <code>Monoid</code> we could use <code>mconcat</code> to form test suite aggregates. <code>Bool</code> in itself is not a Monoid; but together with a binary associative operation like <code>(&amp;&amp;)</code> or <code>(||)</code> it will form a Monoid.</p>
<p>The intuitive semantics of a TestSuite is that a whole Suite is “green” only when all enclosed TestCases succeed. That is the conjunction of all TestCases must return <code>True</code>.</p>
<p>So we are looking for the Monoid of boolean values under conjunction <code>(&amp;&amp;)</code>. In Haskell this Monoid is called <code>All</code>):</p>
<div class="sourceCode" id="cb93"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb93-1"><a href="#cb93-1" aria-hidden="true"></a><span class="co">-- | Boolean monoid under conjunction (&#39;&amp;&amp;&#39;).</span></span>
<span id="cb93-2"><a href="#cb93-2" aria-hidden="true"></a><span class="co">-- &gt;&gt;&gt; getAll (All True &lt;&gt; mempty &lt;&gt; All False)</span></span>
<span id="cb93-3"><a href="#cb93-3" aria-hidden="true"></a><span class="co">-- False</span></span>
<span id="cb93-4"><a href="#cb93-4" aria-hidden="true"></a><span class="co">-- &gt;&gt;&gt; getAll (mconcat (map (\x -&gt; All (even x)) [2,4,6,7,8]))</span></span>
<span id="cb93-5"><a href="#cb93-5" aria-hidden="true"></a><span class="co">-- False</span></span>
<span id="cb93-6"><a href="#cb93-6" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">All</span> <span class="ot">=</span> <span class="dt">All</span> {<span class="ot"> getAll ::</span> <span class="dt">Bool</span> }</span>
<span id="cb93-7"><a href="#cb93-7" aria-hidden="true"></a></span>
<span id="cb93-8"><a href="#cb93-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">All</span> <span class="kw">where</span></span>
<span id="cb93-9"><a href="#cb93-9" aria-hidden="true"></a>        (<span class="op">&lt;&gt;</span>) <span class="ot">=</span> coerce (<span class="op">&amp;&amp;</span>)</span>
<span id="cb93-10"><a href="#cb93-10" aria-hidden="true"></a></span>
<span id="cb93-11"><a href="#cb93-11" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">All</span> <span class="kw">where</span></span>
<span id="cb93-12"><a href="#cb93-12" aria-hidden="true"></a>        <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">All</span> <span class="dt">True</span></span></code></pre></div>
<p>Making use of <code>All</code> our improved definition of TestCases is as follows:</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">SmartTestCase</span> <span class="ot">=</span> () <span class="ot">-&gt;</span> <span class="dt">All</span></span></code></pre></div>
<p>Now our test cases do not directly return a boolean value but an <code>All</code> wrapper, which allows automatic conjunction of test results to a single value. Here are our redefined TestCases:</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true"></a><span class="ot">tc1 ::</span> <span class="dt">SmartTestCase</span></span>
<span id="cb95-2"><a href="#cb95-2" aria-hidden="true"></a>tc1 () <span class="ot">=</span> <span class="dt">All</span> <span class="dt">True</span></span>
<span id="cb95-3"><a href="#cb95-3" aria-hidden="true"></a><span class="ot">tc2 ::</span> <span class="dt">SmartTestCase</span></span>
<span id="cb95-4"><a href="#cb95-4" aria-hidden="true"></a>tc2 () <span class="ot">=</span> <span class="dt">All</span> <span class="dt">True</span></span>
<span id="cb95-5"><a href="#cb95-5" aria-hidden="true"></a><span class="ot">tc3 ::</span> <span class="dt">SmartTestCase</span></span>
<span id="cb95-6"><a href="#cb95-6" aria-hidden="true"></a>tc3 () <span class="ot">=</span> <span class="dt">All</span> <span class="dt">False</span></span></code></pre></div>
<p>We now implement a new evaluation function <code>run'</code> which evaluates a <code>SmartTestCase</code> (which may be either an atomic TestCase or a TestSuite assembled by <code>mconcat</code>) to a single boolean result.</p>
<div class="sourceCode" id="cb96"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb96-1"><a href="#cb96-1" aria-hidden="true"></a><span class="ot">run&#39; ::</span> <span class="dt">SmartTestCase</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb96-2"><a href="#cb96-2" aria-hidden="true"></a>run&#39; tc <span class="ot">=</span> getAll <span class="op">$</span> tc ()  </span></code></pre></div>
<p>This version of <code>run</code> is much simpler than the original and we can completely avoid the rather laborious <code>addTest</code> function. We also don’t need any composite type <code>Test</code>. By just sticking to the Haskell built-in type classes we achieve cleanly designed functionality with just a few lines of code.</p>
<div class="sourceCode" id="cb97"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb97-1"><a href="#cb97-1" aria-hidden="true"></a>compositeDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb97-2"><a href="#cb97-2" aria-hidden="true"></a>    <span class="co">-- execute a single test case</span></span>
<span id="cb97-3"><a href="#cb97-3" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run&#39; tc1</span>
<span id="cb97-4"><a href="#cb97-4" aria-hidden="true"></a></span>
<span id="cb97-5"><a href="#cb97-5" aria-hidden="true"></a>    <span class="co">--- execute a complex test suite</span></span>
<span id="cb97-6"><a href="#cb97-6" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run&#39; <span class="op">$</span> <span class="fu">mconcat</span> [tc1,tc2]</span>
<span id="cb97-7"><a href="#cb97-7" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> run&#39; <span class="op">$</span> <span class="fu">mconcat</span> [tc1,tc2,tc3]</span></code></pre></div>
<p>For more details on Composite as a Monoid please refer to the following blog: <a href="http://blog.ploeh.dk/2018/03/12/composite-as-a-monoid/">Composite as Monoid</a></p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Composite.hs">Sourcecode for this section</a></p>
<!-- 
### ? → Alternative, MonadPlus, ArrowPlus
-->
<h3 id="visitor-foldable">Visitor → Foldable</h3>
<blockquote>
<p>[…] the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existent object structures without modifying the structures. It is one way to follow the open/closed principle. (Quoted from <a href="https://en.wikipedia.org/wiki/Visitor_pattern">Wikipedia</a>)</p>
</blockquote>
<p>In functional languages - and Haskell in particular - we have a whole armada of tools serving this purpose:</p>
<ul>
<li>higher order functions like map, fold, filter and all their variants allow to “visit” lists</li>
<li>The Haskell type classes <code>Functor</code>, <code>Foldable</code>, <code>Traversable</code>, etc. provide a generic framework to allow visiting any algebraic datatype by just deriving one of these type classes.</li>
</ul>
<h4 id="using-foldable">Using Foldable</h4>
<div class="sourceCode" id="cb98"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb98-1"><a href="#cb98-1" aria-hidden="true"></a><span class="co">-- we are re-using the Exp data type from the Singleton example</span></span>
<span id="cb98-2"><a href="#cb98-2" aria-hidden="true"></a><span class="co">-- and transform it into a Foldable type:</span></span>
<span id="cb98-3"><a href="#cb98-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Foldable</span> <span class="dt">Exp</span> <span class="kw">where</span></span>
<span id="cb98-4"><a href="#cb98-4" aria-hidden="true"></a>    <span class="fu">foldMap</span> f (<span class="dt">Val</span> x)   <span class="ot">=</span> f x</span>
<span id="cb98-5"><a href="#cb98-5" aria-hidden="true"></a>    <span class="fu">foldMap</span> f (<span class="dt">Add</span> x y) <span class="ot">=</span> <span class="fu">foldMap</span> f x <span class="ot">`mappend`</span> <span class="fu">foldMap</span> f y</span>
<span id="cb98-6"><a href="#cb98-6" aria-hidden="true"></a>    <span class="fu">foldMap</span> f (<span class="dt">Mul</span> x y) <span class="ot">=</span> <span class="fu">foldMap</span> f x <span class="ot">`mappend`</span> <span class="fu">foldMap</span> f y</span>
<span id="cb98-7"><a href="#cb98-7" aria-hidden="true"></a></span>
<span id="cb98-8"><a href="#cb98-8" aria-hidden="true"></a><span class="ot">filterF ::</span> <span class="dt">Foldable</span> f <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> [a]</span>
<span id="cb98-9"><a href="#cb98-9" aria-hidden="true"></a>filterF p <span class="ot">=</span> <span class="fu">foldMap</span> (\a <span class="ot">-&gt;</span> <span class="kw">if</span> p a <span class="kw">then</span> [a] <span class="kw">else</span> [])</span>
<span id="cb98-10"><a href="#cb98-10" aria-hidden="true"></a></span>
<span id="cb98-11"><a href="#cb98-11" aria-hidden="true"></a>visitorDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb98-12"><a href="#cb98-12" aria-hidden="true"></a>    <span class="kw">let</span> <span class="fu">exp</span> <span class="ot">=</span> <span class="dt">Mul</span> (<span class="dt">Add</span> (<span class="dt">Val</span> <span class="dv">3</span>) (<span class="dt">Val</span> <span class="dv">2</span>))</span>
<span id="cb98-13"><a href="#cb98-13" aria-hidden="true"></a>                  (<span class="dt">Mul</span> (<span class="dt">Val</span> <span class="dv">4</span>) (<span class="dt">Val</span> <span class="dv">6</span>))</span>
<span id="cb98-14"><a href="#cb98-14" aria-hidden="true"></a>    <span class="fu">putStr</span> <span class="st">&quot;size of exp: &quot;</span></span>
<span id="cb98-15"><a href="#cb98-15" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">length</span> <span class="fu">exp</span></span>
<span id="cb98-16"><a href="#cb98-16" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;filter even numbers from tree&quot;</span></span>
<span id="cb98-17"><a href="#cb98-17" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> filterF <span class="fu">even</span> <span class="fu">exp</span></span></code></pre></div>
<p>By virtue of the instance declaration Exp becomes a Foldable instance an can be used with arbitrary functions defined on Foldable like <code>length</code> in the example.</p>
<p><code>foldMap</code> can for example be used to write a filtering function <code>filterF</code>that collects all elements matching a predicate into a list.</p>
<h5 id="alternative-approaches">Alternative approaches</h5>
<p><a href="http://blog.ploeh.dk/2018/06/25/visitor-as-a-sum-type/">Visitory as Sum type</a></p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Visitor.hs">Sourcecode for this section</a></p>
<h3 id="iterator-traversable">Iterator → Traversable</h3>
<blockquote>
<p>[…] the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container’s elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled. <a href="https://en.wikipedia.org/wiki/Iterator_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<h4 id="iterating-over-a-tree">Iterating over a Tree</h4>
<p>The most generic type class enabling iteration over algebraic data types is <code>Traversable</code> as it allows combinations of <code>map</code> and <code>fold</code> operations. We are re-using the <code>Exp</code> type from earlier examples to show what’s needed for enabling iteration in functional languages.</p>
<div class="sourceCode" id="cb99"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb99-1"><a href="#cb99-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Exp</span> <span class="kw">where</span></span>
<span id="cb99-2"><a href="#cb99-2" aria-hidden="true"></a>    <span class="fu">fmap</span> f (<span class="dt">Var</span> x)       <span class="ot">=</span> <span class="dt">Var</span> x</span>
<span id="cb99-3"><a href="#cb99-3" aria-hidden="true"></a>    <span class="fu">fmap</span> f (<span class="dt">Val</span> a)       <span class="ot">=</span> <span class="dt">Val</span> <span class="op">$</span> f a</span>
<span id="cb99-4"><a href="#cb99-4" aria-hidden="true"></a>    <span class="fu">fmap</span> f (<span class="dt">Add</span> x y)     <span class="ot">=</span> <span class="dt">Add</span> (<span class="fu">fmap</span> f x) (<span class="fu">fmap</span> f y)</span>
<span id="cb99-5"><a href="#cb99-5" aria-hidden="true"></a>    <span class="fu">fmap</span> f (<span class="dt">Mul</span> x y)     <span class="ot">=</span> <span class="dt">Mul</span> (<span class="fu">fmap</span> f x) (<span class="fu">fmap</span> f y)</span>
<span id="cb99-6"><a href="#cb99-6" aria-hidden="true"></a></span>
<span id="cb99-7"><a href="#cb99-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Traversable</span> <span class="dt">Exp</span> <span class="kw">where</span></span>
<span id="cb99-8"><a href="#cb99-8" aria-hidden="true"></a>    <span class="fu">traverse</span> g (<span class="dt">Var</span> x)   <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Var</span> x</span>
<span id="cb99-9"><a href="#cb99-9" aria-hidden="true"></a>    <span class="fu">traverse</span> g (<span class="dt">Val</span> x)   <span class="ot">=</span> <span class="dt">Val</span> <span class="op">&lt;$&gt;</span> g x</span>
<span id="cb99-10"><a href="#cb99-10" aria-hidden="true"></a>    <span class="fu">traverse</span> g (<span class="dt">Add</span> x y) <span class="ot">=</span> <span class="dt">Add</span> <span class="op">&lt;$&gt;</span> <span class="fu">traverse</span> g x <span class="op">&lt;*&gt;</span> <span class="fu">traverse</span> g y</span>
<span id="cb99-11"><a href="#cb99-11" aria-hidden="true"></a>    <span class="fu">traverse</span> g (<span class="dt">Mul</span> x y) <span class="ot">=</span> <span class="dt">Mul</span> <span class="op">&lt;$&gt;</span> <span class="fu">traverse</span> g x <span class="op">&lt;*&gt;</span> <span class="fu">traverse</span> g y</span></code></pre></div>
<p>With this declaration we can traverse an <code>Exp</code> tree:</p>
<div class="sourceCode" id="cb100"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb100-1"><a href="#cb100-1" aria-hidden="true"></a>iteratorDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb100-2"><a href="#cb100-2" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;Iterator -&gt; Traversable&quot;</span></span>
<span id="cb100-3"><a href="#cb100-3" aria-hidden="true"></a>    <span class="kw">let</span> <span class="fu">exp</span> <span class="ot">=</span> <span class="dt">Mul</span> (<span class="dt">Add</span> (<span class="dt">Val</span> <span class="dv">3</span>) (<span class="dt">Val</span> <span class="dv">1</span>))</span>
<span id="cb100-4"><a href="#cb100-4" aria-hidden="true"></a>                (<span class="dt">Mul</span> (<span class="dt">Val</span> <span class="dv">2</span>) (<span class="dt">Var</span> <span class="st">&quot;pi&quot;</span>))</span>
<span id="cb100-5"><a href="#cb100-5" aria-hidden="true"></a>        env <span class="ot">=</span> [(<span class="st">&quot;pi&quot;</span>, <span class="fu">pi</span>)]</span>
<span id="cb100-6"><a href="#cb100-6" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">traverse</span> (\x c <span class="ot">-&gt;</span> <span class="kw">if</span> <span class="fu">even</span> x <span class="kw">then</span> [x] <span class="kw">else</span> [<span class="dv">2</span><span class="op">*</span>x]) <span class="fu">exp</span> <span class="dv">0</span></span></code></pre></div>
<p>In this example we are touching all (nested) <code>Val</code> elements and multiply all odd values by 2.</p>
<h4 id="combining-traversal-operations">Combining traversal operations</h4>
<p>Compared with <code>Foldable</code> or <code>Functor</code> the declaration of a <code>Traversable</code> instance looks a bit intimidating. In particular the type signature of <code>traverse</code>:</p>
<div class="sourceCode" id="cb101"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb101-1"><a href="#cb101-1" aria-hidden="true"></a><span class="fu">traverse</span><span class="ot"> ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> f (t b)</span></code></pre></div>
<p>looks like quite a bit of over-engineering for simple traversals as in the above example.</p>
<p>In oder to explain the real power of the <code>Traversable</code> type class we will look at a more sophisticated example in this section. This example was taken from the paper <a href="https://www.cs.ox.ac.uk/jeremy.gibbons/publications/iterator.pdf">The Essence of the Iterator Pattern</a>.</p>
<p>The Unix utility <code>wc</code> is a good example for a traversal operation that performs several different tasks while traversing its input:</p>
<div class="sourceCode" id="cb102"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb102-1"><a href="#cb102-1" aria-hidden="true"></a><span class="bu">echo</span> <span class="st">&quot;counting lines, words and characters in one traversal&quot;</span> <span class="kw">|</span> <span class="fu">wc</span></span>
<span id="cb102-2"><a href="#cb102-2" aria-hidden="true"></a>      <span class="ex">1</span>       8      54</span></code></pre></div>
<p>The output simply means that our input has 1 line, 8 words and a total of 54 characters. Obviously an efficients implementation of <code>wc</code> will accumulate the three counters for lines, words and characters in a single pass of the input and will not run three iterations to compute the three counters separately.</p>
<p>Here is a Java implementation:</p>
<div class="sourceCode" id="cb103"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb103-1"><a href="#cb103-1" aria-hidden="true"></a><span class="kw">private</span> <span class="dt">static</span> <span class="dt">int</span>[] <span class="fu">wordCount</span>(<span class="bu">String</span> str) {</span>
<span id="cb103-2"><a href="#cb103-2" aria-hidden="true"></a>    <span class="dt">int</span> nl=<span class="dv">0</span>, nw=<span class="dv">0</span>, nc=<span class="dv">0</span>;         <span class="co">// number of lines, number of words, number of characters</span></span>
<span id="cb103-3"><a href="#cb103-3" aria-hidden="true"></a>    <span class="dt">boolean</span> readingWord = <span class="kw">false</span>;  <span class="co">// state information for &quot;parsing&quot; words</span></span>
<span id="cb103-4"><a href="#cb103-4" aria-hidden="true"></a>    <span class="kw">for</span> (<span class="bu">Character</span> c : <span class="fu">asList</span>(str)) {</span>
<span id="cb103-5"><a href="#cb103-5" aria-hidden="true"></a>        nc++;                     <span class="co">// count just any character</span></span>
<span id="cb103-6"><a href="#cb103-6" aria-hidden="true"></a>        <span class="kw">if</span> (c == <span class="ch">&#39;\n&#39;</span>) {</span>
<span id="cb103-7"><a href="#cb103-7" aria-hidden="true"></a>            nl++;                 <span class="co">// count only newlines</span></span>
<span id="cb103-8"><a href="#cb103-8" aria-hidden="true"></a>        }</span>
<span id="cb103-9"><a href="#cb103-9" aria-hidden="true"></a>        <span class="kw">if</span> (c == <span class="ch">&#39; &#39;</span> || c == <span class="ch">&#39;\n&#39;</span> || c == <span class="ch">&#39;\t&#39;</span>) {</span>
<span id="cb103-10"><a href="#cb103-10" aria-hidden="true"></a>            readingWord = <span class="kw">false</span>;  <span class="co">// when detecting white space, signal end of word</span></span>
<span id="cb103-11"><a href="#cb103-11" aria-hidden="true"></a>        } <span class="kw">else</span> <span class="kw">if</span> (readingWord == <span class="kw">false</span>) {</span>
<span id="cb103-12"><a href="#cb103-12" aria-hidden="true"></a>            readingWord = <span class="kw">true</span>;   <span class="co">// when switching from white space to characters, signal new word</span></span>
<span id="cb103-13"><a href="#cb103-13" aria-hidden="true"></a>            nw++;                 <span class="co">// increase the word counter only once while in a word</span></span>
<span id="cb103-14"><a href="#cb103-14" aria-hidden="true"></a>        }</span>
<span id="cb103-15"><a href="#cb103-15" aria-hidden="true"></a>    }</span>
<span id="cb103-16"><a href="#cb103-16" aria-hidden="true"></a>    <span class="kw">return</span> <span class="kw">new</span> <span class="dt">int</span>[]{nl,nw,nc};</span>
<span id="cb103-17"><a href="#cb103-17" aria-hidden="true"></a>}</span>
<span id="cb103-18"><a href="#cb103-18" aria-hidden="true"></a></span>
<span id="cb103-19"><a href="#cb103-19" aria-hidden="true"></a><span class="kw">private</span> <span class="dt">static</span> <span class="bu">List</span>&lt;<span class="bu">Character</span>&gt; <span class="fu">asList</span>(<span class="bu">String</span> str) {</span>
<span id="cb103-20"><a href="#cb103-20" aria-hidden="true"></a>    <span class="kw">return</span> str.<span class="fu">chars</span>().<span class="fu">mapToObj</span>(c -&gt; (<span class="dt">char</span>) c).<span class="fu">collect</span>(Collectors.<span class="fu">toList</span>());</span>
<span id="cb103-21"><a href="#cb103-21" aria-hidden="true"></a>}</span></code></pre></div>
<p>Please note that the <code>for (Character c : asList(str)) {...}</code> notation is just syntactic sugar for</p>
<div class="sourceCode" id="cb104"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb104-1"><a href="#cb104-1" aria-hidden="true"></a><span class="kw">for</span> (<span class="bu">Iterator</span>&lt;<span class="bu">Character</span>&gt; iter = <span class="fu">asList</span>(str).<span class="fu">iterator</span>(); iter.<span class="fu">hasNext</span>();) {</span>
<span id="cb104-2"><a href="#cb104-2" aria-hidden="true"></a>    <span class="bu">Character</span> c = iter.<span class="fu">next</span>();</span>
<span id="cb104-3"><a href="#cb104-3" aria-hidden="true"></a>    ...</span>
<span id="cb104-4"><a href="#cb104-4" aria-hidden="true"></a>}</span></code></pre></div>
<p>For efficiency reasons this solution may be okay, but from a design perspective the solution lacks clarity as the required logic for accumulating the three counters is heavily entangled within one code block. Just imagine how the complexity of the for-loop will increase once we have to add new features like counting bytes, counting white space or counting maximum line width.</p>
<p>So we would like to be able to isolate the different counting algorithms (<em>separation of concerns</em>) and be able to combine them in a way that provides efficient one-time traversal.</p>
<p>We start with the simple task of character counting:</p>
<div class="sourceCode" id="cb105"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb105-1"><a href="#cb105-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Count</span> <span class="ot">=</span> <span class="dt">Const</span> (<span class="dt">Sum</span> <span class="dt">Integer</span>)</span>
<span id="cb105-2"><a href="#cb105-2" aria-hidden="true"></a></span>
<span id="cb105-3"><a href="#cb105-3" aria-hidden="true"></a><span class="ot">count ::</span> a <span class="ot">-&gt;</span> <span class="dt">Count</span> b</span>
<span id="cb105-4"><a href="#cb105-4" aria-hidden="true"></a>count _ <span class="ot">=</span> <span class="dt">Const</span> <span class="dv">1</span></span>
<span id="cb105-5"><a href="#cb105-5" aria-hidden="true"></a></span>
<span id="cb105-6"><a href="#cb105-6" aria-hidden="true"></a><span class="ot">cciBody ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Count</span> a</span>
<span id="cb105-7"><a href="#cb105-7" aria-hidden="true"></a>cciBody <span class="ot">=</span> count</span>
<span id="cb105-8"><a href="#cb105-8" aria-hidden="true"></a></span>
<span id="cb105-9"><a href="#cb105-9" aria-hidden="true"></a><span class="ot">cci ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Count</span> [a]</span>
<span id="cb105-10"><a href="#cb105-10" aria-hidden="true"></a>cci <span class="ot">=</span> <span class="fu">traverse</span> cciBody</span>
<span id="cb105-11"><a href="#cb105-11" aria-hidden="true"></a></span>
<span id="cb105-12"><a href="#cb105-12" aria-hidden="true"></a><span class="co">-- and then in ghci:</span></span>
<span id="cb105-13"><a href="#cb105-13" aria-hidden="true"></a><span class="op">&gt;</span> cci <span class="st">&quot;hello world&quot;</span></span>
<span id="cb105-14"><a href="#cb105-14" aria-hidden="true"></a><span class="dt">Const</span> (<span class="dt">Sum</span> {getSum <span class="ot">=</span> <span class="dv">11</span>})</span></code></pre></div>
<p>For each character we just emit a <code>Const 1</code> which are elements of type <code>Const (Sum Integer)</code>. As <code>(Sum Integer)</code> is the monoid of Integers under addition, this design allows automatic summation over all collected <code>Const</code> values.</p>
<p>The next step of counting newlines looks similar:</p>
<div class="sourceCode" id="cb106"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb106-1"><a href="#cb106-1" aria-hidden="true"></a><span class="co">-- return (Sum 1) if true, else (Sum 0)</span></span>
<span id="cb106-2"><a href="#cb106-2" aria-hidden="true"></a><span class="ot">test ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> <span class="dt">Sum</span> <span class="dt">Integer</span></span>
<span id="cb106-3"><a href="#cb106-3" aria-hidden="true"></a>test b <span class="ot">=</span> <span class="dt">Sum</span> <span class="op">$</span> <span class="kw">if</span> b <span class="kw">then</span> <span class="dv">1</span> <span class="kw">else</span> <span class="dv">0</span></span>
<span id="cb106-4"><a href="#cb106-4" aria-hidden="true"></a></span>
<span id="cb106-5"><a href="#cb106-5" aria-hidden="true"></a><span class="co">-- use the test function to emit (Sum 1) only when a newline char is detected</span></span>
<span id="cb106-6"><a href="#cb106-6" aria-hidden="true"></a><span class="ot">lciBody ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Count</span> a</span>
<span id="cb106-7"><a href="#cb106-7" aria-hidden="true"></a>lciBody c <span class="ot">=</span> <span class="dt">Const</span> <span class="op">$</span> test (c <span class="op">==</span> <span class="ch">&#39;\n&#39;</span>)</span>
<span id="cb106-8"><a href="#cb106-8" aria-hidden="true"></a></span>
<span id="cb106-9"><a href="#cb106-9" aria-hidden="true"></a><span class="co">-- define the linecount using traverse</span></span>
<span id="cb106-10"><a href="#cb106-10" aria-hidden="true"></a><span class="ot">lci ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Count</span> [a]</span>
<span id="cb106-11"><a href="#cb106-11" aria-hidden="true"></a>lci <span class="ot">=</span> <span class="fu">traverse</span> lciBody</span>
<span id="cb106-12"><a href="#cb106-12" aria-hidden="true"></a></span>
<span id="cb106-13"><a href="#cb106-13" aria-hidden="true"></a><span class="co">-- and the in ghci:</span></span>
<span id="cb106-14"><a href="#cb106-14" aria-hidden="true"></a><span class="op">&gt;</span> lci <span class="st">&quot;hello \n world&quot;</span></span>
<span id="cb106-15"><a href="#cb106-15" aria-hidden="true"></a><span class="dt">Const</span> (<span class="dt">Sum</span> {getSum <span class="ot">=</span> <span class="dv">1</span>})</span></code></pre></div>
<p>Now let’s try to combine character counting and line counting. In order to match the type declaration for <code>traverse</code>:</p>
<div class="sourceCode" id="cb107"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb107-1"><a href="#cb107-1" aria-hidden="true"></a><span class="fu">traverse</span><span class="ot"> ::</span> (<span class="dt">Traversable</span> t, <span class="dt">Applicative</span> f) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> f b) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> f (t b)</span></code></pre></div>
<p>We had to define <code>cciBody</code> and <code>lciBody</code> so that their return types are <code>Applicative Functors</code>. The good news is that the product of two <code>Applicatives</code> is again an <code>Applicative</code> (the same holds true for Composition of <code>Applicatives</code>). With this knowledge we can now use <code>traverse</code> to use the product of <code>cciBody</code> and <code>lciBody</code>:</p>
<div class="sourceCode" id="cb108"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb108-1"><a href="#cb108-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.Functor.Product</span>             <span class="co">-- Product of Functors</span></span>
<span id="cb108-2"><a href="#cb108-2" aria-hidden="true"></a></span>
<span id="cb108-3"><a href="#cb108-3" aria-hidden="true"></a><span class="co">-- define infix operator for building a Functor Product</span></span>
<span id="cb108-4"><a href="#cb108-4" aria-hidden="true"></a><span class="ot">(&lt;#&gt;) ::</span> (<span class="dt">Functor</span> m, <span class="dt">Functor</span> n) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> n b) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Product</span> m n b)</span>
<span id="cb108-5"><a href="#cb108-5" aria-hidden="true"></a>(f <span class="op">&lt;#&gt;</span> g) y <span class="ot">=</span> <span class="dt">Pair</span> (f y) (g y)</span>
<span id="cb108-6"><a href="#cb108-6" aria-hidden="true"></a></span>
<span id="cb108-7"><a href="#cb108-7" aria-hidden="true"></a><span class="co">-- use a single traverse to apply the Product of cciBody and lciBody</span></span>
<span id="cb108-8"><a href="#cb108-8" aria-hidden="true"></a><span class="ot">clci ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Product</span> <span class="dt">Count</span> <span class="dt">Count</span> [a]</span>
<span id="cb108-9"><a href="#cb108-9" aria-hidden="true"></a>clci <span class="ot">=</span> <span class="fu">traverse</span> (cciBody <span class="op">&lt;#&gt;</span> lciBody)</span>
<span id="cb108-10"><a href="#cb108-10" aria-hidden="true"></a></span>
<span id="cb108-11"><a href="#cb108-11" aria-hidden="true"></a><span class="co">-- and then in ghci:</span></span>
<span id="cb108-12"><a href="#cb108-12" aria-hidden="true"></a><span class="op">&gt;</span> clci <span class="st">&quot;hello \n world&quot;</span></span>
<span id="cb108-13"><a href="#cb108-13" aria-hidden="true"></a><span class="dt">Pair</span> (<span class="dt">Const</span> (<span class="dt">Sum</span> {getSum <span class="ot">=</span> <span class="dv">13</span>})) (<span class="dt">Const</span> (<span class="dt">Sum</span> {getSum <span class="ot">=</span> <span class="dv">1</span>}))</span></code></pre></div>
<p>So we have achieved our aim of separating line counting and character counting in separate functions while still being able to apply them in only one traversal.</p>
<p>The only piece missing is the word counting. This is a bit tricky as we can not just increase a counter by looking at each single character but we have to take into account the status of the previously read character as well: - If the previous character was non-whitespace and the current is also non-whitespace we are still reading the same word and don’t increment the word count. - If the previous character was non-whitespace and the current is a whitespace character the last word was ended but we don’t increment the word count. - If the previous character was whitespace and the current is also whitespace we are still reading whitespace between words and don’t increment the word count. - If the previous character was whitespace and the current is a non-whitespace character the next word has started and we increment the word count.</p>
<p>Keeping track of the state of the last character could be achieved by using a state monad (and wrapping it as an Applicative Functor to make it compatible with <code>traverse</code>). The actual code for this solution is kept in the sourcecode for this section (functions <code>wciBody'</code> and <code>wci'</code> in particular). But as this approach is a bit noisy I’m presenting a simpler solution suggested by <a href="https://www.reddit.com/r/haskell/comments/cfjnyu/type_classes_and_software_design_patterns/eub06p5?utm_source=share&amp;utm_medium=web2x">Noughtmare</a>.</p>
<p>In his approach we’ll define a data structure that will keep track of the changes between whitespace and non-whitespace:</p>
<div class="sourceCode" id="cb109"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb109-1"><a href="#cb109-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">SepCount</span> <span class="ot">=</span> <span class="dt">SC</span> <span class="dt">Bool</span> <span class="dt">Bool</span> <span class="dt">Integer</span></span>
<span id="cb109-2"><a href="#cb109-2" aria-hidden="true"></a>  <span class="kw">deriving</span> <span class="dt">Show</span></span>
<span id="cb109-3"><a href="#cb109-3" aria-hidden="true"></a></span>
<span id="cb109-4"><a href="#cb109-4" aria-hidden="true"></a><span class="ot">mkSepCount ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">SepCount</span></span>
<span id="cb109-5"><a href="#cb109-5" aria-hidden="true"></a>mkSepCount <span class="fu">pred</span> x <span class="ot">=</span> <span class="dt">SC</span> p p (<span class="kw">if</span> p <span class="kw">then</span> <span class="dv">0</span> <span class="kw">else</span> <span class="dv">1</span>)</span>
<span id="cb109-6"><a href="#cb109-6" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb109-7"><a href="#cb109-7" aria-hidden="true"></a>    p <span class="ot">=</span> <span class="fu">pred</span> x</span>
<span id="cb109-8"><a href="#cb109-8" aria-hidden="true"></a></span>
<span id="cb109-9"><a href="#cb109-9" aria-hidden="true"></a><span class="ot">getSepCount ::</span> <span class="dt">SepCount</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb109-10"><a href="#cb109-10" aria-hidden="true"></a>getSepCount (<span class="dt">SC</span> _ _ n) <span class="ot">=</span> n    </span></code></pre></div>
<p>We then define the semantics for <code>(&lt;&gt;)</code> which implements the actual bookkeeping needed when <code>mappend</code>ing two <code>SepCount</code> items:</p>
<div class="sourceCode" id="cb110"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb110-1"><a href="#cb110-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">SepCount</span> <span class="kw">where</span></span>
<span id="cb110-2"><a href="#cb110-2" aria-hidden="true"></a>  (<span class="dt">SC</span> l0 r0 n) <span class="op">&lt;&gt;</span> (<span class="dt">SC</span> l1 r1 m) <span class="ot">=</span> <span class="dt">SC</span> l0 r1 x <span class="kw">where</span></span>
<span id="cb110-3"><a href="#cb110-3" aria-hidden="true"></a>    x <span class="op">|</span> <span class="fu">not</span> r0 <span class="op">&amp;&amp;</span> <span class="fu">not</span> l1 <span class="ot">=</span> n <span class="op">+</span> m <span class="op">-</span> <span class="dv">1</span></span>
<span id="cb110-4"><a href="#cb110-4" aria-hidden="true"></a>      <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> n <span class="op">+</span> m</span></code></pre></div>
<p>Based on these definitions we can then implement the wordcounting as follows:</p>
<div class="sourceCode" id="cb111"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb111-1"><a href="#cb111-1" aria-hidden="true"></a><span class="ot">wciBody ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Const</span> (<span class="dt">Maybe</span> <span class="dt">SepCount</span>) <span class="dt">Integer</span></span>
<span id="cb111-2"><a href="#cb111-2" aria-hidden="true"></a>wciBody <span class="ot">=</span> <span class="dt">Const</span> <span class="op">.</span> <span class="dt">Just</span> <span class="op">.</span> mkSepCount <span class="fu">isSpace</span> <span class="kw">where</span></span>
<span id="cb111-3"><a href="#cb111-3" aria-hidden="true"></a><span class="ot">    isSpace ::</span> <span class="dt">Char</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb111-4"><a href="#cb111-4" aria-hidden="true"></a>    <span class="fu">isSpace</span> c <span class="ot">=</span> c <span class="op">==</span> <span class="ch">&#39; &#39;</span> <span class="op">||</span> c <span class="op">==</span> <span class="ch">&#39;\n&#39;</span> <span class="op">||</span> c <span class="op">==</span> <span class="ch">&#39;\t&#39;</span></span>
<span id="cb111-5"><a href="#cb111-5" aria-hidden="true"></a></span>
<span id="cb111-6"><a href="#cb111-6" aria-hidden="true"></a><span class="co">-- using traverse to count words in a String</span></span>
<span id="cb111-7"><a href="#cb111-7" aria-hidden="true"></a><span class="ot">wci ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Const</span> (<span class="dt">Maybe</span> <span class="dt">SepCount</span>) [<span class="dt">Integer</span>]</span>
<span id="cb111-8"><a href="#cb111-8" aria-hidden="true"></a>wci <span class="ot">=</span> <span class="fu">traverse</span> wciBody </span>
<span id="cb111-9"><a href="#cb111-9" aria-hidden="true"></a></span>
<span id="cb111-10"><a href="#cb111-10" aria-hidden="true"></a><span class="co">-- Forming the Product of character counting, line counting and word counting</span></span>
<span id="cb111-11"><a href="#cb111-11" aria-hidden="true"></a><span class="co">-- and performing a one go traversal using this Functor product</span></span>
<span id="cb111-12"><a href="#cb111-12" aria-hidden="true"></a><span class="ot">clwci ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Product</span> (<span class="dt">Product</span> <span class="dt">Count</span> <span class="dt">Count</span>) (<span class="dt">Const</span> (<span class="dt">Maybe</span> <span class="dt">SepCount</span>))) [<span class="dt">Integer</span>]</span>
<span id="cb111-13"><a href="#cb111-13" aria-hidden="true"></a>clwci <span class="ot">=</span> <span class="fu">traverse</span> (cciBody <span class="op">&lt;#&gt;</span> lciBody <span class="op">&lt;#&gt;</span> wciBody)  </span>
<span id="cb111-14"><a href="#cb111-14" aria-hidden="true"></a></span>
<span id="cb111-15"><a href="#cb111-15" aria-hidden="true"></a><span class="co">-- extracting the actual Integer value from a `Const (Maybe SepCount) a` expression </span></span>
<span id="cb111-16"><a href="#cb111-16" aria-hidden="true"></a><span class="ot">extractCount ::</span> <span class="dt">Const</span> (<span class="dt">Maybe</span> <span class="dt">SepCount</span>) a <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb111-17"><a href="#cb111-17" aria-hidden="true"></a>extractCount (<span class="dt">Const</span> (<span class="dt">Just</span> sepCount)) <span class="ot">=</span>  getSepCount sepCount  </span>
<span id="cb111-18"><a href="#cb111-18" aria-hidden="true"></a></span>
<span id="cb111-19"><a href="#cb111-19" aria-hidden="true"></a><span class="co">-- the actual wordcount implementation.</span></span>
<span id="cb111-20"><a href="#cb111-20" aria-hidden="true"></a><span class="co">-- for any String a triple of linecount, wordcount, charactercount is returned</span></span>
<span id="cb111-21"><a href="#cb111-21" aria-hidden="true"></a><span class="ot">wc ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Integer</span>, <span class="dt">Integer</span>, <span class="dt">Integer</span>)</span>
<span id="cb111-22"><a href="#cb111-22" aria-hidden="true"></a>wc str <span class="ot">=</span></span>
<span id="cb111-23"><a href="#cb111-23" aria-hidden="true"></a>    <span class="kw">let</span> raw <span class="ot">=</span> clwci str</span>
<span id="cb111-24"><a href="#cb111-24" aria-hidden="true"></a>        cc  <span class="ot">=</span> coerce <span class="op">$</span> pfst (pfst raw)</span>
<span id="cb111-25"><a href="#cb111-25" aria-hidden="true"></a>        lc  <span class="ot">=</span> coerce <span class="op">$</span> psnd (pfst raw)</span>
<span id="cb111-26"><a href="#cb111-26" aria-hidden="true"></a>        wc  <span class="ot">=</span> extractCount  (psnd raw)</span>
<span id="cb111-27"><a href="#cb111-27" aria-hidden="true"></a>    <span class="kw">in</span> (lc,wc,cc)</span></code></pre></div>
<p>This sections was meant to motivate the usage of the <code>Traversable</code> type. Of course the word count example could be solved in much simpler ways. Here is one solution suggested by <a href="https://www.reddit.com/r/haskell/comments/cfjnyu/type_classes_and_software_design_patterns/ev4m6u6?utm_source=share&amp;utm_medium=web2x">NoughtMare</a>.</p>
<p>We simply use <code>foldMap</code> to perform a map / reduce based on our already defined <code>cciBody</code>, <code>lciBody</code> and <code>wciBody</code> functions. As <code>clwci''</code> now returns a simple tuple instead of the more clumsy <code>Product</code> type also the final wordcound function <code>wc''</code> now looks way simpler:</p>
<div class="sourceCode" id="cb112"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb112-1"><a href="#cb112-1" aria-hidden="true"></a><span class="ot">clwci&#39;&#39; ::</span> <span class="dt">Foldable</span> t <span class="ot">=&gt;</span> t <span class="dt">Char</span> <span class="ot">-&gt;</span> (<span class="dt">Count</span> [a], <span class="dt">Count</span> [a], <span class="dt">Const</span> (<span class="dt">Maybe</span> <span class="dt">SepCount</span>) <span class="dt">Integer</span>)</span>
<span id="cb112-2"><a href="#cb112-2" aria-hidden="true"></a>clwci&#39;&#39; <span class="ot">=</span> <span class="fu">foldMap</span> (\x <span class="ot">-&gt;</span> (cciBody x,  lciBody x, wciBody x))</span>
<span id="cb112-3"><a href="#cb112-3" aria-hidden="true"></a></span>
<span id="cb112-4"><a href="#cb112-4" aria-hidden="true"></a><span class="ot">wc&#39;&#39; ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">Integer</span>, <span class="dt">Integer</span>, <span class="dt">Integer</span>)</span>
<span id="cb112-5"><a href="#cb112-5" aria-hidden="true"></a>wc&#39;&#39; str <span class="ot">=</span></span>
<span id="cb112-6"><a href="#cb112-6" aria-hidden="true"></a>    <span class="kw">let</span> (rawCC, rawLC, rawWC) <span class="ot">=</span> clwci&#39;&#39; str</span>
<span id="cb112-7"><a href="#cb112-7" aria-hidden="true"></a>        cc  <span class="ot">=</span> coerce rawCC</span>
<span id="cb112-8"><a href="#cb112-8" aria-hidden="true"></a>        lc  <span class="ot">=</span> coerce rawLC</span>
<span id="cb112-9"><a href="#cb112-9" aria-hidden="true"></a>        wc  <span class="ot">=</span> extractCount rawWC</span>
<span id="cb112-10"><a href="#cb112-10" aria-hidden="true"></a>    <span class="kw">in</span> (lc,wc,cc)    </span></code></pre></div>
<p>As map / reduce with <code>foldMap</code> is such a powerful tool I’ve written a <a href="#map-reduce">dedicated section on this topic</a> further down in this study.</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Iterator.hs">Sourcecode for this section</a></p>
<!-- 
### ? → Bifunctor

tbd.
-->
<h3 id="the-pattern-behind-the-patterns-category">The Pattern behind the Patterns → Category</h3>
<blockquote>
<p>If you’ve ever used Unix pipes, you’ll understand the importance and flexibility of composing small reusable programs to get powerful and emergent behaviors. Similarly, if you program functionally, you’ll know how cool it is to compose a bunch of small reusable functions into a fully featured program.</p>
<p>Category theory codifies this compositional style into a design pattern, the category. <a href="http://www.haskellforall.com/2012/08/the-category-design-pattern.html">Quoted from HaskellForAll</a></p>
</blockquote>
<p>In most of the patterns and type classes discussed so far we have seen a common theme: providing means to compose behaviour and structure is one of the most important tools to design complex software by combining simpler components.</p>
<h4 id="function-composition">Function Composition</h4>
<p>Function composition is a powerful and elegant tool to compose complex functionality out of simpler building blocks. We already have seen several examples of it in the course of this study. Functions can be composed by using the binary <code>(.)</code> operator:</p>
<div class="sourceCode" id="cb113"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb113-1"><a href="#cb113-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> (<span class="op">.</span>)</span>
<span id="cb113-2"><a href="#cb113-2" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span></code></pre></div>
<p>It is defined as:</p>
<div class="sourceCode" id="cb114"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb114-1"><a href="#cb114-1" aria-hidden="true"></a>(f <span class="op">.</span> g) x <span class="ot">=</span> f (g x)</span></code></pre></div>
<p>This operator can be used to combine simple functions to awesome one-liners (and of course much more useful stuff):</p>
<div class="sourceCode" id="cb115"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb115-1"><a href="#cb115-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">product</span> <span class="op">.</span> <span class="fu">filter</span> <span class="fu">odd</span> <span class="op">.</span> <span class="fu">map</span> <span class="fu">length</span> <span class="op">.</span> <span class="fu">words</span> <span class="op">.</span> <span class="fu">reverse</span> <span class="op">$</span> <span class="st">&quot;function composition is awesome&quot;</span></span>
<span id="cb115-2"><a href="#cb115-2" aria-hidden="true"></a><span class="dv">77</span></span></code></pre></div>
<p>Function composition is associative <code>(f . g) . h = f . (g . h)</code>:</p>
<div class="sourceCode" id="cb116"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb116-1"><a href="#cb116-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> (((<span class="op">^</span><span class="dv">2</span>) <span class="op">.</span> <span class="fu">length</span>) <span class="op">.</span> <span class="fu">words</span>) <span class="st">&quot;hello world&quot;</span></span>
<span id="cb116-2"><a href="#cb116-2" aria-hidden="true"></a><span class="dv">4</span></span>
<span id="cb116-3"><a href="#cb116-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> ((<span class="op">^</span><span class="dv">2</span>) <span class="op">.</span> (<span class="fu">length</span> <span class="op">.</span> <span class="fu">words</span>)) <span class="st">&quot;hello world&quot;</span></span>
<span id="cb116-4"><a href="#cb116-4" aria-hidden="true"></a><span class="dv">4</span></span></code></pre></div>
<p>And composition has a neutral (or identity) element <code>id</code> so that <code>f . id = id . f</code>:</p>
<div class="sourceCode" id="cb117"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb117-1"><a href="#cb117-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> (<span class="fu">length</span> <span class="op">.</span> <span class="fu">id</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb117-2"><a href="#cb117-2" aria-hidden="true"></a><span class="dv">3</span></span>
<span id="cb117-3"><a href="#cb117-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> (<span class="fu">id</span> <span class="op">.</span> <span class="fu">length</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb117-4"><a href="#cb117-4" aria-hidden="true"></a><span class="dv">3</span></span></code></pre></div>
<p>The definitions of <code>(.)</code> and <code>id</code> plus the laws of associativity and identity match exactly the definition of a category:</p>
<blockquote>
<p>In mathematics, a category […] is a collection of “objects” that are linked by “arrows”. A category has two basic properties: the ability to compose the arrows associatively and the existence of an identity arrow for each object.</p>
<p><a href="https://en.wikipedia.org/wiki/Category_(mathematics)">Quoted from Wikipedia</a></p>
</blockquote>
<p>In Haskell a category is defined as as a type class:</p>
<div class="sourceCode" id="cb118"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb118-1"><a href="#cb118-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Category</span> cat <span class="kw">where</span></span>
<span id="cb118-2"><a href="#cb118-2" aria-hidden="true"></a>    <span class="co">-- | the identity morphism</span></span>
<span id="cb118-3"><a href="#cb118-3" aria-hidden="true"></a><span class="ot">    id ::</span> cat a a</span>
<span id="cb118-4"><a href="#cb118-4" aria-hidden="true"></a></span>
<span id="cb118-5"><a href="#cb118-5" aria-hidden="true"></a>    <span class="co">-- | morphism composition</span></span>
<span id="cb118-6"><a href="#cb118-6" aria-hidden="true"></a><span class="ot">    (.) ::</span> cat b c <span class="ot">-&gt;</span> cat a b <span class="ot">-&gt;</span> cat a c</span></code></pre></div>
<blockquote>
<p>Please note: The name <code>Category</code> may be a bit misleading, since this type class cannot represent arbitrary categories, but only categories whose objects are objects of <a href="https://wiki.haskell.org/Hask"><code>Hask</code>, the category of Haskell types</a>.</p>
</blockquote>
<p>Instances of <code>Category</code> should satisfy that <code>(.)</code> and <code>id</code> form a Monoid – that is <code>id</code> should be the identity of <code>(.)</code> and <code>(.)</code> should be associative:</p>
<div class="sourceCode" id="cb119"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb119-1"><a href="#cb119-1" aria-hidden="true"></a>f  <span class="op">.</span> <span class="fu">id</span>      <span class="ot">=</span>  f            <span class="co">-- (right identity)</span></span>
<span id="cb119-2"><a href="#cb119-2" aria-hidden="true"></a><span class="fu">id</span> <span class="op">.</span> f       <span class="ot">=</span>  f            <span class="co">-- (left identity)</span></span>
<span id="cb119-3"><a href="#cb119-3" aria-hidden="true"></a>f <span class="op">.</span> (g <span class="op">.</span> h)  <span class="ot">=</span>  (f <span class="op">.</span> g) <span class="op">.</span> h  <span class="co">-- (associativity)</span></span></code></pre></div>
<p>As function composition fulfills these category laws the function type constructor <code>(-&gt;)</code> can be defined as an instance of the category type class:</p>
<div class="sourceCode" id="cb120"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb120-1"><a href="#cb120-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Category</span> (<span class="ot">-&gt;</span>) <span class="kw">where</span></span>
<span id="cb120-2"><a href="#cb120-2" aria-hidden="true"></a>    <span class="fu">id</span>  <span class="ot">=</span> GHC.Base.id</span>
<span id="cb120-3"><a href="#cb120-3" aria-hidden="true"></a>    (<span class="op">.</span>) <span class="ot">=</span> (<span class="op">GHC.Base..</span>)</span></code></pre></div>
<h4 id="monadic-composition">Monadic Composition</h4>
<p>In the section on the <a href="#avoiding-partial-functions-by-using-maybe">Maybe Monad</a> we have seen that monadic operations can be chained with the Kleisli operator <code>&gt;=&gt;</code>:</p>
<div class="sourceCode" id="cb121"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb121-1"><a href="#cb121-1" aria-hidden="true"></a><span class="ot">safeRoot           ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb121-2"><a href="#cb121-2" aria-hidden="true"></a>safeRoot x</span>
<span id="cb121-3"><a href="#cb121-3" aria-hidden="true"></a>    <span class="op">|</span> x <span class="op">&gt;=</span> <span class="dv">0</span>    <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">sqrt</span> x)</span>
<span id="cb121-4"><a href="#cb121-4" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb121-5"><a href="#cb121-5" aria-hidden="true"></a></span>
<span id="cb121-6"><a href="#cb121-6" aria-hidden="true"></a><span class="ot">safeReciprocal     ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb121-7"><a href="#cb121-7" aria-hidden="true"></a>safeReciprocal x</span>
<span id="cb121-8"><a href="#cb121-8" aria-hidden="true"></a>    <span class="op">|</span> x <span class="op">/=</span> <span class="dv">0</span>    <span class="ot">=</span> <span class="dt">Just</span> (<span class="dv">1</span><span class="op">/</span>x)</span>
<span id="cb121-9"><a href="#cb121-9" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb121-10"><a href="#cb121-10" aria-hidden="true"></a></span>
<span id="cb121-11"><a href="#cb121-11" aria-hidden="true"></a><span class="ot">safeRootReciprocal ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb121-12"><a href="#cb121-12" aria-hidden="true"></a>safeRootReciprocal <span class="ot">=</span> safeReciprocal <span class="op">&gt;=&gt;</span> safeRoot</span></code></pre></div>
<p>The operator <code>&lt;=&lt;</code> just flips the arguments of <code>&gt;=&gt;</code> and thus provides right-to-left composition. When we compare the signature of <code>&lt;=&lt;</code> with the signature of <code>.</code> we notice the similarity of both concepts:</p>
<div class="sourceCode" id="cb122"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb122-1"><a href="#cb122-1" aria-hidden="true"></a><span class="ot">(.)   ::</span>            (b <span class="ot">-&gt;</span>   c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span>   b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span>   c</span>
<span id="cb122-2"><a href="#cb122-2" aria-hidden="true"></a><span class="ot">(&lt;=&lt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> (b <span class="ot">-&gt;</span> m c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> m c</span></code></pre></div>
<p>Even the implementation of <code>&lt;=&lt;</code> is quite similar to the definition of <code>.</code></p>
<div class="sourceCode" id="cb123"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb123-1"><a href="#cb123-1" aria-hidden="true"></a>(f  <span class="op">.</span>  g) x <span class="ot">=</span> f     (g x)</span>
<span id="cb123-2"><a href="#cb123-2" aria-hidden="true"></a>(f <span class="op">&lt;=&lt;</span> g) x <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> (g x)</span></code></pre></div>
<p>The essential diffenerce is that <code>&lt;=&lt;</code> maintains a monadic structure when producing its result.</p>
<p>Next we compare signatures of <code>id</code> and its monadic counterpart <code>return</code>:</p>
<div class="sourceCode" id="cb124"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb124-1"><a href="#cb124-1" aria-hidden="true"></a><span class="fu">id</span><span class="ot">     ::</span>              (a <span class="ot">-&gt;</span>   a)</span>
<span id="cb124-2"><a href="#cb124-2" aria-hidden="true"></a><span class="fu">return</span><span class="ot"> ::</span> (<span class="dt">Monad</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m a)</span></code></pre></div>
<p>Here again <code>return</code> always produces a monadic structure.</p>
<p>So the category for Monads can simply be defined as:</p>
<div class="sourceCode" id="cb125"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb125-1"><a href="#cb125-1" aria-hidden="true"></a><span class="co">-- | Kleisli arrows of a monad.</span></span>
<span id="cb125-2"><a href="#cb125-2" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Kleisli</span> m a b <span class="ot">=</span> <span class="dt">Kleisli</span> {<span class="ot"> runKleisli ::</span> a <span class="ot">-&gt;</span> m b }</span>
<span id="cb125-3"><a href="#cb125-3" aria-hidden="true"></a></span>
<span id="cb125-4"><a href="#cb125-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> <span class="dt">Category</span> (<span class="dt">Kleisli</span> m) <span class="kw">where</span></span>
<span id="cb125-5"><a href="#cb125-5" aria-hidden="true"></a>    <span class="fu">id</span> <span class="ot">=</span> <span class="dt">Kleisli</span> <span class="fu">return</span></span>
<span id="cb125-6"><a href="#cb125-6" aria-hidden="true"></a>    (<span class="dt">Kleisli</span> f) <span class="op">.</span> (<span class="dt">Kleisli</span> g) <span class="ot">=</span> <span class="dt">Kleisli</span> (f <span class="op">&lt;=&lt;</span> g)</span></code></pre></div>
<p>So if monadic actions form a category we expect that the law of identity and associativity hold:</p>
<div class="sourceCode" id="cb126"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb126-1"><a href="#cb126-1" aria-hidden="true"></a><span class="fu">return</span> <span class="op">&lt;=&lt;</span> f    <span class="ot">=</span> f                <span class="co">-- left identity</span></span>
<span id="cb126-2"><a href="#cb126-2" aria-hidden="true"></a></span>
<span id="cb126-3"><a href="#cb126-3" aria-hidden="true"></a>f <span class="op">&lt;=&lt;</span> <span class="fu">return</span>    <span class="ot">=</span> f                <span class="co">-- right identity</span></span>
<span id="cb126-4"><a href="#cb126-4" aria-hidden="true"></a></span>
<span id="cb126-5"><a href="#cb126-5" aria-hidden="true"></a>(f <span class="op">&lt;=&lt;</span> g) <span class="op">&lt;=&lt;</span> h <span class="ot">=</span> f <span class="op">&lt;=&lt;</span> (g <span class="op">&lt;=&lt;</span> h)  <span class="co">-- associativity</span></span></code></pre></div>
<p>Let’s try to prove it by applying some equational reasoning. First we take the definition of <code>&lt;=&lt;</code>: <code>(f &lt;=&lt; g) x = f =&lt;&lt; (g x)</code> to expand the above equations:</p>
<div class="sourceCode" id="cb127"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb127-1"><a href="#cb127-1" aria-hidden="true"></a><span class="co">-- 1. left identity</span></span>
<span id="cb127-2"><a href="#cb127-2" aria-hidden="true"></a><span class="fu">return</span> <span class="op">&lt;=&lt;</span> f     <span class="ot">=</span> f    <span class="co">-- left identity (to be proven)</span></span>
<span id="cb127-3"><a href="#cb127-3" aria-hidden="true"></a>(<span class="fu">return</span> <span class="op">&lt;=&lt;</span> f) x <span class="ot">=</span> f x  <span class="co">-- eta expand</span></span>
<span id="cb127-4"><a href="#cb127-4" aria-hidden="true"></a><span class="fu">return</span> <span class="op">=&lt;&lt;</span> (f x) <span class="ot">=</span> f x  <span class="co">-- expand &lt;=&lt; by above definition</span></span>
<span id="cb127-5"><a href="#cb127-5" aria-hidden="true"></a><span class="fu">return</span> <span class="op">=&lt;&lt;</span> f     <span class="ot">=</span> f    <span class="co">-- eta reduce</span></span>
<span id="cb127-6"><a href="#cb127-6" aria-hidden="true"></a>f <span class="op">&gt;&gt;=</span> <span class="fu">return</span>     <span class="ot">=</span> f    <span class="co">-- replace =&lt;&lt; with &gt;&gt;= and flip arguments</span></span>
<span id="cb127-7"><a href="#cb127-7" aria-hidden="true"></a></span>
<span id="cb127-8"><a href="#cb127-8" aria-hidden="true"></a></span>
<span id="cb127-9"><a href="#cb127-9" aria-hidden="true"></a><span class="co">-- 2 right identity</span></span>
<span id="cb127-10"><a href="#cb127-10" aria-hidden="true"></a>f <span class="op">&lt;=&lt;</span> <span class="fu">return</span>     <span class="ot">=</span> f    <span class="co">-- right identity (to be proven)</span></span>
<span id="cb127-11"><a href="#cb127-11" aria-hidden="true"></a>(f <span class="op">&lt;=&lt;</span> <span class="fu">return</span>) x <span class="ot">=</span> f x  <span class="co">-- eta expand</span></span>
<span id="cb127-12"><a href="#cb127-12" aria-hidden="true"></a>f <span class="op">=&lt;&lt;</span> (<span class="fu">return</span> x) <span class="ot">=</span> f x  <span class="co">-- expand &lt;=&lt; by above definition</span></span>
<span id="cb127-13"><a href="#cb127-13" aria-hidden="true"></a><span class="fu">return</span> x <span class="op">&gt;&gt;=</span> f   <span class="ot">=</span> f x  <span class="co">-- replace =&lt;&lt; with &gt;&gt;= and flip arguments</span></span>
<span id="cb127-14"><a href="#cb127-14" aria-hidden="true"></a></span>
<span id="cb127-15"><a href="#cb127-15" aria-hidden="true"></a><span class="co">-- 3. associativity</span></span>
<span id="cb127-16"><a href="#cb127-16" aria-hidden="true"></a>(f <span class="op">&lt;=&lt;</span> g) <span class="op">&lt;=&lt;</span> h             <span class="ot">=</span> f <span class="op">&lt;=&lt;</span> (g <span class="op">&lt;=&lt;</span> h)  <span class="co">-- associativity (to be proven)</span></span>
<span id="cb127-17"><a href="#cb127-17" aria-hidden="true"></a>((f <span class="op">&lt;=&lt;</span> g) <span class="op">&lt;=&lt;</span> h) x         <span class="ot">=</span> (f <span class="op">&lt;=&lt;</span> (g <span class="op">&lt;=&lt;</span> h)) x <span class="co">-- eta expand</span></span>
<span id="cb127-18"><a href="#cb127-18" aria-hidden="true"></a>(f <span class="op">&lt;=&lt;</span> g) <span class="op">=&lt;&lt;</span> (h x)         <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> ((g <span class="op">&lt;=&lt;</span> h) x) <span class="co">-- expand outer &lt;=&lt; on both sides</span></span>
<span id="cb127-19"><a href="#cb127-19" aria-hidden="true"></a>(\y <span class="ot">-&gt;</span> (f <span class="op">&lt;=&lt;</span> g) y) <span class="op">=&lt;&lt;</span> h x <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> ((g <span class="op">&lt;=&lt;</span> h) x) <span class="co">-- eta expand on left hand side</span></span>
<span id="cb127-20"><a href="#cb127-20" aria-hidden="true"></a>(\y <span class="ot">-&gt;</span> f <span class="op">=&lt;&lt;</span> (g y)) <span class="op">=&lt;&lt;</span> h x <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> ((g <span class="op">&lt;=&lt;</span> h) x) <span class="co">-- expand inner &lt;=&lt; on the lhs</span></span>
<span id="cb127-21"><a href="#cb127-21" aria-hidden="true"></a>(\y <span class="ot">-&gt;</span> f <span class="op">=&lt;&lt;</span> (g y)) <span class="op">=&lt;&lt;</span> h x <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> (g <span class="op">=&lt;&lt;</span> (h x)) <span class="co">-- expand inner &lt;=&lt; on the rhs</span></span>
<span id="cb127-22"><a href="#cb127-22" aria-hidden="true"></a>h x <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> f <span class="op">=&lt;&lt;</span> (g y)) <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> (g <span class="op">=&lt;&lt;</span> (h x)) <span class="co">-- replace outer =&lt;&lt; with &gt;&gt;= and flip arguments on lhs</span></span>
<span id="cb127-23"><a href="#cb127-23" aria-hidden="true"></a>h x <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> g y <span class="op">&gt;&gt;=</span> f)   <span class="ot">=</span> f <span class="op">=&lt;&lt;</span> (g <span class="op">=&lt;&lt;</span> (h x)) <span class="co">-- replace inner =&lt;&lt; with &gt;&gt;= and flip arguments on lhs</span></span>
<span id="cb127-24"><a href="#cb127-24" aria-hidden="true"></a>h x <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> g y <span class="op">&gt;&gt;=</span> f)   <span class="ot">=</span> (g <span class="op">=&lt;&lt;</span> (h x)) <span class="op">&gt;&gt;=</span> f <span class="co">-- replace outer =&lt;&lt; with &gt;&gt;= and flip arguments on rhs</span></span>
<span id="cb127-25"><a href="#cb127-25" aria-hidden="true"></a>h x <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> g y <span class="op">&gt;&gt;=</span> f)   <span class="ot">=</span> ((h x) <span class="op">&gt;&gt;=</span> g) <span class="op">&gt;&gt;=</span> f <span class="co">-- replace inner =&lt;&lt; with &gt;&gt;= and flip arguments on rhs</span></span>
<span id="cb127-26"><a href="#cb127-26" aria-hidden="true"></a>h <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> g y <span class="op">&gt;&gt;=</span> f)     <span class="ot">=</span> (h <span class="op">&gt;&gt;=</span> g) <span class="op">&gt;&gt;=</span> f     <span class="co">-- eta reduce</span></span></code></pre></div>
<p>So we have transformed our three formulas to the following form:</p>
<div class="sourceCode" id="cb128"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb128-1"><a href="#cb128-1" aria-hidden="true"></a>f <span class="op">&gt;&gt;=</span> <span class="fu">return</span>   <span class="ot">=</span> f</span>
<span id="cb128-2"><a href="#cb128-2" aria-hidden="true"></a></span>
<span id="cb128-3"><a href="#cb128-3" aria-hidden="true"></a><span class="fu">return</span> x <span class="op">&gt;&gt;=</span> f <span class="ot">=</span> f x</span>
<span id="cb128-4"><a href="#cb128-4" aria-hidden="true"></a></span>
<span id="cb128-5"><a href="#cb128-5" aria-hidden="true"></a>h <span class="op">&gt;&gt;=</span> (\y <span class="ot">-&gt;</span> g y <span class="op">&gt;&gt;=</span> f)  <span class="ot">=</span>  (h <span class="op">&gt;&gt;=</span> g) <span class="op">&gt;&gt;=</span> f</span></code></pre></div>
<p>These three equations are equivalent to the <a href="https://wiki.haskell.org/Monad_laws">Monad Laws</a>, which all Monad instances are required to satisfy:</p>
<div class="sourceCode" id="cb129"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb129-1"><a href="#cb129-1" aria-hidden="true"></a>m <span class="op">&gt;&gt;=</span> <span class="fu">return</span>    <span class="ot">=</span>  m</span>
<span id="cb129-2"><a href="#cb129-2" aria-hidden="true"></a></span>
<span id="cb129-3"><a href="#cb129-3" aria-hidden="true"></a><span class="fu">return</span> a <span class="op">&gt;&gt;=</span> k  <span class="ot">=</span>  k a</span>
<span id="cb129-4"><a href="#cb129-4" aria-hidden="true"></a></span>
<span id="cb129-5"><a href="#cb129-5" aria-hidden="true"></a>m <span class="op">&gt;&gt;=</span> (\x <span class="ot">-&gt;</span> k x <span class="op">&gt;&gt;=</span> h)  <span class="ot">=</span>  (m <span class="op">&gt;&gt;=</span> k) <span class="op">&gt;&gt;=</span> h</span></code></pre></div>
<p>So by virtue of this equivalence any Monad that satisfies the Monad laws automatically satisfies the Category laws.</p>
<blockquote>
<p>If you have ever wondered where those monad laws came from, now you know! They are just the category laws in disguise. Consequently, every new Monad we define gives us a category for free!</p>
<p>Quoted from <a href="http://www.haskellforall.com/2012/08/the-category-design-pattern.html">The Category Design Pattern</a></p>
</blockquote>
<h4 id="conclusion">Conclusion</h4>
<blockquote>
<p>Category theory codifies [the] compositional style into a design pattern, the category. Moreover, category theory gives us a precise prescription for how to create our own abstractions that follow this design pattern: the category laws. These laws differentiate category theory from other design patterns by providing rigorous criteria for what does and does not qualify as compositional.</p>
<p>One could easily dismiss this compositional ideal as just that: an ideal, something unsuitable for “real-world” scenarios. However, the theory behind category theory provides the meat that shows that this compositional ideal appears everywhere and can rise to the challenge of &gt; messy problems and complex business logic.</p>
<p>Quoted from <a href="http://www.haskellforall.com/2012/08/the-category-design-pattern.html">The Category Design Pattern</a></p>
</blockquote>
<!-- 
### ? → Arrow

tbd.
-->
<h3 id="fluent-api-comonad">Fluent Api → Comonad</h3>
<blockquote>
<p>In software engineering, a fluent interface […] is a method for designing object oriented APIs based extensively on method chaining with the goal of making the readability of the source code close to that of ordinary written prose, essentially creating a domain-specific language within the interface.</p>
<p><a href="https://en.wikipedia.org/wiki/Fluent_interface">Quoted from Wikipedia</a></p>
</blockquote>
<p>The <a href="#builder--record-syntax-smart-constructor">Builder Pattern</a> is a typical example for a fluent API. The following short Java snippet show the essential elements:</p>
<ul>
<li>creating a builder instance</li>
<li>invoking a sequence of mutators <code>with...</code> on the builder instance</li>
<li>finally calling <code>build()</code> to let the Builder create an object</li>
</ul>
<div class="sourceCode" id="cb130"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb130-1"><a href="#cb130-1" aria-hidden="true"></a>ConfigBuilder builder = <span class="kw">new</span> <span class="fu">ConfigBuilder</span>();</span>
<span id="cb130-2"><a href="#cb130-2" aria-hidden="true"></a>Config config = builder</span>
<span id="cb130-3"><a href="#cb130-3" aria-hidden="true"></a>        .<span class="fu">withProfiling</span>()        <span class="co">// Add profiling</span></span>
<span id="cb130-4"><a href="#cb130-4" aria-hidden="true"></a>        .<span class="fu">withOptimization</span>()     <span class="co">// Add optimization</span></span>
<span id="cb130-5"><a href="#cb130-5" aria-hidden="true"></a>        .<span class="fu">build</span>();</span>
<span id="cb130-6"><a href="#cb130-6" aria-hidden="true"></a>}</span></code></pre></div>
<p>The interesting point is that all the <code>with...</code> methods are not implemented as <code>void</code> method but instead all return the Builder instance, which thus allows to fluently chain the next <code>with...</code> call.</p>
<p>Let’s try to recreate this fluent chaining of calls in Haskell. We start with a configuration type <code>Config</code> that represents a set of option strings (<code>Options</code>):</p>
<div class="sourceCode" id="cb131"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb131-1"><a href="#cb131-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Options</span> <span class="ot">=</span> [<span class="dt">String</span>]</span>
<span id="cb131-2"><a href="#cb131-2" aria-hidden="true"></a></span>
<span id="cb131-3"><a href="#cb131-3" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Conf</span> <span class="dt">Options</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>Next we define a function <code>configBuilder</code> which takes <code>Options</code> as input and returns a <code>Config</code> instance:</p>
<div class="sourceCode" id="cb132"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb132-1"><a href="#cb132-1" aria-hidden="true"></a><span class="ot">configBuilder ::</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span></span>
<span id="cb132-2"><a href="#cb132-2" aria-hidden="true"></a>configBuilder options <span class="ot">=</span> <span class="dt">Conf</span> options</span>
<span id="cb132-3"><a href="#cb132-3" aria-hidden="true"></a></span>
<span id="cb132-4"><a href="#cb132-4" aria-hidden="true"></a><span class="co">-- we can use this to construct a Config instance from a list of Option strings:</span></span>
<span id="cb132-5"><a href="#cb132-5" aria-hidden="true"></a>ghci<span class="op">&gt;</span> configBuilder [<span class="st">&quot;-O2&quot;</span>, <span class="st">&quot;-prof&quot;</span>]</span>
<span id="cb132-6"><a href="#cb132-6" aria-hidden="true"></a><span class="dt">Conf</span> [<span class="st">&quot;-O2&quot;</span>,<span class="st">&quot;-prof&quot;</span>]</span></code></pre></div>
<p>In order to allow chaining of the <code>with...</code> functions they always must return a new <code>Options -&gt; Config</code> function. So for example <code>withProfiling</code> would have the following signature:</p>
<div class="sourceCode" id="cb133"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb133-1"><a href="#cb133-1" aria-hidden="true"></a><span class="ot">withProfiling ::</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>)</span></code></pre></div>
<p>This signature is straightforward but the implementation needs some thinking: we take a function <code>builder</code> of type <code>Options -&gt; Config</code> as input and must return a new function of the same type that will use the same builder but will add profiling options to the <code>Options</code> parameter <code>opts</code>:</p>
<div class="sourceCode" id="cb134"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb134-1"><a href="#cb134-1" aria-hidden="true"></a>withProfiling builder <span class="ot">=</span> \opts <span class="ot">-&gt;</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-prof&quot;</span>, <span class="st">&quot;-auto-all&quot;</span>])</span></code></pre></div>
<p>HLint tells us that this can be written more terse as:</p>
<div class="sourceCode" id="cb135"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb135-1"><a href="#cb135-1" aria-hidden="true"></a>withProfiling builder opts <span class="ot">=</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-prof&quot;</span>, <span class="st">&quot;-auto-all&quot;</span>])</span></code></pre></div>
<p>In order to keep notation dense we introduce a type alias for the function type <code>Options -&gt; Config</code>:</p>
<div class="sourceCode" id="cb136"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb136-1"><a href="#cb136-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">ConfigBuilder</span> <span class="ot">=</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span></span></code></pre></div>
<p>With this shortcut we can implement the other <code>with...</code> functions as:</p>
<div class="sourceCode" id="cb137"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb137-1"><a href="#cb137-1" aria-hidden="true"></a><span class="ot">withWarnings ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb137-2"><a href="#cb137-2" aria-hidden="true"></a>withWarnings builder opts <span class="ot">=</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-Wall&quot;</span>])</span>
<span id="cb137-3"><a href="#cb137-3" aria-hidden="true"></a></span>
<span id="cb137-4"><a href="#cb137-4" aria-hidden="true"></a><span class="ot">withOptimization ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb137-5"><a href="#cb137-5" aria-hidden="true"></a>withOptimization builder opts <span class="ot">=</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-O2&quot;</span>])</span>
<span id="cb137-6"><a href="#cb137-6" aria-hidden="true"></a></span>
<span id="cb137-7"><a href="#cb137-7" aria-hidden="true"></a><span class="ot">withLogging ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb137-8"><a href="#cb137-8" aria-hidden="true"></a>withLogging builder opts <span class="ot">=</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-logall&quot;</span>])</span></code></pre></div>
<p>The <code>build()</code> function is also quite straightforward. It constructs the actual <code>Config</code> instance by invoking a given <code>ConfigBuilder</code> on an empty list:</p>
<div class="sourceCode" id="cb138"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb138-1"><a href="#cb138-1" aria-hidden="true"></a><span class="ot">build ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">Config</span></span>
<span id="cb138-2"><a href="#cb138-2" aria-hidden="true"></a>build builder <span class="ot">=</span> builder <span class="fu">mempty</span></span>
<span id="cb138-3"><a href="#cb138-3" aria-hidden="true"></a></span>
<span id="cb138-4"><a href="#cb138-4" aria-hidden="true"></a><span class="co">-- now we can use it in ghci:</span></span>
<span id="cb138-5"><a href="#cb138-5" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> (build (withOptimization (withProfiling configBuilder)))</span>
<span id="cb138-6"><a href="#cb138-6" aria-hidden="true"></a><span class="dt">Conf</span> [<span class="st">&quot;-O2&quot;</span>,<span class="st">&quot;-prof&quot;</span>,<span class="st">&quot;-auto-all&quot;</span>]</span></code></pre></div>
<p>This does not yet look quite object oriented but with a tiny tweak we’ll get quite close. We introduce a special operator <code>#</code> that allows to write functional expression in an object-oriented style:</p>
<div class="sourceCode" id="cb139"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb139-1"><a href="#cb139-1" aria-hidden="true"></a><span class="ot">(#) ::</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b</span>
<span id="cb139-2"><a href="#cb139-2" aria-hidden="true"></a>x <span class="op">#</span> f <span class="ot">=</span> f x</span>
<span id="cb139-3"><a href="#cb139-3" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">0</span> <span class="op">#</span></span></code></pre></div>
<p>With this operator we can write the above example as:</p>
<div class="sourceCode" id="cb140"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb140-1"><a href="#cb140-1" aria-hidden="true"></a>config <span class="ot">=</span> configBuilder</span>
<span id="cb140-2"><a href="#cb140-2" aria-hidden="true"></a>    <span class="op">#</span> withProfiling    <span class="co">-- add profiling</span></span>
<span id="cb140-3"><a href="#cb140-3" aria-hidden="true"></a>    <span class="op">#</span> withOptimization <span class="co">-- add optimizations</span></span>
<span id="cb140-4"><a href="#cb140-4" aria-hidden="true"></a>    <span class="op">#</span> build</span></code></pre></div>
<p>So far so good. But what does this have to do with Comonads? In the following I’ll demonstrate how the chaining of functions as shown in our <code>ConfigBuilder</code> example follows a pattern that is covered by the <code>Comonad</code> type class.</p>
<p>Let’s have a second look at the <code>with*</code> functions:</p>
<div class="sourceCode" id="cb141"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb141-1"><a href="#cb141-1" aria-hidden="true"></a><span class="ot">withWarnings ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb141-2"><a href="#cb141-2" aria-hidden="true"></a>withWarnings builder opts <span class="ot">=</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-Wall&quot;</span>])</span>
<span id="cb141-3"><a href="#cb141-3" aria-hidden="true"></a></span>
<span id="cb141-4"><a href="#cb141-4" aria-hidden="true"></a><span class="ot">withProfiling ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb141-5"><a href="#cb141-5" aria-hidden="true"></a>withProfiling builder opts <span class="ot">=</span> builder (opts <span class="op">++</span> [<span class="st">&quot;-prof&quot;</span>, <span class="st">&quot;-auto-all&quot;</span>])</span></code></pre></div>
<p>These functions all are containing code for explicitely concatenating the <code>opts</code> argument with additional <code>Options</code>. In order to reduce repetitive coding we are looking for a way to factor out the concrete concatenation of <code>Options</code>. Going this route the <code>with*</code> function could be rewritten as follows:</p>
<div class="sourceCode" id="cb142"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb142-1"><a href="#cb142-1" aria-hidden="true"></a><span class="ot">withWarnings&#39;&#39; ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb142-2"><a href="#cb142-2" aria-hidden="true"></a>withWarnings&#39;&#39; builder <span class="ot">=</span> extend&#39; builder [<span class="st">&quot;-Wall&quot;</span>]</span>
<span id="cb142-3"><a href="#cb142-3" aria-hidden="true"></a></span>
<span id="cb142-4"><a href="#cb142-4" aria-hidden="true"></a><span class="ot">withProfiling&#39;&#39; ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb142-5"><a href="#cb142-5" aria-hidden="true"></a>withProfiling&#39;&#39; builder <span class="ot">=</span> extend&#39; builder [<span class="st">&quot;-prof&quot;</span>, <span class="st">&quot;-auto-all&quot;</span>]</span></code></pre></div>
<p>Here <code>extend'</code> is a higher order function that takes a <code>ConfigBuilder</code> and an <code>Options</code> argument (<code>opts2</code>) and returns a new function that returns a new <code>ConfigBuilder</code> that concatenates its input <code>opts1</code> with the original <code>opts2</code> arguments:</p>
<div class="sourceCode" id="cb143"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb143-1"><a href="#cb143-1" aria-hidden="true"></a><span class="ot">extend&#39; ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb143-2"><a href="#cb143-2" aria-hidden="true"></a>extend&#39; builder opts2 <span class="ot">=</span> \opts1 <span class="ot">-&gt;</span> builder (opts1 <span class="op">++</span> opts2)</span>
<span id="cb143-3"><a href="#cb143-3" aria-hidden="true"></a><span class="co">-- or even denser without explicit lambda:</span></span>
<span id="cb143-4"><a href="#cb143-4" aria-hidden="true"></a>extend&#39; builder opts2 opts1 <span class="ot">=</span> builder (opts1 <span class="op">++</span> opts2)</span></code></pre></div>
<p>We could carry this idea of refactoring repetitive code even further by eliminating the <code>extend'</code> from the <code>with*</code> functions. Of course this will change the signature of the functions:</p>
<div class="sourceCode" id="cb144"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb144-1"><a href="#cb144-1" aria-hidden="true"></a><span class="ot">withWarnings&#39; ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">Config</span></span>
<span id="cb144-2"><a href="#cb144-2" aria-hidden="true"></a>withWarnings&#39; builder <span class="ot">=</span> builder [<span class="st">&quot;-Wall&quot;</span>]</span>
<span id="cb144-3"><a href="#cb144-3" aria-hidden="true"></a></span>
<span id="cb144-4"><a href="#cb144-4" aria-hidden="true"></a><span class="ot">withProfiling&#39; ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">Config</span></span>
<span id="cb144-5"><a href="#cb144-5" aria-hidden="true"></a>withProfiling&#39; builder <span class="ot">=</span> builder [<span class="st">&quot;-prof&quot;</span>, <span class="st">&quot;-auto-all&quot;</span>]</span></code></pre></div>
<p>In order to form fluent sequences of such function calls we need an improved version of the <code>extend</code> function which transparently handles the concatenation of <code>Option</code> arguments and also keeps the chain of <code>with*</code> functions open for the next <code>with*</code> function being applied:</p>
<div class="sourceCode" id="cb145"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb145-1"><a href="#cb145-1" aria-hidden="true"></a><span class="ot">extend&#39;&#39; ::</span> (<span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb145-2"><a href="#cb145-2" aria-hidden="true"></a>extend&#39;&#39; withFun builder opt2 <span class="ot">=</span> withFun (\opt1 <span class="ot">-&gt;</span> builder (opt1 <span class="op">++</span> opt2))</span></code></pre></div>
<p>In order to use <code>extend''</code> efficiently in user code we have to modify our <code>#</code> operator slightly to transparently handle the extending of <code>ConfigBuilder</code> instances when chaining functions of type <code>ConfigBuilder -&gt; Config</code>:</p>
<div class="sourceCode" id="cb146"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb146-1"><a href="#cb146-1" aria-hidden="true"></a><span class="ot">(#&gt;&gt;) ::</span> <span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> (<span class="dt">ConfigBuilder</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> <span class="dt">ConfigBuilder</span></span>
<span id="cb146-2"><a href="#cb146-2" aria-hidden="true"></a>x <span class="op">#&gt;&gt;</span> f <span class="ot">=</span> extend&#39;&#39; f x</span>
<span id="cb146-3"><a href="#cb146-3" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">0</span> <span class="op">#&gt;&gt;</span></span></code></pre></div>
<p>User code would then look like follows:</p>
<div class="sourceCode" id="cb147"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb147-1"><a href="#cb147-1" aria-hidden="true"></a>configBuilder</span>
<span id="cb147-2"><a href="#cb147-2" aria-hidden="true"></a>    <span class="op">#&gt;&gt;</span> withProfiling&#39;</span>
<span id="cb147-3"><a href="#cb147-3" aria-hidden="true"></a>    <span class="op">#&gt;&gt;</span> withOptimization&#39;</span>
<span id="cb147-4"><a href="#cb147-4" aria-hidden="true"></a>    <span class="op">#&gt;&gt;</span> withLogging&#39;</span>
<span id="cb147-5"><a href="#cb147-5" aria-hidden="true"></a>    <span class="op">#</span> build</span>
<span id="cb147-6"><a href="#cb147-6" aria-hidden="true"></a>    <span class="op">#</span> <span class="fu">print</span></span></code></pre></div>
<p>Now let’s have a look at the definition of the <code>Comonad</code> type class. Being the dual of <code>Monad</code> it defines two functions <code>extract</code> and <code>extend</code> which are the duals of <code>return</code> and <code>(&gt;&gt;=)</code>:</p>
<div class="sourceCode" id="cb148"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb148-1"><a href="#cb148-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Functor</span> w <span class="ot">=&gt;</span> <span class="dt">Comonad</span> w <span class="kw">where</span></span>
<span id="cb148-2"><a href="#cb148-2" aria-hidden="true"></a><span class="ot">    extract ::</span> w a <span class="ot">-&gt;</span> a</span>
<span id="cb148-3"><a href="#cb148-3" aria-hidden="true"></a><span class="ot">    extend  ::</span> (w a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> w a <span class="ot">-&gt;</span> w b</span></code></pre></div>
<p>With the knowledge that <code>((-&gt;) a)</code> is an instance of <code>Functor</code> we can define a <code>Comonad</code> instance for <code>((-&gt;) Options)</code>:</p>
<div class="sourceCode" id="cb149"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb149-1"><a href="#cb149-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="ot">{-# OVERLAPPING #-}</span> <span class="dt">Comonad</span> ((<span class="ot">-&gt;</span>) <span class="dt">Options</span>) <span class="kw">where</span></span>
<span id="cb149-2"><a href="#cb149-2" aria-hidden="true"></a><span class="ot">    extract ::</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> config) <span class="ot">-&gt;</span> config</span>
<span id="cb149-3"><a href="#cb149-3" aria-hidden="true"></a>    extract builder <span class="ot">=</span> builder <span class="fu">mempty</span></span>
<span id="cb149-4"><a href="#cb149-4" aria-hidden="true"></a><span class="ot">    extend ::</span> ((<span class="dt">Options</span> <span class="ot">-&gt;</span> config) <span class="ot">-&gt;</span> config&#39;) <span class="ot">-&gt;</span>  (<span class="dt">Options</span> <span class="ot">-&gt;</span> config) <span class="ot">-&gt;</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> config&#39;)</span>
<span id="cb149-5"><a href="#cb149-5" aria-hidden="true"></a>    extend withFun builder opt2 <span class="ot">=</span> withFun (\opt1 <span class="ot">-&gt;</span> builder (opt1 <span class="op">++</span> opt2))</span></code></pre></div>
<p>Now let’s again look at the functions <code>build</code> and <code>extend''</code>:</p>
<div class="sourceCode" id="cb150"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb150-1"><a href="#cb150-1" aria-hidden="true"></a><span class="ot">build ::</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> <span class="dt">Config</span></span>
<span id="cb150-2"><a href="#cb150-2" aria-hidden="true"></a>build builder <span class="ot">=</span> builder <span class="fu">mempty</span></span>
<span id="cb150-3"><a href="#cb150-3" aria-hidden="true"></a></span>
<span id="cb150-4"><a href="#cb150-4" aria-hidden="true"></a><span class="ot">extend&#39;&#39; ::</span> ((<span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>) <span class="ot">-&gt;</span> (<span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Config</span>)</span>
<span id="cb150-5"><a href="#cb150-5" aria-hidden="true"></a>extend&#39;&#39; withFun builder opt2 <span class="ot">=</span> withFun (\opt1 <span class="ot">-&gt;</span> builder (opt1 <span class="op">++</span> opt2))</span></code></pre></div>
<p>It’s obvious that <code>build</code> and <code>extract</code> are equivalent as well as <code>extend''</code> and <code>extend</code>. So we have been inventing a <code>Comonad</code> without knowing about it.</p>
<p>But we are even more lucky! Our <code>Options</code> type (being just a synonym for <code>[String]</code>) together with the concatenation operator <code>(++)</code> forms a <code>Monoid</code>. And for any <code>Monoid m</code> <code>((-&gt;) m)</code> is a Comonad:</p>
<div class="sourceCode" id="cb151"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb151-1"><a href="#cb151-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monoid</span> m <span class="ot">=&gt;</span> <span class="dt">Comonad</span> ((<span class="ot">-&gt;</span>) m)  <span class="co">-- as defined in Control.Comonad</span></span></code></pre></div>
<p>So we don’t have to define our own instance of Comonad but can rely on the predefined and more generic <code>((-&gt;) m)</code>.</p>
<p>Equipped with this knowledge we define a more generic version of our <code>#&gt;&gt;</code> chaining operator:</p>
<div class="sourceCode" id="cb152"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb152-1"><a href="#cb152-1" aria-hidden="true"></a><span class="ot">(#&gt;) ::</span> <span class="dt">Comonad</span> w <span class="ot">=&gt;</span> w a <span class="ot">-&gt;</span> (w a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> w b</span>
<span id="cb152-2"><a href="#cb152-2" aria-hidden="true"></a>x <span class="op">#&gt;</span> f <span class="ot">=</span> extend f x</span>
<span id="cb152-3"><a href="#cb152-3" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">0</span> <span class="op">#&gt;</span></span></code></pre></div>
<p>Based on this definition we can finally rewrite the user code as follows</p>
<div class="sourceCode" id="cb153"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb153-1"><a href="#cb153-1" aria-hidden="true"></a>    configBuilder</span>
<span id="cb153-2"><a href="#cb153-2" aria-hidden="true"></a>        <span class="op">#&gt;</span> withProfiling&#39;</span>
<span id="cb153-3"><a href="#cb153-3" aria-hidden="true"></a>        <span class="op">#&gt;</span> withOptimization&#39;</span>
<span id="cb153-4"><a href="#cb153-4" aria-hidden="true"></a>        <span class="op">#&gt;</span> withLogging&#39;</span>
<span id="cb153-5"><a href="#cb153-5" aria-hidden="true"></a>        <span class="op">#</span> extract  <span class="co">-- # build would be fine as well</span></span>
<span id="cb153-6"><a href="#cb153-6" aria-hidden="true"></a>        <span class="op">#</span> <span class="fu">print</span></span></code></pre></div>
<p>This section is based on examples from <a href="http://www.haskellforall.com/2013/02/you-could-have-invented-comonads.html">You could have invented Comonads</a>. Please also check this <a href="http://gelisam.blogspot.com/2013/07/comonads-are-neighbourhoods-not-objects.html">blogpost</a> which comments on the notion of <em>comonads as objects</em> in Gabriel Gonzales original posting.</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/FluentApi.hs">Sourcecode for this section</a>.</p>
<h2 id="beyond-type-class-patterns">Beyond type class patterns</h2>
<p>The patterns presented in this chapter don’t have a direct correspondence to specific type classes. They rather map to more general concepts of functional programming.</p>
<h3 id="dependency-injection-parameter-binding-partial-application">Dependency Injection → Parameter Binding, Partial Application</h3>
<blockquote>
<p>[…] Dependency injection is a technique whereby one object (or static method) supplies the dependencies of another object. A dependency is an object that can be used (a service). An injection is the passing of a dependency to a dependent object (a client) that would use it. The service is made part of the client’s state. Passing the service to the client, rather than allowing a client to build or find the service, is the fundamental requirement of the pattern.</p>
<p>This fundamental requirement means that using values (services) produced within the class from new or static methods is prohibited. The client should accept values passed in from outside. This allows the client to make acquiring dependencies someone else’s problem. (Quoted from <a href="https://en.wikipedia.org/wiki/Dependency_injection">Wikipedia</a>)</p>
</blockquote>
<p>In functional languages this is achieved by binding the formal parameters of a function to values.</p>
<p>Let’s see how this works in a real world example. Say we have been building a renderer that allows to produce a markdown representation of a data type that represents the table of contents of a document:</p>
<div class="sourceCode" id="cb154"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb154-1"><a href="#cb154-1" aria-hidden="true"></a><span class="co">-- | a table of contents consists of a heading and a list of entries</span></span>
<span id="cb154-2"><a href="#cb154-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">TableOfContents</span> <span class="ot">=</span> <span class="dt">Section</span> <span class="dt">Heading</span> [<span class="dt">TocEntry</span>]</span>
<span id="cb154-3"><a href="#cb154-3" aria-hidden="true"></a></span>
<span id="cb154-4"><a href="#cb154-4" aria-hidden="true"></a><span class="co">-- | a ToC entry can be a heading or a sub-table of contents</span></span>
<span id="cb154-5"><a href="#cb154-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">TocEntry</span> <span class="ot">=</span> <span class="dt">Head</span> <span class="dt">Heading</span> <span class="op">|</span> <span class="dt">Sub</span> <span class="dt">TableOfContents</span></span>
<span id="cb154-6"><a href="#cb154-6" aria-hidden="true"></a></span>
<span id="cb154-7"><a href="#cb154-7" aria-hidden="true"></a><span class="co">-- | a heading can be just a title string or an url with a title and the actual link</span></span>
<span id="cb154-8"><a href="#cb154-8" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Heading</span> <span class="ot">=</span> <span class="dt">Title</span> <span class="dt">String</span> <span class="op">|</span> <span class="dt">Url</span> <span class="dt">String</span> <span class="dt">String</span></span>
<span id="cb154-9"><a href="#cb154-9" aria-hidden="true"></a></span>
<span id="cb154-10"><a href="#cb154-10" aria-hidden="true"></a><span class="co">-- | render a ToC entry as a Markdown String with the proper indentation</span></span>
<span id="cb154-11"><a href="#cb154-11" aria-hidden="true"></a><span class="ot">teToMd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">TocEntry</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb154-12"><a href="#cb154-12" aria-hidden="true"></a>teToMd depth (<span class="dt">Head</span> <span class="fu">head</span>) <span class="ot">=</span> headToMd depth <span class="fu">head</span></span>
<span id="cb154-13"><a href="#cb154-13" aria-hidden="true"></a>teToMd depth (<span class="dt">Sub</span> toc)   <span class="ot">=</span> tocToMd  depth toc</span>
<span id="cb154-14"><a href="#cb154-14" aria-hidden="true"></a></span>
<span id="cb154-15"><a href="#cb154-15" aria-hidden="true"></a><span class="co">-- | render a heading as a Markdown String with the proper indentation</span></span>
<span id="cb154-16"><a href="#cb154-16" aria-hidden="true"></a><span class="ot">headToMd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Heading</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb154-17"><a href="#cb154-17" aria-hidden="true"></a>headToMd depth (<span class="dt">Title</span> str)     <span class="ot">=</span> indent depth <span class="op">++</span> <span class="st">&quot;* &quot;</span> <span class="op">++</span> str <span class="op">++</span> <span class="st">&quot;\n&quot;</span></span>
<span id="cb154-18"><a href="#cb154-18" aria-hidden="true"></a>headToMd depth (<span class="dt">Url</span> title url) <span class="ot">=</span> indent depth <span class="op">++</span> <span class="st">&quot;* [&quot;</span> <span class="op">++</span> title <span class="op">++</span> <span class="st">&quot;](&quot;</span> <span class="op">++</span> url <span class="op">++</span> <span class="st">&quot;)\n&quot;</span></span>
<span id="cb154-19"><a href="#cb154-19" aria-hidden="true"></a></span>
<span id="cb154-20"><a href="#cb154-20" aria-hidden="true"></a><span class="co">-- | convert a ToC to Markdown String. The parameter depth is used for proper indentation.</span></span>
<span id="cb154-21"><a href="#cb154-21" aria-hidden="true"></a><span class="ot">tocToMd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">TableOfContents</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb154-22"><a href="#cb154-22" aria-hidden="true"></a>tocToMd depth (<span class="dt">Section</span> heading entries) <span class="ot">=</span> headToMd depth heading <span class="op">++</span> <span class="fu">concatMap</span> (teToMd (depth<span class="op">+</span><span class="dv">2</span>)) entries</span>
<span id="cb154-23"><a href="#cb154-23" aria-hidden="true"></a></span>
<span id="cb154-24"><a href="#cb154-24" aria-hidden="true"></a><span class="co">-- | produce a String of length n, consisting only of blanks</span></span>
<span id="cb154-25"><a href="#cb154-25" aria-hidden="true"></a><span class="ot">indent ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb154-26"><a href="#cb154-26" aria-hidden="true"></a>indent n <span class="ot">=</span> <span class="fu">replicate</span> n <span class="ch">&#39; &#39;</span></span>
<span id="cb154-27"><a href="#cb154-27" aria-hidden="true"></a></span>
<span id="cb154-28"><a href="#cb154-28" aria-hidden="true"></a><span class="co">-- | render a ToC as a Text (consisting of properly indented Markdown)</span></span>
<span id="cb154-29"><a href="#cb154-29" aria-hidden="true"></a><span class="ot">tocToMDText ::</span> <span class="dt">TableOfContents</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span></span>
<span id="cb154-30"><a href="#cb154-30" aria-hidden="true"></a>tocToMDText <span class="ot">=</span> T.pack <span class="op">.</span> tocToMd <span class="dv">0</span></span></code></pre></div>
<p>We can use these definitions to create a table of contents data structure and to render it to markdown syntax:</p>
<div class="sourceCode" id="cb155"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb155-1"><a href="#cb155-1" aria-hidden="true"></a>demoDI <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb155-2"><a href="#cb155-2" aria-hidden="true"></a>    <span class="kw">let</span> toc <span class="ot">=</span> <span class="dt">Section</span> (<span class="dt">Title</span> <span class="st">&quot;Chapter 1&quot;</span>)</span>
<span id="cb155-3"><a href="#cb155-3" aria-hidden="true"></a>                [ <span class="dt">Sub</span> <span class="op">$</span> <span class="dt">Section</span> (<span class="dt">Title</span> <span class="st">&quot;Section a&quot;</span>)</span>
<span id="cb155-4"><a href="#cb155-4" aria-hidden="true"></a>                    [<span class="dt">Head</span> <span class="op">$</span> <span class="dt">Title</span> <span class="st">&quot;First Heading&quot;</span>,</span>
<span id="cb155-5"><a href="#cb155-5" aria-hidden="true"></a>                     <span class="dt">Head</span> <span class="op">$</span> <span class="dt">Url</span> <span class="st">&quot;Second Heading&quot;</span> <span class="st">&quot;http://the.url&quot;</span>]</span>
<span id="cb155-6"><a href="#cb155-6" aria-hidden="true"></a>                , <span class="dt">Sub</span> <span class="op">$</span> <span class="dt">Section</span> (<span class="dt">Url</span> <span class="st">&quot;Section b&quot;</span> <span class="st">&quot;http://the.section.b.url&quot;</span>)</span>
<span id="cb155-7"><a href="#cb155-7" aria-hidden="true"></a>                    [ <span class="dt">Sub</span> <span class="op">$</span> <span class="dt">Section</span> (<span class="dt">Title</span> <span class="st">&quot;UnderSection b1&quot;</span>)</span>
<span id="cb155-8"><a href="#cb155-8" aria-hidden="true"></a>                        [<span class="dt">Head</span> <span class="op">$</span> <span class="dt">Title</span> <span class="st">&quot;First&quot;</span>, <span class="dt">Head</span> <span class="op">$</span> <span class="dt">Title</span> <span class="st">&quot;Second&quot;</span>]]]</span>
<span id="cb155-9"><a href="#cb155-9" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> T.unpack <span class="op">$</span> tocToMDText toc</span>
<span id="cb155-10"><a href="#cb155-10" aria-hidden="true"></a></span>
<span id="cb155-11"><a href="#cb155-11" aria-hidden="true"></a><span class="co">-- and the in ghci:</span></span>
<span id="cb155-12"><a href="#cb155-12" aria-hidden="true"></a>ghci <span class="op">&gt;</span> demoDI</span>
<span id="cb155-13"><a href="#cb155-13" aria-hidden="true"></a><span class="op">*</span> <span class="dt">Chapter</span> <span class="dv">1</span></span>
<span id="cb155-14"><a href="#cb155-14" aria-hidden="true"></a>  <span class="op">*</span> <span class="dt">Section</span> a</span>
<span id="cb155-15"><a href="#cb155-15" aria-hidden="true"></a>    <span class="op">*</span> <span class="dt">First</span> <span class="dt">Heading</span></span>
<span id="cb155-16"><a href="#cb155-16" aria-hidden="true"></a>    <span class="op">*</span> [<span class="dt">Second</span> <span class="dt">Heading</span>](http<span class="op">://</span>the<span class="op">.</span>url)</span>
<span id="cb155-17"><a href="#cb155-17" aria-hidden="true"></a>  <span class="op">*</span> [<span class="dt">Section</span> b](http<span class="op">://</span>the<span class="op">.</span>section<span class="op">.</span>b<span class="op">.</span>url)</span>
<span id="cb155-18"><a href="#cb155-18" aria-hidden="true"></a>    <span class="op">*</span> <span class="dt">UnderSection</span> b1</span>
<span id="cb155-19"><a href="#cb155-19" aria-hidden="true"></a>      <span class="op">*</span> <span class="dt">First</span></span>
<span id="cb155-20"><a href="#cb155-20" aria-hidden="true"></a>      <span class="op">*</span> <span class="dt">Second</span></span></code></pre></div>
<p>So far so good. But of course we also want to be able to render our <code>TableOfContent</code> to HTML. As we don’t want to repeat all the coding work for HTML we think about using an existing Markdown library.</p>
<p>But we don’t want any hard coded dependencies to a specific library in our code.</p>
<p>With these design ideas in mind we specify a rendering processor:</p>
<div class="sourceCode" id="cb156"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb156-1"><a href="#cb156-1" aria-hidden="true"></a><span class="co">-- | render a ToC as a Text with html markup.</span></span>
<span id="cb156-2"><a href="#cb156-2" aria-hidden="true"></a><span class="co">--   we specify this function as a chain of parse and rendering functions</span></span>
<span id="cb156-3"><a href="#cb156-3" aria-hidden="true"></a><span class="co">--   which must be provided externally</span></span>
<span id="cb156-4"><a href="#cb156-4" aria-hidden="true"></a><span class="ot">tocToHtmlText ::</span> (<span class="dt">TableOfContents</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span>) <span class="co">-- 1. a renderer function from ToC to Text with markdown markups</span></span>
<span id="cb156-5"><a href="#cb156-5" aria-hidden="true"></a>              <span class="ot">-&gt;</span> (<span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">MarkDown</span>)        <span class="co">-- 2. a parser function from Text to a MarkDown document</span></span>
<span id="cb156-6"><a href="#cb156-6" aria-hidden="true"></a>              <span class="ot">-&gt;</span> (<span class="dt">MarkDown</span> <span class="ot">-&gt;</span> <span class="dt">HTML</span>)          <span class="co">-- 3. a renderer function from MarkDown to an HTML document</span></span>
<span id="cb156-7"><a href="#cb156-7" aria-hidden="true"></a>              <span class="ot">-&gt;</span> (<span class="dt">HTML</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span>)            <span class="co">-- 4. a renderer function from HTML to Text</span></span>
<span id="cb156-8"><a href="#cb156-8" aria-hidden="true"></a>              <span class="ot">-&gt;</span> <span class="dt">TableOfContents</span>             <span class="co">-- the actual ToC to be rendered</span></span>
<span id="cb156-9"><a href="#cb156-9" aria-hidden="true"></a>              <span class="ot">-&gt;</span> <span class="dt">T.Text</span>                      <span class="co">-- the Text output (containing html markup)</span></span>
<span id="cb156-10"><a href="#cb156-10" aria-hidden="true"></a>tocToHtmlText tocToMdText textToMd mdToHtml htmlToText <span class="ot">=</span></span>
<span id="cb156-11"><a href="#cb156-11" aria-hidden="true"></a>    tocToMdText <span class="op">&gt;&gt;&gt;</span>    <span class="co">-- 1. render a ToC as a Text (consisting of properly indented Markdown)</span></span>
<span id="cb156-12"><a href="#cb156-12" aria-hidden="true"></a>    textToMd    <span class="op">&gt;&gt;&gt;</span>    <span class="co">-- 2. parse text with Markdown to a MarkDown data structure</span></span>
<span id="cb156-13"><a href="#cb156-13" aria-hidden="true"></a>    mdToHtml    <span class="op">&gt;&gt;&gt;</span>    <span class="co">-- 3. convert the MarkDown data to an HTML data structure</span></span>
<span id="cb156-14"><a href="#cb156-14" aria-hidden="true"></a>    htmlToText         <span class="co">-- 4. render the HTML data to a Text with hmtl markup</span></span></code></pre></div>
<p>The idea is simple:</p>
<ol type="1">
<li>We render our <code>TableOfContents</code> to a Markdown <code>Text</code> (e.g. using our already defined <code>tocToMDText</code> function).</li>
<li>This text is then parsed into a <code>MarkDown</code> data structure.</li>
<li>The <code>Markdown</code> document is rendered into an <code>HTML</code> data structure,</li>
<li>which is then rendered to a <code>Text</code> containing html markup.</li>
</ol>
<p>To notate the chaining of functions in their natural order I have used the <code>&gt;&gt;&gt;</code> operator from <code>Control.Arrow</code> which is defined as follows:</p>
<div class="sourceCode" id="cb157"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb157-1"><a href="#cb157-1" aria-hidden="true"></a>f <span class="op">&gt;&gt;&gt;</span> g <span class="ot">=</span> g <span class="op">.</span> f</span></code></pre></div>
<p>So <code>&gt;&gt;&gt;</code> is just left to right composition of functions which makes reading of longer composition chains much easier to read (at least for people trained to read from left to right).</p>
<p>Please note that at this point we have not defined the types <code>HTML</code> and <code>Markdown</code>. They are just abstract placeholders and we just expect them to be provided externally. In the same way we just specified that there must be functions available that can be bound to the formal parameters <code>tocToText</code>, <code>textToMd</code>, <code>mdToHtml</code> and <code>htmlToText</code>.</p>
<p>If such functions are avaliable we can <em>inject</em> them (or rather bind them to the formal parameters) as in the following definition:</p>
<div class="sourceCode" id="cb158"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb158-1"><a href="#cb158-1" aria-hidden="true"></a><span class="co">-- | a default implementation of a ToC to html Text renderer.</span></span>
<span id="cb158-2"><a href="#cb158-2" aria-hidden="true"></a><span class="co">--   this function is constructed by partially applying `tocToHtmlText` to four functions</span></span>
<span id="cb158-3"><a href="#cb158-3" aria-hidden="true"></a><span class="co">--   matching the signature of `tocToHtmlText`.</span></span>
<span id="cb158-4"><a href="#cb158-4" aria-hidden="true"></a><span class="ot">defaultTocToHtmlText ::</span> <span class="dt">TableOfContents</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span></span>
<span id="cb158-5"><a href="#cb158-5" aria-hidden="true"></a>defaultTocToHtmlText <span class="ot">=</span></span>
<span id="cb158-6"><a href="#cb158-6" aria-hidden="true"></a>    tocToHtmlText</span>
<span id="cb158-7"><a href="#cb158-7" aria-hidden="true"></a>        tocToMDText         <span class="co">-- the ToC to markdown Text renderer as defined above</span></span>
<span id="cb158-8"><a href="#cb158-8" aria-hidden="true"></a>        textToMarkDown      <span class="co">-- a MarkDown parser, externally provided via import</span></span>
<span id="cb158-9"><a href="#cb158-9" aria-hidden="true"></a>        markDownToHtml      <span class="co">-- a MarkDown to HTML renderer, externally provided via import</span></span>
<span id="cb158-10"><a href="#cb158-10" aria-hidden="true"></a>        htmlToText          <span class="co">-- a HTML to Text with html markup, externally provided via import</span></span></code></pre></div>
<p>This definition assumes that apart from <code>tocToMDText</code> which has already been defined the functions <code>textToMarkDown</code>, <code>markDownToHtml</code> and <code>htmlToText</code> are also present in the current scope. This is achieved by the following import statement:</p>
<div class="sourceCode" id="cb159"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb159-1"><a href="#cb159-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">CheapskateRenderer</span> (<span class="dt">HTML</span>, <span class="dt">MarkDown</span>, textToMarkDown, markDownToHtml, htmlToText)</span></code></pre></div>
<p>The implementation in file CheapskateRenderer.hs then looks like follows:</p>
<div class="sourceCode" id="cb160"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb160-1"><a href="#cb160-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">CheapskateRenderer</span> <span class="kw">where</span></span>
<span id="cb160-2"><a href="#cb160-2" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Cheapskate</span>                      <span class="kw">as</span> <span class="dt">C</span></span>
<span id="cb160-3"><a href="#cb160-3" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text</span>                       <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb160-4"><a href="#cb160-4" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Text.Blaze.Html</span>                 <span class="kw">as</span> <span class="dt">H</span></span>
<span id="cb160-5"><a href="#cb160-5" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Text.Blaze.Html.Renderer.Pretty</span> <span class="kw">as</span> <span class="dt">R</span></span>
<span id="cb160-6"><a href="#cb160-6" aria-hidden="true"></a></span>
<span id="cb160-7"><a href="#cb160-7" aria-hidden="true"></a><span class="co">-- | a type synonym that hides the Cheapskate internal Doc type</span></span>
<span id="cb160-8"><a href="#cb160-8" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">MarkDown</span> <span class="ot">=</span> <span class="dt">C.Doc</span></span>
<span id="cb160-9"><a href="#cb160-9" aria-hidden="true"></a></span>
<span id="cb160-10"><a href="#cb160-10" aria-hidden="true"></a><span class="co">-- | a type synonym the hides the Blaze.Html internal Html type</span></span>
<span id="cb160-11"><a href="#cb160-11" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">HTML</span> <span class="ot">=</span> <span class="dt">H.Html</span></span>
<span id="cb160-12"><a href="#cb160-12" aria-hidden="true"></a></span>
<span id="cb160-13"><a href="#cb160-13" aria-hidden="true"></a><span class="co">-- | parse Markdown from a Text (with markdown markup). Using the Cheapskate library.</span></span>
<span id="cb160-14"><a href="#cb160-14" aria-hidden="true"></a><span class="ot">textToMarkDown ::</span> <span class="dt">T.Text</span> <span class="ot">-&gt;</span> <span class="dt">MarkDown</span></span>
<span id="cb160-15"><a href="#cb160-15" aria-hidden="true"></a>textToMarkDown <span class="ot">=</span> C.markdown C.def</span>
<span id="cb160-16"><a href="#cb160-16" aria-hidden="true"></a></span>
<span id="cb160-17"><a href="#cb160-17" aria-hidden="true"></a><span class="co">-- | convert MarkDown to HTML by using the Blaze.Html library</span></span>
<span id="cb160-18"><a href="#cb160-18" aria-hidden="true"></a><span class="ot">markDownToHtml ::</span> <span class="dt">MarkDown</span> <span class="ot">-&gt;</span> <span class="dt">HTML</span></span>
<span id="cb160-19"><a href="#cb160-19" aria-hidden="true"></a>markDownToHtml <span class="ot">=</span> H.toHtml</span>
<span id="cb160-20"><a href="#cb160-20" aria-hidden="true"></a></span>
<span id="cb160-21"><a href="#cb160-21" aria-hidden="true"></a><span class="co">-- | rendering a Text with html markup from HTML. Using Blaze again.</span></span>
<span id="cb160-22"><a href="#cb160-22" aria-hidden="true"></a><span class="ot">htmlToText ::</span> <span class="dt">HTML</span> <span class="ot">-&gt;</span> <span class="dt">T.Text</span></span>
<span id="cb160-23"><a href="#cb160-23" aria-hidden="true"></a>htmlToText <span class="ot">=</span> T.pack <span class="op">.</span> R.renderHtml</span></code></pre></div>
<p>Now let’s try it out:</p>
<div class="sourceCode" id="cb161"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb161-1"><a href="#cb161-1" aria-hidden="true"></a>demoDI <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb161-2"><a href="#cb161-2" aria-hidden="true"></a>    <span class="kw">let</span> toc <span class="ot">=</span> <span class="dt">Section</span> (<span class="dt">Title</span> <span class="st">&quot;Chapter 1&quot;</span>)</span>
<span id="cb161-3"><a href="#cb161-3" aria-hidden="true"></a>                [ <span class="dt">Sub</span> <span class="op">$</span> <span class="dt">Section</span> (<span class="dt">Title</span> <span class="st">&quot;Section a&quot;</span>)</span>
<span id="cb161-4"><a href="#cb161-4" aria-hidden="true"></a>                    [<span class="dt">Head</span> <span class="op">$</span> <span class="dt">Title</span> <span class="st">&quot;First Heading&quot;</span>,</span>
<span id="cb161-5"><a href="#cb161-5" aria-hidden="true"></a>                     <span class="dt">Head</span> <span class="op">$</span> <span class="dt">Url</span> <span class="st">&quot;Second Heading&quot;</span> <span class="st">&quot;http://the.url&quot;</span>]</span>
<span id="cb161-6"><a href="#cb161-6" aria-hidden="true"></a>                , <span class="dt">Sub</span> <span class="op">$</span> <span class="dt">Section</span> (<span class="dt">Url</span> <span class="st">&quot;Section b&quot;</span> <span class="st">&quot;http://the.section.b.url&quot;</span>)</span>
<span id="cb161-7"><a href="#cb161-7" aria-hidden="true"></a>                    [ <span class="dt">Sub</span> <span class="op">$</span> <span class="dt">Section</span> (<span class="dt">Title</span> <span class="st">&quot;UnderSection b1&quot;</span>)</span>
<span id="cb161-8"><a href="#cb161-8" aria-hidden="true"></a>                        [<span class="dt">Head</span> <span class="op">$</span> <span class="dt">Title</span> <span class="st">&quot;First&quot;</span>, <span class="dt">Head</span> <span class="op">$</span> <span class="dt">Title</span> <span class="st">&quot;Second&quot;</span>]]]</span>
<span id="cb161-9"><a href="#cb161-9" aria-hidden="true"></a></span>
<span id="cb161-10"><a href="#cb161-10" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> T.unpack <span class="op">$</span> tocToMDText toc</span>
<span id="cb161-11"><a href="#cb161-11" aria-hidden="true"></a></span>
<span id="cb161-12"><a href="#cb161-12" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> T.unpack <span class="op">$</span> defaultTocToHtmlText toc  </span>
<span id="cb161-13"><a href="#cb161-13" aria-hidden="true"></a></span>
<span id="cb161-14"><a href="#cb161-14" aria-hidden="true"></a><span class="co">-- using this in ghci:</span></span>
<span id="cb161-15"><a href="#cb161-15" aria-hidden="true"></a>ghci <span class="op">&gt;</span> demoDI</span>
<span id="cb161-16"><a href="#cb161-16" aria-hidden="true"></a><span class="op">*</span> <span class="dt">Chapter</span> <span class="dv">1</span></span>
<span id="cb161-17"><a href="#cb161-17" aria-hidden="true"></a>  <span class="op">*</span> <span class="dt">Section</span> a</span>
<span id="cb161-18"><a href="#cb161-18" aria-hidden="true"></a>    <span class="op">*</span> <span class="dt">First</span> <span class="dt">Heading</span></span>
<span id="cb161-19"><a href="#cb161-19" aria-hidden="true"></a>    <span class="op">*</span> [<span class="dt">Second</span> <span class="dt">Heading</span>](http<span class="op">://</span>the<span class="op">.</span>url)</span>
<span id="cb161-20"><a href="#cb161-20" aria-hidden="true"></a>  <span class="op">*</span> [<span class="dt">Section</span> b](http<span class="op">://</span>the<span class="op">.</span>section<span class="op">.</span>b<span class="op">.</span>url)</span>
<span id="cb161-21"><a href="#cb161-21" aria-hidden="true"></a>    <span class="op">*</span> <span class="dt">UnderSection</span> b1</span>
<span id="cb161-22"><a href="#cb161-22" aria-hidden="true"></a>      <span class="op">*</span> <span class="dt">First</span></span>
<span id="cb161-23"><a href="#cb161-23" aria-hidden="true"></a>      <span class="op">*</span> <span class="dt">Second</span></span>
<span id="cb161-24"><a href="#cb161-24" aria-hidden="true"></a></span>
<span id="cb161-25"><a href="#cb161-25" aria-hidden="true"></a><span class="op">&lt;</span>ul<span class="op">&gt;</span></span>
<span id="cb161-26"><a href="#cb161-26" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;</span><span class="dt">Chapter</span> <span class="dv">1</span></span>
<span id="cb161-27"><a href="#cb161-27" aria-hidden="true"></a><span class="op">&lt;</span>ul<span class="op">&gt;</span></span>
<span id="cb161-28"><a href="#cb161-28" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;</span><span class="dt">Section</span> a</span>
<span id="cb161-29"><a href="#cb161-29" aria-hidden="true"></a><span class="op">&lt;</span>ul<span class="op">&gt;</span></span>
<span id="cb161-30"><a href="#cb161-30" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;</span><span class="dt">First</span> <span class="dt">Heading</span><span class="op">&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-31"><a href="#cb161-31" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;&lt;</span>a href<span class="ot">=</span><span class="st">&quot;http://the.url&quot;</span><span class="op">&gt;</span><span class="dt">Second</span> <span class="dt">Heading</span><span class="op">&lt;/</span>a<span class="op">&gt;&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-32"><a href="#cb161-32" aria-hidden="true"></a><span class="op">&lt;/</span>ul<span class="op">&gt;&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-33"><a href="#cb161-33" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;&lt;</span>a href<span class="ot">=</span><span class="st">&quot;http://the.section.b.url&quot;</span><span class="op">&gt;</span><span class="dt">Section</span> b<span class="op">&lt;/</span>a<span class="op">&gt;</span></span>
<span id="cb161-34"><a href="#cb161-34" aria-hidden="true"></a><span class="op">&lt;</span>ul<span class="op">&gt;</span></span>
<span id="cb161-35"><a href="#cb161-35" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;</span><span class="dt">UnderSection</span> b1</span>
<span id="cb161-36"><a href="#cb161-36" aria-hidden="true"></a><span class="op">&lt;</span>ul<span class="op">&gt;</span></span>
<span id="cb161-37"><a href="#cb161-37" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;</span><span class="dt">First</span><span class="op">&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-38"><a href="#cb161-38" aria-hidden="true"></a><span class="op">&lt;</span>li<span class="op">&gt;</span><span class="dt">Second</span><span class="op">&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-39"><a href="#cb161-39" aria-hidden="true"></a><span class="op">&lt;/</span>ul<span class="op">&gt;&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-40"><a href="#cb161-40" aria-hidden="true"></a><span class="op">&lt;/</span>ul<span class="op">&gt;&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-41"><a href="#cb161-41" aria-hidden="true"></a><span class="op">&lt;/</span>ul<span class="op">&gt;&lt;/</span>li<span class="op">&gt;</span></span>
<span id="cb161-42"><a href="#cb161-42" aria-hidden="true"></a><span class="op">&lt;/</span>ul<span class="op">&gt;</span></span></code></pre></div>
<p>By inlining this output into the present Markdown document we can see that Markdown and HTML rendering produce the same structure:</p>
<blockquote>
<ul>
<li>Chapter 1
<ul>
<li>Section a
<ul>
<li>First Heading</li>
<li><a href="http://the.url">Second Heading</a></li>
</ul></li>
<li><a href="http://the.section.b.url">Section b</a>
<ul>
<li>UnderSection b1
<ul>
<li>First</li>
<li>Second</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<ul>
<li>
Chapter 1
<ul>
<li>
Section a
<ul>
<li>
First Heading
</li>
<li>
<a href="http://the.url">Second Heading</a>
</li>
</ul>
</li>
<li>
<a href="http://the.section.b.url">Section b</a>
<ul>
<li>
UnderSection b1
<ul>
<li>
First
</li>
<li>
Second
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/DependencyInjection.hs">Sourcecode for this section</a></p>
<h3 id="command-functions-as-first-class-citizens">Command → Functions as First Class Citizens</h3>
<blockquote>
<p>In object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.</p>
<p><a href="https://en.wikipedia.org/wiki/Command_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<p>The Wikipedia article features implementation of a simple example in several languages. I’m quoting the Java version here:</p>
<div class="sourceCode" id="cb162"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb162-1"><a href="#cb162-1" aria-hidden="true"></a><span class="kw">import</span><span class="im"> java.util.ArrayList;</span></span>
<span id="cb162-2"><a href="#cb162-2" aria-hidden="true"></a></span>
<span id="cb162-3"><a href="#cb162-3" aria-hidden="true"></a><span class="co">/**</span> The Command interface <span class="co">*/</span></span>
<span id="cb162-4"><a href="#cb162-4" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">interface</span> Command {</span>
<span id="cb162-5"><a href="#cb162-5" aria-hidden="true"></a>   <span class="dt">void</span> <span class="fu">execute</span>();</span>
<span id="cb162-6"><a href="#cb162-6" aria-hidden="true"></a>}</span>
<span id="cb162-7"><a href="#cb162-7" aria-hidden="true"></a></span>
<span id="cb162-8"><a href="#cb162-8" aria-hidden="true"></a><span class="co">/**</span> The Invoker class <span class="co">*/</span></span>
<span id="cb162-9"><a href="#cb162-9" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> Switch {</span>
<span id="cb162-10"><a href="#cb162-10" aria-hidden="true"></a>   <span class="kw">private</span> <span class="dt">final</span> <span class="bu">ArrayList</span>&lt;Command&gt; history = <span class="kw">new</span> <span class="bu">ArrayList</span>&lt;&gt;();</span>
<span id="cb162-11"><a href="#cb162-11" aria-hidden="true"></a></span>
<span id="cb162-12"><a href="#cb162-12" aria-hidden="true"></a>   <span class="kw">public</span> <span class="dt">void</span> <span class="fu">storeAndExecute</span>(Command cmd) {</span>
<span id="cb162-13"><a href="#cb162-13" aria-hidden="true"></a>      <span class="kw">this</span>.<span class="fu">history</span>.<span class="fu">add</span>(cmd);</span>
<span id="cb162-14"><a href="#cb162-14" aria-hidden="true"></a>      cmd.<span class="fu">execute</span>();</span>
<span id="cb162-15"><a href="#cb162-15" aria-hidden="true"></a>   }</span>
<span id="cb162-16"><a href="#cb162-16" aria-hidden="true"></a>}</span>
<span id="cb162-17"><a href="#cb162-17" aria-hidden="true"></a></span>
<span id="cb162-18"><a href="#cb162-18" aria-hidden="true"></a><span class="co">/**</span> The Receiver class <span class="co">*/</span></span>
<span id="cb162-19"><a href="#cb162-19" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> Light {</span>
<span id="cb162-20"><a href="#cb162-20" aria-hidden="true"></a>   <span class="kw">public</span> <span class="dt">void</span> <span class="fu">turnOn</span>() {</span>
<span id="cb162-21"><a href="#cb162-21" aria-hidden="true"></a>      <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;The light is on&quot;</span>);</span>
<span id="cb162-22"><a href="#cb162-22" aria-hidden="true"></a>   }</span>
<span id="cb162-23"><a href="#cb162-23" aria-hidden="true"></a></span>
<span id="cb162-24"><a href="#cb162-24" aria-hidden="true"></a>   <span class="kw">public</span> <span class="dt">void</span> <span class="fu">turnOff</span>() {</span>
<span id="cb162-25"><a href="#cb162-25" aria-hidden="true"></a>      <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;The light is off&quot;</span>);</span>
<span id="cb162-26"><a href="#cb162-26" aria-hidden="true"></a>   }</span>
<span id="cb162-27"><a href="#cb162-27" aria-hidden="true"></a>}</span>
<span id="cb162-28"><a href="#cb162-28" aria-hidden="true"></a></span>
<span id="cb162-29"><a href="#cb162-29" aria-hidden="true"></a><span class="co">/**</span> The Command for turning on the light <span class="co">-</span> ConcreteCommand <span class="co">#1</span> <span class="co">*/</span></span>
<span id="cb162-30"><a href="#cb162-30" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> FlipUpCommand <span class="kw">implements</span> Command {</span>
<span id="cb162-31"><a href="#cb162-31" aria-hidden="true"></a>   <span class="kw">private</span> <span class="dt">final</span> Light light;</span>
<span id="cb162-32"><a href="#cb162-32" aria-hidden="true"></a></span>
<span id="cb162-33"><a href="#cb162-33" aria-hidden="true"></a>   <span class="kw">public</span> <span class="fu">FlipUpCommand</span>(Light light) {</span>
<span id="cb162-34"><a href="#cb162-34" aria-hidden="true"></a>      <span class="kw">this</span>.<span class="fu">light</span> = light;</span>
<span id="cb162-35"><a href="#cb162-35" aria-hidden="true"></a>   }</span>
<span id="cb162-36"><a href="#cb162-36" aria-hidden="true"></a></span>
<span id="cb162-37"><a href="#cb162-37" aria-hidden="true"></a>   <span class="at">@Override</span>    <span class="co">// Command</span></span>
<span id="cb162-38"><a href="#cb162-38" aria-hidden="true"></a>   <span class="kw">public</span> <span class="dt">void</span> <span class="fu">execute</span>() {</span>
<span id="cb162-39"><a href="#cb162-39" aria-hidden="true"></a>      light.<span class="fu">turnOn</span>();</span>
<span id="cb162-40"><a href="#cb162-40" aria-hidden="true"></a>   }</span>
<span id="cb162-41"><a href="#cb162-41" aria-hidden="true"></a>}</span>
<span id="cb162-42"><a href="#cb162-42" aria-hidden="true"></a></span>
<span id="cb162-43"><a href="#cb162-43" aria-hidden="true"></a><span class="co">/**</span> The Command for turning off the light <span class="co">-</span> ConcreteCommand <span class="co">#2</span> <span class="co">*/</span></span>
<span id="cb162-44"><a href="#cb162-44" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> FlipDownCommand <span class="kw">implements</span> Command {</span>
<span id="cb162-45"><a href="#cb162-45" aria-hidden="true"></a>   <span class="kw">private</span> <span class="dt">final</span> Light light;</span>
<span id="cb162-46"><a href="#cb162-46" aria-hidden="true"></a></span>
<span id="cb162-47"><a href="#cb162-47" aria-hidden="true"></a>   <span class="kw">public</span> <span class="fu">FlipDownCommand</span>(Light light) {</span>
<span id="cb162-48"><a href="#cb162-48" aria-hidden="true"></a>      <span class="kw">this</span>.<span class="fu">light</span> = light;</span>
<span id="cb162-49"><a href="#cb162-49" aria-hidden="true"></a>   }</span>
<span id="cb162-50"><a href="#cb162-50" aria-hidden="true"></a></span>
<span id="cb162-51"><a href="#cb162-51" aria-hidden="true"></a>   <span class="at">@Override</span>    <span class="co">// Command</span></span>
<span id="cb162-52"><a href="#cb162-52" aria-hidden="true"></a>   <span class="kw">public</span> <span class="dt">void</span> <span class="fu">execute</span>() {</span>
<span id="cb162-53"><a href="#cb162-53" aria-hidden="true"></a>      light.<span class="fu">turnOff</span>();</span>
<span id="cb162-54"><a href="#cb162-54" aria-hidden="true"></a>   }</span>
<span id="cb162-55"><a href="#cb162-55" aria-hidden="true"></a>}</span>
<span id="cb162-56"><a href="#cb162-56" aria-hidden="true"></a></span>
<span id="cb162-57"><a href="#cb162-57" aria-hidden="true"></a><span class="co">/* The test class or client */</span></span>
<span id="cb162-58"><a href="#cb162-58" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> PressSwitch {</span>
<span id="cb162-59"><a href="#cb162-59" aria-hidden="true"></a>   <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="dt">final</span> <span class="bu">String</span>[] arguments){</span>
<span id="cb162-60"><a href="#cb162-60" aria-hidden="true"></a>      <span class="co">// Check number of arguments</span></span>
<span id="cb162-61"><a href="#cb162-61" aria-hidden="true"></a>      <span class="kw">if</span> (arguments.<span class="fu">length</span> != <span class="dv">1</span>) {</span>
<span id="cb162-62"><a href="#cb162-62" aria-hidden="true"></a>         <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;Argument </span><span class="sc">\&quot;</span><span class="st">ON</span><span class="sc">\&quot;</span><span class="st"> or </span><span class="sc">\&quot;</span><span class="st">OFF</span><span class="sc">\&quot;</span><span class="st"> is required!&quot;</span>);</span>
<span id="cb162-63"><a href="#cb162-63" aria-hidden="true"></a>         <span class="bu">System</span>.<span class="fu">exit</span>(-<span class="dv">1</span>);</span>
<span id="cb162-64"><a href="#cb162-64" aria-hidden="true"></a>      }</span>
<span id="cb162-65"><a href="#cb162-65" aria-hidden="true"></a></span>
<span id="cb162-66"><a href="#cb162-66" aria-hidden="true"></a>      Light lamp = <span class="kw">new</span> <span class="fu">Light</span>();</span>
<span id="cb162-67"><a href="#cb162-67" aria-hidden="true"></a></span>
<span id="cb162-68"><a href="#cb162-68" aria-hidden="true"></a>      Command switchUp = <span class="kw">new</span> <span class="fu">FlipUpCommand</span>(lamp);</span>
<span id="cb162-69"><a href="#cb162-69" aria-hidden="true"></a>      Command switchDown = <span class="kw">new</span> <span class="fu">FlipDownCommand</span>(lamp);</span>
<span id="cb162-70"><a href="#cb162-70" aria-hidden="true"></a></span>
<span id="cb162-71"><a href="#cb162-71" aria-hidden="true"></a>      Switch mySwitch = <span class="kw">new</span> <span class="fu">Switch</span>();</span>
<span id="cb162-72"><a href="#cb162-72" aria-hidden="true"></a></span>
<span id="cb162-73"><a href="#cb162-73" aria-hidden="true"></a>      <span class="kw">switch</span>(arguments[<span class="dv">0</span>]) {</span>
<span id="cb162-74"><a href="#cb162-74" aria-hidden="true"></a>         <span class="kw">case</span> <span class="st">&quot;ON&quot;</span>:</span>
<span id="cb162-75"><a href="#cb162-75" aria-hidden="true"></a>            mySwitch.<span class="fu">storeAndExecute</span>(switchUp);</span>
<span id="cb162-76"><a href="#cb162-76" aria-hidden="true"></a>            <span class="kw">break</span>;</span>
<span id="cb162-77"><a href="#cb162-77" aria-hidden="true"></a>         <span class="kw">case</span> <span class="st">&quot;OFF&quot;</span>:</span>
<span id="cb162-78"><a href="#cb162-78" aria-hidden="true"></a>            mySwitch.<span class="fu">storeAndExecute</span>(switchDown);</span>
<span id="cb162-79"><a href="#cb162-79" aria-hidden="true"></a>            <span class="kw">break</span>;</span>
<span id="cb162-80"><a href="#cb162-80" aria-hidden="true"></a>         <span class="kw">default</span>:</span>
<span id="cb162-81"><a href="#cb162-81" aria-hidden="true"></a>            <span class="bu">System</span>.<span class="fu">err</span>.<span class="fu">println</span>(<span class="st">&quot;Argument </span><span class="sc">\&quot;</span><span class="st">ON</span><span class="sc">\&quot;</span><span class="st"> or </span><span class="sc">\&quot;</span><span class="st">OFF</span><span class="sc">\&quot;</span><span class="st"> is required.&quot;</span>);</span>
<span id="cb162-82"><a href="#cb162-82" aria-hidden="true"></a>            <span class="bu">System</span>.<span class="fu">exit</span>(-<span class="dv">1</span>);</span>
<span id="cb162-83"><a href="#cb162-83" aria-hidden="true"></a>      }</span>
<span id="cb162-84"><a href="#cb162-84" aria-hidden="true"></a>   }</span>
<span id="cb162-85"><a href="#cb162-85" aria-hidden="true"></a>}</span></code></pre></div>
<p>Rewriting this in Haskell is much denser:</p>
<div class="sourceCode" id="cb163"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb163-1"><a href="#cb163-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Monad.Writer</span>  <span class="co">-- the writer monad is used to implement the history</span></span>
<span id="cb163-2"><a href="#cb163-2" aria-hidden="true"></a></span>
<span id="cb163-3"><a href="#cb163-3" aria-hidden="true"></a><span class="co">-- The Light data type with two nullary operations to turn the light on or off </span></span>
<span id="cb163-4"><a href="#cb163-4" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Light</span> <span class="ot">=</span> <span class="dt">Light</span> {</span>
<span id="cb163-5"><a href="#cb163-5" aria-hidden="true"></a><span class="ot">      turnOn  ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb163-6"><a href="#cb163-6" aria-hidden="true"></a>    ,<span class="ot"> turnOff ::</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb163-7"><a href="#cb163-7" aria-hidden="true"></a>}</span>
<span id="cb163-8"><a href="#cb163-8" aria-hidden="true"></a></span>
<span id="cb163-9"><a href="#cb163-9" aria-hidden="true"></a><span class="co">-- our default instance of a Light</span></span>
<span id="cb163-10"><a href="#cb163-10" aria-hidden="true"></a>simpleLamp <span class="ot">=</span> <span class="dt">Light</span> { </span>
<span id="cb163-11"><a href="#cb163-11" aria-hidden="true"></a>      turnOn  <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;The Light is on&quot;</span>  <span class="op">&gt;&gt;</span> <span class="fu">return</span> <span class="st">&quot;on&quot;</span></span>
<span id="cb163-12"><a href="#cb163-12" aria-hidden="true"></a>    , turnOff <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="st">&quot;The Light is off&quot;</span> <span class="op">&gt;&gt;</span> <span class="fu">return</span> <span class="st">&quot;off&quot;</span></span>
<span id="cb163-13"><a href="#cb163-13" aria-hidden="true"></a>}</span>
<span id="cb163-14"><a href="#cb163-14" aria-hidden="true"></a></span>
<span id="cb163-15"><a href="#cb163-15" aria-hidden="true"></a><span class="co">-- a command to flip on a Light</span></span>
<span id="cb163-16"><a href="#cb163-16" aria-hidden="true"></a><span class="ot">flipUpCommand ::</span> <span class="dt">Light</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb163-17"><a href="#cb163-17" aria-hidden="true"></a>flipUpCommand <span class="ot">=</span> turnOn</span>
<span id="cb163-18"><a href="#cb163-18" aria-hidden="true"></a></span>
<span id="cb163-19"><a href="#cb163-19" aria-hidden="true"></a><span class="co">-- a command to flipDown a Light</span></span>
<span id="cb163-20"><a href="#cb163-20" aria-hidden="true"></a><span class="ot">flipDownCommand ::</span> <span class="dt">Light</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">String</span></span>
<span id="cb163-21"><a href="#cb163-21" aria-hidden="true"></a>flipDownCommand <span class="ot">=</span> turnOff</span>
<span id="cb163-22"><a href="#cb163-22" aria-hidden="true"></a></span>
<span id="cb163-23"><a href="#cb163-23" aria-hidden="true"></a><span class="co">-- execute a command and log it</span></span>
<span id="cb163-24"><a href="#cb163-24" aria-hidden="true"></a><span class="ot">storeAndExecute ::</span> <span class="dt">IO</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">WriterT</span>[<span class="dt">String</span>] <span class="dt">IO</span> ()</span>
<span id="cb163-25"><a href="#cb163-25" aria-hidden="true"></a>storeAndExecute command <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb163-26"><a href="#cb163-26" aria-hidden="true"></a>    logEntry <span class="ot">&lt;-</span> liftIO command</span>
<span id="cb163-27"><a href="#cb163-27" aria-hidden="true"></a>    tell [logEntry]</span>
<span id="cb163-28"><a href="#cb163-28" aria-hidden="true"></a>  </span>
<span id="cb163-29"><a href="#cb163-29" aria-hidden="true"></a><span class="ot">commandDemo ::</span> <span class="dt">IO</span> ()</span>
<span id="cb163-30"><a href="#cb163-30" aria-hidden="true"></a>commandDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb163-31"><a href="#cb163-31" aria-hidden="true"></a>    <span class="kw">let</span> lamp <span class="ot">=</span> simpleLamp</span>
<span id="cb163-32"><a href="#cb163-32" aria-hidden="true"></a>    result <span class="ot">&lt;-</span> execWriterT <span class="op">$</span></span>
<span id="cb163-33"><a href="#cb163-33" aria-hidden="true"></a>        storeAndExecute (flipUpCommand lamp)   <span class="op">&gt;&gt;</span></span>
<span id="cb163-34"><a href="#cb163-34" aria-hidden="true"></a>        storeAndExecute (flipDownCommand lamp) <span class="op">&gt;&gt;</span></span>
<span id="cb163-35"><a href="#cb163-35" aria-hidden="true"></a>        storeAndExecute (flipUpCommand lamp)</span>
<span id="cb163-36"><a href="#cb163-36" aria-hidden="true"></a></span>
<span id="cb163-37"><a href="#cb163-37" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;switch history: &quot;</span> <span class="op">++</span> <span class="fu">show</span> result</span></code></pre></div>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Command.hs">Sourcecode for this section</a></p>
<h3 id="adapter-function-composition">Adapter → Function Composition</h3>
<blockquote>
<p>“The adapter pattern is a software design pattern (also known as wrapper, an alternative naming shared with the decorator pattern) that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.” (Quoted from <a href="https://en.wikipedia.org/wiki/Adapter_pattern">Wikipedia</a></p>
</blockquote>
<p>An example is an adapter that converts the interface of a Document Object Model of an XML document into a tree structure that can be displayed.</p>
<p>What does an adapter do? It translates a call to the adapter into a call of the adapted backend code. Which may also involve translation of the argument data.</p>
<p>Say we have some <code>backend</code> function that we want to provide with an adapter. we assume that <code>backend</code> has type <code>c -&gt; d</code>:</p>
<div class="sourceCode" id="cb164"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb164-1"><a href="#cb164-1" aria-hidden="true"></a><span class="ot">backend ::</span> c <span class="ot">-&gt;</span> d</span></code></pre></div>
<p>Our adapter should be of type <code>a -&gt; b</code>:</p>
<div class="sourceCode" id="cb165"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb165-1"><a href="#cb165-1" aria-hidden="true"></a><span class="ot">adapter ::</span> a <span class="ot">-&gt;</span> b</span></code></pre></div>
<p>In order to write this adapter we have to write two function. The first is:</p>
<div class="sourceCode" id="cb166"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb166-1"><a href="#cb166-1" aria-hidden="true"></a><span class="ot">marshal ::</span> a <span class="ot">-&gt;</span> c</span></code></pre></div>
<p>which translated the input argument of <code>adapter</code> into the correct type <code>c</code> that can be digested by the backend. And the second function is:</p>
<div class="sourceCode" id="cb167"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb167-1"><a href="#cb167-1" aria-hidden="true"></a><span class="ot">unmarshal ::</span> d <span class="ot">-&gt;</span> b</span></code></pre></div>
<p>which translates the result of the <code>backend</code>function into the correct return type of <code>adapter</code>. <code>adapter</code> will then look like follows:</p>
<div class="sourceCode" id="cb168"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb168-1"><a href="#cb168-1" aria-hidden="true"></a><span class="ot">adapter ::</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb168-2"><a href="#cb168-2" aria-hidden="true"></a>adapter <span class="ot">=</span> unmarshal <span class="op">.</span> backend <span class="op">.</span> marshal</span></code></pre></div>
<p>So in essence the Adapter Patterns is just function composition.</p>
<p>Here is a simple example. Say we have a backend that understands only 24 hour arithmetics (eg. 23:50 + 0:20 = 0:10).</p>
<p>But in our frontend we don’t want to see this ugly arithmetics and want to be able to add minutes to a time representation in minutes (eg. 100 + 200 = 300).</p>
<p>We solve this by using the above mentioned function composition of <code>unmarshal . backend . marshal</code>:</p>
<div class="sourceCode" id="cb169"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb169-1"><a href="#cb169-1" aria-hidden="true"></a><span class="co">-- a 24:00 hour clock representation of time</span></span>
<span id="cb169-2"><a href="#cb169-2" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">WallTime</span> <span class="ot">=</span> <span class="dt">WallTime</span> (<span class="dt">Int</span>, <span class="dt">Int</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb169-3"><a href="#cb169-3" aria-hidden="true"></a></span>
<span id="cb169-4"><a href="#cb169-4" aria-hidden="true"></a><span class="co">-- this is our backend. It can add minutes to a WallTime representation</span></span>
<span id="cb169-5"><a href="#cb169-5" aria-hidden="true"></a><span class="ot">addMinutesToWallTime ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span></span>
<span id="cb169-6"><a href="#cb169-6" aria-hidden="true"></a>addMinutesToWallTime x (<span class="dt">WallTime</span> (h, m)) <span class="ot">=</span></span>
<span id="cb169-7"><a href="#cb169-7" aria-hidden="true"></a>    <span class="kw">let</span> (hAdd, mAdd) <span class="ot">=</span> x <span class="ot">`quotRem`</span> <span class="dv">60</span></span>
<span id="cb169-8"><a href="#cb169-8" aria-hidden="true"></a>        hNew <span class="ot">=</span> h <span class="op">+</span> hAdd</span>
<span id="cb169-9"><a href="#cb169-9" aria-hidden="true"></a>        mNew <span class="ot">=</span> m <span class="op">+</span> mAdd</span>
<span id="cb169-10"><a href="#cb169-10" aria-hidden="true"></a>    <span class="kw">in</span> <span class="kw">if</span> mNew <span class="op">&gt;=</span> <span class="dv">60</span></span>
<span id="cb169-11"><a href="#cb169-11" aria-hidden="true"></a>        <span class="kw">then</span></span>
<span id="cb169-12"><a href="#cb169-12" aria-hidden="true"></a>            <span class="kw">let</span> (dnew, hnew&#39;) <span class="ot">=</span> (hNew <span class="op">+</span> <span class="dv">1</span>) <span class="ot">`quotRem`</span> <span class="dv">24</span></span>
<span id="cb169-13"><a href="#cb169-13" aria-hidden="true"></a>            <span class="kw">in</span>  <span class="dt">WallTime</span> (<span class="dv">24</span><span class="op">*</span>dnew <span class="op">+</span> hnew&#39;, mNew<span class="op">-</span><span class="dv">60</span>)</span>
<span id="cb169-14"><a href="#cb169-14" aria-hidden="true"></a>        <span class="kw">else</span> <span class="dt">WallTime</span> (hNew, mNew)</span>
<span id="cb169-15"><a href="#cb169-15" aria-hidden="true"></a></span>
<span id="cb169-16"><a href="#cb169-16" aria-hidden="true"></a><span class="co">-- this is our time representation in Minutes that we want to use in the frontend</span></span>
<span id="cb169-17"><a href="#cb169-17" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">Minute</span> <span class="ot">=</span> <span class="dt">Minute</span> <span class="dt">Int</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb169-18"><a href="#cb169-18" aria-hidden="true"></a></span>
<span id="cb169-19"><a href="#cb169-19" aria-hidden="true"></a><span class="co">-- convert a Minute value into a WallTime representation</span></span>
<span id="cb169-20"><a href="#cb169-20" aria-hidden="true"></a><span class="ot">marshalMW ::</span> <span class="dt">Minute</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span></span>
<span id="cb169-21"><a href="#cb169-21" aria-hidden="true"></a>marshalMW (<span class="dt">Minute</span> x) <span class="ot">=</span></span>
<span id="cb169-22"><a href="#cb169-22" aria-hidden="true"></a>    <span class="kw">let</span> (h,m) <span class="ot">=</span> x <span class="ot">`quotRem`</span> <span class="dv">60</span></span>
<span id="cb169-23"><a href="#cb169-23" aria-hidden="true"></a>    <span class="kw">in</span> <span class="dt">WallTime</span> (h <span class="ot">`rem`</span> <span class="dv">24</span>, m)</span>
<span id="cb169-24"><a href="#cb169-24" aria-hidden="true"></a></span>
<span id="cb169-25"><a href="#cb169-25" aria-hidden="true"></a><span class="co">-- convert a WallTime value back to Minutes</span></span>
<span id="cb169-26"><a href="#cb169-26" aria-hidden="true"></a><span class="ot">unmarshalWM ::</span> <span class="dt">WallTime</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span></span>
<span id="cb169-27"><a href="#cb169-27" aria-hidden="true"></a>unmarshalWM (<span class="dt">WallTime</span> (h,m)) <span class="ot">=</span> <span class="dt">Minute</span> <span class="op">$</span> <span class="dv">60</span> <span class="op">*</span> h <span class="op">+</span> m</span>
<span id="cb169-28"><a href="#cb169-28" aria-hidden="true"></a></span>
<span id="cb169-29"><a href="#cb169-29" aria-hidden="true"></a><span class="co">-- this is our frontend that add Minutes to a time of a day</span></span>
<span id="cb169-30"><a href="#cb169-30" aria-hidden="true"></a><span class="co">-- measured in minutes</span></span>
<span id="cb169-31"><a href="#cb169-31" aria-hidden="true"></a><span class="ot">addMinutesAdapter ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span></span>
<span id="cb169-32"><a href="#cb169-32" aria-hidden="true"></a>addMinutesAdapter x <span class="ot">=</span> unmarshalWM <span class="op">.</span> addMinutesToWallTime x <span class="op">.</span> marshalMW</span>
<span id="cb169-33"><a href="#cb169-33" aria-hidden="true"></a></span>
<span id="cb169-34"><a href="#cb169-34" aria-hidden="true"></a>adapterDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb169-35"><a href="#cb169-35" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;Adapter vs. function composition&quot;</span></span>
<span id="cb169-36"><a href="#cb169-36" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> addMinutesAdapter <span class="dv">100</span> <span class="op">$</span> <span class="dt">Minute</span> <span class="dv">400</span></span>
<span id="cb169-37"><a href="#cb169-37" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Adapter.hs">Sourcecode for this section</a></p>
<h3 id="template-method-type-class-default-functions">Template Method → type class default functions</h3>
<blockquote>
<p>In software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm’s structure. <a href="https://en.wikipedia.org/wiki/Template_method_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<p>The TemplateMethod pattern is quite similar to the <a href="#strategy---functor">StrategyPattern</a>. The main difference is the level of granularity. In Strategy a complete block of functionality - the Strategy - can be replaced. In TemplateMethod the overall layout of an algorithm is predefined and only specific parts of it may be replaced.</p>
<p>In functional programming the answer to this kind of problem is again the usage of higher order functions.</p>
<p>In the following example we come back to the example for the <a href="#adapter---function-composition">Adapter</a>. The function <code>addMinutesAdapter</code> lays out a structure for interfacing to some kind of backend:</p>
<ol type="1">
<li>marshalling the arguments into the backend format</li>
<li>apply the backend logic to the marshalled arguments</li>
<li>unmarshal the backend result data into the frontend format</li>
</ol>
<div class="sourceCode" id="cb170"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb170-1"><a href="#cb170-1" aria-hidden="true"></a><span class="ot">addMinutesAdapter ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span></span>
<span id="cb170-2"><a href="#cb170-2" aria-hidden="true"></a>addMinutesAdapter x <span class="ot">=</span> unmarshalWM <span class="op">.</span> addMinutesToWallTime x <span class="op">.</span> marshalMW</span></code></pre></div>
<p>In this code the backend functionality - <code>addMinutesToWallTime</code> - is a hardcoded part of the overall structure.</p>
<p>Let’s assume we want to use different kind of backend implementations - for instance a mock replacement. In this case we would like to keep the overall structure - the template - and would just make a specific part of it flexible. This sounds like an ideal candidate for the TemplateMethod pattern:</p>
<div class="sourceCode" id="cb171"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb171-1"><a href="#cb171-1" aria-hidden="true"></a><span class="ot">addMinutesTemplate ::</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span>) <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span></span>
<span id="cb171-2"><a href="#cb171-2" aria-hidden="true"></a>addMinutesTemplate f x <span class="ot">=</span></span>
<span id="cb171-3"><a href="#cb171-3" aria-hidden="true"></a>    unmarshalWM <span class="op">.</span></span>
<span id="cb171-4"><a href="#cb171-4" aria-hidden="true"></a>    f x <span class="op">.</span></span>
<span id="cb171-5"><a href="#cb171-5" aria-hidden="true"></a>    marshalMW</span></code></pre></div>
<p><code>addMinutesTemplate</code> has an additional parameter f of type <code>(Int -&gt; WallTime -&gt; WallTime)</code>. This parameter may be bound to <code>addMinutesToWallTime</code> or alternative implementations:</p>
<div class="sourceCode" id="cb172"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb172-1"><a href="#cb172-1" aria-hidden="true"></a><span class="co">-- implements linear addition (the normal case) even for values &gt; 1440</span></span>
<span id="cb172-2"><a href="#cb172-2" aria-hidden="true"></a><span class="ot">linearTimeAdd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span></span>
<span id="cb172-3"><a href="#cb172-3" aria-hidden="true"></a>linearTimeAdd <span class="ot">=</span> addMinutesTemplate addMinutesToWallTime</span>
<span id="cb172-4"><a href="#cb172-4" aria-hidden="true"></a></span>
<span id="cb172-5"><a href="#cb172-5" aria-hidden="true"></a><span class="co">-- implements cyclic addition, respecting a 24 hour (1440 Min) cycle</span></span>
<span id="cb172-6"><a href="#cb172-6" aria-hidden="true"></a><span class="ot">cyclicTimeAdd ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span> <span class="ot">-&gt;</span> <span class="dt">Minute</span></span>
<span id="cb172-7"><a href="#cb172-7" aria-hidden="true"></a>cyclicTimeAdd <span class="ot">=</span> addMinutesTemplate addMinutesToWallTime&#39;</span></code></pre></div>
<p>where <code>addMinutesToWallTime'</code> implements a silly 24 hour cyclic addition:</p>
<div class="sourceCode" id="cb173"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb173-1"><a href="#cb173-1" aria-hidden="true"></a><span class="co">-- a 24 hour (1440 min) cyclic version of addition: 1400 + 100 = 60</span></span>
<span id="cb173-2"><a href="#cb173-2" aria-hidden="true"></a><span class="ot">addMinutesToWallTime&#39; ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span></span>
<span id="cb173-3"><a href="#cb173-3" aria-hidden="true"></a>addMinutesToWallTime&#39; x (<span class="dt">WallTime</span> (h, m)) <span class="ot">=</span></span>
<span id="cb173-4"><a href="#cb173-4" aria-hidden="true"></a>    <span class="kw">let</span> (hAdd, mAdd) <span class="ot">=</span> x <span class="ot">`quotRem`</span> <span class="dv">60</span></span>
<span id="cb173-5"><a href="#cb173-5" aria-hidden="true"></a>        hNew <span class="ot">=</span> h <span class="op">+</span> hAdd</span>
<span id="cb173-6"><a href="#cb173-6" aria-hidden="true"></a>        mNew <span class="ot">=</span> m <span class="op">+</span> mAdd</span>
<span id="cb173-7"><a href="#cb173-7" aria-hidden="true"></a>    <span class="kw">in</span> <span class="kw">if</span> mNew <span class="op">&gt;=</span> <span class="dv">60</span></span>
<span id="cb173-8"><a href="#cb173-8" aria-hidden="true"></a>        <span class="kw">then</span> <span class="dt">WallTime</span> ((hNew <span class="op">+</span> <span class="dv">1</span>) <span class="ot">`rem`</span> <span class="dv">24</span>, mNew<span class="op">-</span><span class="dv">60</span>)</span>
<span id="cb173-9"><a href="#cb173-9" aria-hidden="true"></a>        <span class="kw">else</span> <span class="dt">WallTime</span> (hNew, mNew)</span></code></pre></div>
<p>And here is how we use it to do actual computations:</p>
<div class="sourceCode" id="cb174"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb174-1"><a href="#cb174-1" aria-hidden="true"></a>templateMethodDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb174-2"><a href="#cb174-2" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;linear time: &quot;</span> <span class="op">++</span> (<span class="fu">show</span> <span class="op">$</span> linearTimeAdd <span class="dv">100</span> (<span class="dt">Minute</span> <span class="dv">1400</span>))</span>
<span id="cb174-3"><a href="#cb174-3" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;cyclic time: &quot;</span> <span class="op">++</span> (<span class="fu">show</span> <span class="op">$</span> cyclicTimeAdd <span class="dv">100</span> (<span class="dt">Minute</span> <span class="dv">1400</span>))</span></code></pre></div>
<h4 id="type-class-minimal-implementations-as-template-method">type class minimal implementations as template method</h4>
<blockquote>
<p>The template method is used in frameworks, where each implements the invariant parts of a domain’s architecture, leaving “placeholders” for customization options. This is an example of inversion of control. <a href="https://en.wikipedia.org/wiki/Template_method_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<p>The type classes in Haskells base library apply this template approach frequently to reduce the effort for implementing type class instances and to provide a predefined structure with specific ‘customization options’.</p>
<p>As an example let’s extend the type <code>WallTime</code> by an associative binary operation <code>addWallTimes</code> to form an instance of the <code>Monoid</code> type class:</p>
<div class="sourceCode" id="cb175"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb175-1"><a href="#cb175-1" aria-hidden="true"></a><span class="ot">addWallTimes ::</span> <span class="dt">WallTime</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span> <span class="ot">-&gt;</span> <span class="dt">WallTime</span></span>
<span id="cb175-2"><a href="#cb175-2" aria-hidden="true"></a>addWallTimes a<span class="op">@</span>(<span class="dt">WallTime</span> (h,m)) b <span class="ot">=</span></span>
<span id="cb175-3"><a href="#cb175-3" aria-hidden="true"></a>    <span class="kw">let</span> aMin <span class="ot">=</span> h<span class="op">*</span><span class="dv">60</span> <span class="op">+</span> m</span>
<span id="cb175-4"><a href="#cb175-4" aria-hidden="true"></a>    <span class="kw">in</span>  addMinutesToWallTime aMin b</span>
<span id="cb175-5"><a href="#cb175-5" aria-hidden="true"></a></span>
<span id="cb175-6"><a href="#cb175-6" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">WallTime</span> <span class="kw">where</span></span>
<span id="cb175-7"><a href="#cb175-7" aria-hidden="true"></a>    (<span class="op">&lt;&gt;</span>)   <span class="ot">=</span> addWallTimes</span>
<span id="cb175-8"><a href="#cb175-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">WallTime</span> <span class="kw">where</span></span>
<span id="cb175-9"><a href="#cb175-9" aria-hidden="true"></a>    <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">WallTime</span> (<span class="dv">0</span>,<span class="dv">0</span>)</span></code></pre></div>
<p>Even though we specified only <code>mempty</code> and <code>(&lt;&gt;)</code> we can now use the functions <code>mappend :: Monoid a =&gt; a -&gt; a -&gt; a</code> and <code>mconcat :: Monoid a =&gt; [a] -&gt; a</code> on WallTime instances:</p>
<div class="sourceCode" id="cb176"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb176-1"><a href="#cb176-1" aria-hidden="true"></a>templateMethodDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb176-2"><a href="#cb176-2" aria-hidden="true"></a>    <span class="kw">let</span> a <span class="ot">=</span> <span class="dt">WallTime</span> (<span class="dv">3</span>,<span class="dv">20</span>)</span>
<span id="cb176-3"><a href="#cb176-3" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">mappend</span> a a</span>
<span id="cb176-4"><a href="#cb176-4" aria-hidden="true"></a>    <span class="fu">print</span> <span class="op">$</span> <span class="fu">mconcat</span> [a,a,a,a,a,a,a,a,a]</span></code></pre></div>
<p>By looking at the definition of the <code>Monoid</code> type class we can see how this ‘magic’ is made possible:</p>
<div class="sourceCode" id="cb177"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb177-1"><a href="#cb177-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Semigroup</span> a <span class="ot">=&gt;</span> <span class="dt">Monoid</span> a <span class="kw">where</span></span>
<span id="cb177-2"><a href="#cb177-2" aria-hidden="true"></a>    <span class="co">-- | Identity of &#39;mappend&#39;</span></span>
<span id="cb177-3"><a href="#cb177-3" aria-hidden="true"></a><span class="ot">    mempty  ::</span> a</span>
<span id="cb177-4"><a href="#cb177-4" aria-hidden="true"></a></span>
<span id="cb177-5"><a href="#cb177-5" aria-hidden="true"></a>    <span class="co">-- | An associative operation</span></span>
<span id="cb177-6"><a href="#cb177-6" aria-hidden="true"></a><span class="ot">    mappend ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb177-7"><a href="#cb177-7" aria-hidden="true"></a>    <span class="fu">mappend</span> <span class="ot">=</span> (<span class="op">&lt;&gt;</span>)</span>
<span id="cb177-8"><a href="#cb177-8" aria-hidden="true"></a></span>
<span id="cb177-9"><a href="#cb177-9" aria-hidden="true"></a>    <span class="co">-- | Fold a list using the monoid.</span></span>
<span id="cb177-10"><a href="#cb177-10" aria-hidden="true"></a><span class="ot">    mconcat ::</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb177-11"><a href="#cb177-11" aria-hidden="true"></a>    <span class="fu">mconcat</span> <span class="ot">=</span> <span class="fu">foldr</span> <span class="fu">mappend</span> <span class="fu">mempty</span></span></code></pre></div>
<p>For <code>mempty</code> only a type requirement but no definition is given. But for <code>mappend</code> and <code>mconcat</code> default implementations are provided. So the Monoid type class definition forms a <em>template</em> where the default implementations define the ‘invariant parts’ of the type class and the part specified by us form the ‘customization options’.</p>
<p>(please note that it’s generally possible to override the default implementations)</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/TemplateMethod.hs">Sourcecode for this section</a></p>
<h3 id="creational-patterns">Creational Patterns</h3>
<h4 id="abstract-factory-functions-as-data-type-values">Abstract Factory → functions as data type values</h4>
<blockquote>
<p>The abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes. In normal usage, the client software creates a concrete implementation of the abstract factory and then uses the generic interface of the factory to create the concrete objects that are part of the theme. The client doesn’t know (or care) which concrete objects it gets from each of these internal factories, since it uses only the generic interfaces of their products. This pattern separates the details of implementation of a set of objects from their general usage and relies on object composition, as object creation is implemented in methods exposed in the factory interface. <a href="https://en.wikipedia.org/wiki/Abstract_factory_pattern">Quoted from Wikipedia</a></p>
</blockquote>
<p>There is a classic example that demonstrates the application of this pattern in the context of a typical problem in object oriented software design:</p>
<p>The example revolves around a small GUI framework that needs different implementations to render Buttons for different OS Platforms (called WIN and OSX in this example). A client of the GUI API should work with a uniform API that hides the specifics of the different platforms. The problem then is: how can the client be provided with a platform specific implementation without explicitely asking for a given implementation and how can we maintain a uniform API that hides the implementation specifics.</p>
<p>In OO languages like Java the abstract factory pattern would be the canonical answer to this problem:</p>
<ul>
<li>The client calls an abstract factory <code>GUIFactory</code> interface to create a <code>Button</code> by calling <code>createButton() : Button</code> that somehow chooses (typically by some kind of configuration) which concrete factory has to be used to create concrete <code>Button</code> instances.</li>
<li>The concrete classes <code>WinButton</code> and <code>OSXButton</code> implement the interface <code>Button</code> and provide platform specific implementations of <code>paint () : void</code>.</li>
<li>As the client uses only the interface methods <code>createButton()</code> and <code>paint()</code> it does not have to deal with any platform specific code.</li>
</ul>
<p>The following diagram depicts the structure of interfaces and classes in this scenario:</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Abstract_factory.svg/517px-Abstract_factory.svg.png" alt="" /><figcaption>The abstract Button Factory</figcaption>
</figure>
<p>In a functional language this kind of problem would be solved quite differently. In FP functions are first class citizens and thus it is much easier to treat function that represent platform specific actions as “normal” values that can be reached around.</p>
<p>So we could represent a Button type as a data type with a label (holding the text to display on the button) and an <code>IO ()</code> action that represents the platform specific rendering:</p>
<div class="sourceCode" id="cb178"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb178-1"><a href="#cb178-1" aria-hidden="true"></a><span class="co">-- | representation of a Button UI widget</span></span>
<span id="cb178-2"><a href="#cb178-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Button</span> <span class="ot">=</span> <span class="dt">Button</span></span>
<span id="cb178-3"><a href="#cb178-3" aria-hidden="true"></a>    {<span class="ot"> label  ::</span> <span class="dt">String</span>           <span class="co">-- the text label of the button</span></span>
<span id="cb178-4"><a href="#cb178-4" aria-hidden="true"></a>    ,<span class="ot"> render ::</span> <span class="dt">Button</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()  <span class="co">-- a platform specific rendering action</span></span>
<span id="cb178-5"><a href="#cb178-5" aria-hidden="true"></a>    }</span></code></pre></div>
<p>Platform specific actions to render a <code>Button</code> would look like follows:</p>
<div class="sourceCode" id="cb179"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb179-1"><a href="#cb179-1" aria-hidden="true"></a><span class="co">-- | rendering a Button for the WIN platform (we just simulate it by printing the label)</span></span>
<span id="cb179-2"><a href="#cb179-2" aria-hidden="true"></a><span class="ot">winPaint ::</span> <span class="dt">Button</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb179-3"><a href="#cb179-3" aria-hidden="true"></a>winPaint btn <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;winButton: &quot;</span> <span class="op">++</span> label btn</span>
<span id="cb179-4"><a href="#cb179-4" aria-hidden="true"></a></span>
<span id="cb179-5"><a href="#cb179-5" aria-hidden="true"></a><span class="co">-- | rendering a Button for the OSX platform</span></span>
<span id="cb179-6"><a href="#cb179-6" aria-hidden="true"></a><span class="ot">osxPaint ::</span> <span class="dt">Button</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb179-7"><a href="#cb179-7" aria-hidden="true"></a>osxPaint btn <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;osxButton: &quot;</span> <span class="op">++</span> label btn</span>
<span id="cb179-8"><a href="#cb179-8" aria-hidden="true"></a></span>
<span id="cb179-9"><a href="#cb179-9" aria-hidden="true"></a><span class="co">-- | paint a button by using the Buttons render function</span></span>
<span id="cb179-10"><a href="#cb179-10" aria-hidden="true"></a><span class="ot">paint ::</span> <span class="dt">Button</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb179-11"><a href="#cb179-11" aria-hidden="true"></a>paint btn<span class="op">@</span>(<span class="dt">Button</span> _ render) <span class="ot">=</span> render btn</span></code></pre></div>
<p>(Of course a real implementation would be quite more complex, but we don’t care about the nitty gritty details here.)</p>
<p>With this code we can now create and use concrete Buttons like so:</p>
<div class="sourceCode" id="cb180"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb180-1"><a href="#cb180-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> button <span class="ot">=</span> <span class="dt">Button</span> <span class="st">&quot;Okay&quot;</span> winPaint</span>
<span id="cb180-2"><a href="#cb180-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> button</span>
<span id="cb180-3"><a href="#cb180-3" aria-hidden="true"></a><span class="ot">button ::</span> <span class="dt">Button</span></span>
<span id="cb180-4"><a href="#cb180-4" aria-hidden="true"></a>ghci<span class="op">&gt;</span> paint button</span>
<span id="cb180-5"><a href="#cb180-5" aria-hidden="true"></a>winButton<span class="op">:</span> <span class="dt">Okay</span></span></code></pre></div>
<p>We created a button with <code>Button "Okay" winPaint</code>. The field <code>render</code> of that button instance now holds the function winPaint. The function <code>paint</code> now applies this <code>render</code> function – i.e. winPaint – to draw the Button.</p>
<p>Applying this scheme it is now very simple to create buttons with different <code>render</code> implementations:</p>
<div class="sourceCode" id="cb181"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb181-1"><a href="#cb181-1" aria-hidden="true"></a><span class="co">-- | a representation of the operating system platform</span></span>
<span id="cb181-2"><a href="#cb181-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Platform</span> <span class="ot">=</span> <span class="dt">OSX</span> <span class="op">|</span> <span class="dt">WIN</span> <span class="op">|</span> <span class="dt">NIX</span> <span class="op">|</span> <span class="dt">Other</span></span>
<span id="cb181-3"><a href="#cb181-3" aria-hidden="true"></a></span>
<span id="cb181-4"><a href="#cb181-4" aria-hidden="true"></a><span class="co">-- | determine Platform by inspecting System.Info.os string</span></span>
<span id="cb181-5"><a href="#cb181-5" aria-hidden="true"></a><span class="ot">platform ::</span> <span class="dt">Platform</span></span>
<span id="cb181-6"><a href="#cb181-6" aria-hidden="true"></a>platform <span class="ot">=</span></span>
<span id="cb181-7"><a href="#cb181-7" aria-hidden="true"></a>  <span class="kw">case</span> os <span class="kw">of</span></span>
<span id="cb181-8"><a href="#cb181-8" aria-hidden="true"></a>    <span class="st">&quot;darwin&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">OSX</span></span>
<span id="cb181-9"><a href="#cb181-9" aria-hidden="true"></a>    <span class="st">&quot;mingw32&quot;</span> <span class="ot">-&gt;</span> <span class="dt">WIN</span></span>
<span id="cb181-10"><a href="#cb181-10" aria-hidden="true"></a>    <span class="st">&quot;linux&quot;</span>   <span class="ot">-&gt;</span> <span class="dt">NIX</span></span>
<span id="cb181-11"><a href="#cb181-11" aria-hidden="true"></a>    _         <span class="ot">-&gt;</span> <span class="dt">Other</span></span>
<span id="cb181-12"><a href="#cb181-12" aria-hidden="true"></a></span>
<span id="cb181-13"><a href="#cb181-13" aria-hidden="true"></a><span class="co">-- | create a button for os platform with label lbl</span></span>
<span id="cb181-14"><a href="#cb181-14" aria-hidden="true"></a><span class="ot">createButton ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Button</span></span>
<span id="cb181-15"><a href="#cb181-15" aria-hidden="true"></a>createButton lbl <span class="ot">=</span></span>
<span id="cb181-16"><a href="#cb181-16" aria-hidden="true"></a>  <span class="kw">case</span> platform <span class="kw">of</span></span>
<span id="cb181-17"><a href="#cb181-17" aria-hidden="true"></a>    <span class="dt">OSX</span>    <span class="ot">-&gt;</span> <span class="dt">Button</span> lbl osxPaint</span>
<span id="cb181-18"><a href="#cb181-18" aria-hidden="true"></a>    <span class="dt">WIN</span>    <span class="ot">-&gt;</span> <span class="dt">Button</span> lbl winPaint</span>
<span id="cb181-19"><a href="#cb181-19" aria-hidden="true"></a>    <span class="dt">NIX</span>    <span class="ot">-&gt;</span> <span class="dt">Button</span> lbl (\btn <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;nixButton: &quot;</span>   <span class="op">++</span> label btn)</span>
<span id="cb181-20"><a href="#cb181-20" aria-hidden="true"></a>    <span class="dt">Other</span>  <span class="ot">-&gt;</span> <span class="dt">Button</span> lbl (\btn <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;otherButton: &quot;</span> <span class="op">++</span> label btn)</span></code></pre></div>
<p>The function <code>createButton</code> determines the actual execution environment and accordingly creates platform specific buttons.</p>
<p>Now we have an API that hides all implementation specifics from the client and allows him to use only <code>createButton</code> and <code>paint</code> to work with Buttons for different OS platforms:</p>
<div class="sourceCode" id="cb182"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb182-1"><a href="#cb182-1" aria-hidden="true"></a>abstractFactoryDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb182-2"><a href="#cb182-2" aria-hidden="true"></a>    <span class="fu">putStrLn</span> <span class="st">&quot;AbstractFactory -&gt; functions as data type values&quot;</span></span>
<span id="cb182-3"><a href="#cb182-3" aria-hidden="true"></a>    <span class="kw">let</span> exit <span class="ot">=</span> createButton <span class="st">&quot;Exit&quot;</span>            <span class="co">-- using the &quot;abstract&quot; API to create buttons</span></span>
<span id="cb182-4"><a href="#cb182-4" aria-hidden="true"></a>    <span class="kw">let</span> ok   <span class="ot">=</span> createButton <span class="st">&quot;OK&quot;</span></span>
<span id="cb182-5"><a href="#cb182-5" aria-hidden="true"></a>    paint ok                                  <span class="co">-- using the &quot;abstract&quot; API to paint buttons</span></span>
<span id="cb182-6"><a href="#cb182-6" aria-hidden="true"></a>    paint exit</span>
<span id="cb182-7"><a href="#cb182-7" aria-hidden="true"></a></span>
<span id="cb182-8"><a href="#cb182-8" aria-hidden="true"></a>    paint <span class="op">$</span> <span class="dt">Button</span> <span class="st">&quot;Apple&quot;</span> osxPaint           <span class="co">-- paint a platform specific button</span></span>
<span id="cb182-9"><a href="#cb182-9" aria-hidden="true"></a>    paint <span class="op">$</span> <span class="dt">Button</span> <span class="st">&quot;Pi&quot;</span>                       <span class="co">-- paint a user-defined button</span></span>
<span id="cb182-10"><a href="#cb182-10" aria-hidden="true"></a>        (\btn <span class="ot">-&gt;</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;raspberryButton: &quot;</span> <span class="op">++</span> label btn)</span></code></pre></div>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/AbstractFactory.hs">Sourcecode for this section</a></p>
<h4 id="builder-record-syntax-smart-constructor">Builder → record syntax, smart constructor</h4>
<blockquote>
<p>The Builder is a design pattern designed to provide a flexible solution to various object creation problems in object-oriented programming. The intent of the Builder design pattern is to separate the construction of a complex object from its representation.</p>
<p>Quoted from <a href="https://en.wikipedia.org/wiki/Builder_pattern">Wikipedia</a></p>
</blockquote>
<p>The Builder patterns is frequently used to ease the construction of complex objects by providing a safe and convenient API to client code. In the following Java example we define a POJO Class <code>BankAccount</code>:</p>
<div class="sourceCode" id="cb183"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb183-1"><a href="#cb183-1" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> BankAccount {</span>
<span id="cb183-2"><a href="#cb183-2" aria-hidden="true"></a></span>
<span id="cb183-3"><a href="#cb183-3" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">int</span> accountNo;</span>
<span id="cb183-4"><a href="#cb183-4" aria-hidden="true"></a>    <span class="kw">private</span> <span class="bu">String</span> name;</span>
<span id="cb183-5"><a href="#cb183-5" aria-hidden="true"></a>    <span class="kw">private</span> <span class="bu">String</span> branch;</span>
<span id="cb183-6"><a href="#cb183-6" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">double</span> balance;</span>
<span id="cb183-7"><a href="#cb183-7" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">double</span> interestRate;</span>
<span id="cb183-8"><a href="#cb183-8" aria-hidden="true"></a></span>
<span id="cb183-9"><a href="#cb183-9" aria-hidden="true"></a>    <span class="fu">BankAccount</span>(<span class="dt">int</span> accountNo, <span class="bu">String</span> name, <span class="bu">String</span> branch, <span class="dt">double</span> balance, <span class="dt">double</span> interestRate) {</span>
<span id="cb183-10"><a href="#cb183-10" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">accountNo</span> = accountNo;</span>
<span id="cb183-11"><a href="#cb183-11" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">name</span> = name;</span>
<span id="cb183-12"><a href="#cb183-12" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">branch</span> = branch;</span>
<span id="cb183-13"><a href="#cb183-13" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">balance</span> = balance;</span>
<span id="cb183-14"><a href="#cb183-14" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">interestRate</span> = interestRate;</span>
<span id="cb183-15"><a href="#cb183-15" aria-hidden="true"></a>    }</span>
<span id="cb183-16"><a href="#cb183-16" aria-hidden="true"></a></span>
<span id="cb183-17"><a href="#cb183-17" aria-hidden="true"></a>    <span class="at">@Override</span></span>
<span id="cb183-18"><a href="#cb183-18" aria-hidden="true"></a>    <span class="kw">public</span> <span class="bu">String</span> <span class="fu">toString</span>() {</span>
<span id="cb183-19"><a href="#cb183-19" aria-hidden="true"></a>        <span class="kw">return</span> <span class="st">&quot;BankAccount {accountNo = &quot;</span> + accountNo + <span class="st">&quot;, name = </span><span class="sc">\&quot;</span><span class="st">&quot;</span> + name</span>
<span id="cb183-20"><a href="#cb183-20" aria-hidden="true"></a>                + <span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">, branch = </span><span class="sc">\&quot;</span><span class="st">&quot;</span> + branch + <span class="st">&quot;</span><span class="sc">\&quot;</span><span class="st">, balance = &quot;</span> + balance + <span class="st">&quot;, interestRate = &quot;</span> + interestRate + <span class="st">&quot;}&quot;</span>;</span>
<span id="cb183-21"><a href="#cb183-21" aria-hidden="true"></a>    }</span>
<span id="cb183-22"><a href="#cb183-22" aria-hidden="true"></a>}</span></code></pre></div>
<p>The class provides a package private constructor that takes 5 arguments that are used to fill the instance attributes. Using constructors with so many arguments is often considered inconvenient and potentially unsafe as certain constraints on the arguments might not be maintained by client code invoking this constructor.</p>
<p>The typical solution is to provide a Builder class that is responsible for maintaining internal data constraints and providing a robust and convenient API. In the following example the Builder ensures that a BankAccount must have an accountNo and that non null values are provided for the String attributes:</p>
<div class="sourceCode" id="cb184"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb184-1"><a href="#cb184-1" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> BankAccountBuilder {</span>
<span id="cb184-2"><a href="#cb184-2" aria-hidden="true"></a></span>
<span id="cb184-3"><a href="#cb184-3" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">int</span> accountNo;</span>
<span id="cb184-4"><a href="#cb184-4" aria-hidden="true"></a>    <span class="kw">private</span> <span class="bu">String</span> name;</span>
<span id="cb184-5"><a href="#cb184-5" aria-hidden="true"></a>    <span class="kw">private</span> <span class="bu">String</span> branch;</span>
<span id="cb184-6"><a href="#cb184-6" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">double</span> balance;</span>
<span id="cb184-7"><a href="#cb184-7" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">double</span> interestRate;</span>
<span id="cb184-8"><a href="#cb184-8" aria-hidden="true"></a></span>
<span id="cb184-9"><a href="#cb184-9" aria-hidden="true"></a>    <span class="kw">public</span> <span class="fu">BankAccountBuilder</span>(<span class="dt">int</span> accountNo) {</span>
<span id="cb184-10"><a href="#cb184-10" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">accountNo</span> = accountNo;</span>
<span id="cb184-11"><a href="#cb184-11" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">name</span> = <span class="st">&quot;Dummy Customer&quot;</span>;</span>
<span id="cb184-12"><a href="#cb184-12" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">branch</span> = <span class="st">&quot;London&quot;</span>;</span>
<span id="cb184-13"><a href="#cb184-13" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">balance</span> = <span class="dv">0</span>;</span>
<span id="cb184-14"><a href="#cb184-14" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">interestRate</span> = <span class="dv">0</span>;</span>
<span id="cb184-15"><a href="#cb184-15" aria-hidden="true"></a>    }</span>
<span id="cb184-16"><a href="#cb184-16" aria-hidden="true"></a></span>
<span id="cb184-17"><a href="#cb184-17" aria-hidden="true"></a>    <span class="kw">public</span> BankAccountBuilder <span class="fu">withAccountNo</span>(<span class="dt">int</span> accountNo) {</span>
<span id="cb184-18"><a href="#cb184-18" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">accountNo</span> = accountNo;</span>
<span id="cb184-19"><a href="#cb184-19" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">this</span>;</span>
<span id="cb184-20"><a href="#cb184-20" aria-hidden="true"></a>    }</span>
<span id="cb184-21"><a href="#cb184-21" aria-hidden="true"></a></span>
<span id="cb184-22"><a href="#cb184-22" aria-hidden="true"></a>    <span class="kw">public</span> BankAccountBuilder <span class="fu">withName</span>(<span class="bu">String</span> name) {</span>
<span id="cb184-23"><a href="#cb184-23" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">name</span> = name;</span>
<span id="cb184-24"><a href="#cb184-24" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">this</span>;</span>
<span id="cb184-25"><a href="#cb184-25" aria-hidden="true"></a>    }</span>
<span id="cb184-26"><a href="#cb184-26" aria-hidden="true"></a></span>
<span id="cb184-27"><a href="#cb184-27" aria-hidden="true"></a>    <span class="kw">public</span> BankAccountBuilder <span class="fu">withBranch</span>(<span class="bu">String</span> branch) {</span>
<span id="cb184-28"><a href="#cb184-28" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">branch</span> = branch;</span>
<span id="cb184-29"><a href="#cb184-29" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">this</span>;</span>
<span id="cb184-30"><a href="#cb184-30" aria-hidden="true"></a>    }</span>
<span id="cb184-31"><a href="#cb184-31" aria-hidden="true"></a></span>
<span id="cb184-32"><a href="#cb184-32" aria-hidden="true"></a>    <span class="kw">public</span> BankAccountBuilder <span class="fu">withBalance</span>(<span class="dt">double</span> balance) {</span>
<span id="cb184-33"><a href="#cb184-33" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">balance</span> = balance;</span>
<span id="cb184-34"><a href="#cb184-34" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">this</span>;</span>
<span id="cb184-35"><a href="#cb184-35" aria-hidden="true"></a>    }</span>
<span id="cb184-36"><a href="#cb184-36" aria-hidden="true"></a></span>
<span id="cb184-37"><a href="#cb184-37" aria-hidden="true"></a>    <span class="kw">public</span> BankAccountBuilder <span class="fu">withInterestRate</span>(<span class="dt">double</span> interestRate) {</span>
<span id="cb184-38"><a href="#cb184-38" aria-hidden="true"></a>        <span class="kw">this</span>.<span class="fu">interestRate</span> = interestRate;</span>
<span id="cb184-39"><a href="#cb184-39" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">this</span>;</span>
<span id="cb184-40"><a href="#cb184-40" aria-hidden="true"></a>    }</span>
<span id="cb184-41"><a href="#cb184-41" aria-hidden="true"></a></span>
<span id="cb184-42"><a href="#cb184-42" aria-hidden="true"></a>    <span class="kw">public</span> BankAccount <span class="fu">build</span>() {</span>
<span id="cb184-43"><a href="#cb184-43" aria-hidden="true"></a>        <span class="kw">return</span> <span class="kw">new</span> <span class="fu">BankAccount</span>(<span class="kw">this</span>.<span class="fu">accountNo</span>, <span class="kw">this</span>.<span class="fu">name</span>, <span class="kw">this</span>.<span class="fu">branch</span>, <span class="kw">this</span>.<span class="fu">balance</span>, <span class="kw">this</span>.<span class="fu">interestRate</span>);</span>
<span id="cb184-44"><a href="#cb184-44" aria-hidden="true"></a>    }</span>
<span id="cb184-45"><a href="#cb184-45" aria-hidden="true"></a>}</span></code></pre></div>
<p>Next comes an example of how the builder is used in client code:</p>
<div class="sourceCode" id="cb185"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb185-1"><a href="#cb185-1" aria-hidden="true"></a><span class="kw">public</span> <span class="kw">class</span> BankAccountTest {</span>
<span id="cb185-2"><a href="#cb185-2" aria-hidden="true"></a></span>
<span id="cb185-3"><a href="#cb185-3" aria-hidden="true"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
<span id="cb185-4"><a href="#cb185-4" aria-hidden="true"></a>        <span class="kw">new</span> <span class="fu">BankAccountTest</span>().<span class="fu">testAccount</span>();</span>
<span id="cb185-5"><a href="#cb185-5" aria-hidden="true"></a>    }</span>
<span id="cb185-6"><a href="#cb185-6" aria-hidden="true"></a></span>
<span id="cb185-7"><a href="#cb185-7" aria-hidden="true"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">testAccount</span>() {</span>
<span id="cb185-8"><a href="#cb185-8" aria-hidden="true"></a>        BankAccountBuilder builder = <span class="kw">new</span> <span class="fu">BankAccountBuilder</span>(<span class="dv">1234</span>);</span>
<span id="cb185-9"><a href="#cb185-9" aria-hidden="true"></a>        <span class="co">// the builder can provide a dummy instance, that might be used for testing</span></span>
<span id="cb185-10"><a href="#cb185-10" aria-hidden="true"></a>        BankAccount account = builder.<span class="fu">build</span>();</span>
<span id="cb185-11"><a href="#cb185-11" aria-hidden="true"></a>        <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(account);</span>
<span id="cb185-12"><a href="#cb185-12" aria-hidden="true"></a>        <span class="co">// the builder provides a fluent API to construct regular instances</span></span>
<span id="cb185-13"><a href="#cb185-13" aria-hidden="true"></a>        BankAccount account1 =</span>
<span id="cb185-14"><a href="#cb185-14" aria-hidden="true"></a>                 builder.<span class="fu">withName</span>(<span class="st">&quot;Marjin Mejer&quot;</span>)</span>
<span id="cb185-15"><a href="#cb185-15" aria-hidden="true"></a>                        .<span class="fu">withBranch</span>(<span class="st">&quot;Paris&quot;</span>)</span>
<span id="cb185-16"><a href="#cb185-16" aria-hidden="true"></a>                        .<span class="fu">withBalance</span>(<span class="dv">10000</span>)</span>
<span id="cb185-17"><a href="#cb185-17" aria-hidden="true"></a>                        .<span class="fu">withInterestRate</span>(<span class="dv">2</span>)</span>
<span id="cb185-18"><a href="#cb185-18" aria-hidden="true"></a>                        .<span class="fu">build</span>();</span>
<span id="cb185-19"><a href="#cb185-19" aria-hidden="true"></a></span>
<span id="cb185-20"><a href="#cb185-20" aria-hidden="true"></a>        <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(account1);</span>
<span id="cb185-21"><a href="#cb185-21" aria-hidden="true"></a>    }</span>
<span id="cb185-22"><a href="#cb185-22" aria-hidden="true"></a>}</span></code></pre></div>
<p>As we see the Builder can be either used to create dummy instaces that are still safe to use (e.g. for test cases) or by using the <code>withXxx</code> methods to populate all attributes:</p>
<div class="sourceCode" id="cb186"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb186-1"><a href="#cb186-1" aria-hidden="true"></a><span class="dt">BankAccount</span> {accountNo <span class="ot">=</span> <span class="dv">1234</span>, name <span class="ot">=</span> <span class="st">&quot;Dummy Customer&quot;</span>, branch <span class="ot">=</span> <span class="st">&quot;London&quot;</span>, balance <span class="ot">=</span> <span class="fl">0.0</span>, interestRate <span class="ot">=</span> <span class="fl">0.0</span>}</span>
<span id="cb186-2"><a href="#cb186-2" aria-hidden="true"></a><span class="dt">BankAccount</span> {accountNo <span class="ot">=</span> <span class="dv">1234</span>, name <span class="ot">=</span> <span class="st">&quot;Marjin Mejer&quot;</span>, branch <span class="ot">=</span> <span class="st">&quot;Paris&quot;</span>, balance <span class="ot">=</span> <span class="fl">10000.0</span>, interestRate <span class="ot">=</span> <span class="fl">2.0</span>}</span></code></pre></div>
<p>From an API client perspective the Builder pattern can help to provide safe and convenient object construction which is not provided by the Java core language. As the Builder code is quite a redundant (e.g. having all attributes of the actual instance class) Builders are typically generated (e.g. with <a href="https://projectlombok.org/features/Builder">Lombok</a>).</p>
<p>In functional languages there is usually no need for the Builder pattern as the languages already provide the necessary infrastructure.</p>
<p>The following example shows how the above example would be solved in Haskell:</p>
<div class="sourceCode" id="cb187"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb187-1"><a href="#cb187-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">BankAccount</span> <span class="ot">=</span> <span class="dt">BankAccount</span> {</span>
<span id="cb187-2"><a href="#cb187-2" aria-hidden="true"></a><span class="ot">    accountNo    ::</span> <span class="dt">Int</span></span>
<span id="cb187-3"><a href="#cb187-3" aria-hidden="true"></a>  ,<span class="ot"> name         ::</span> <span class="dt">String</span></span>
<span id="cb187-4"><a href="#cb187-4" aria-hidden="true"></a>  ,<span class="ot"> branch       ::</span> <span class="dt">String</span></span>
<span id="cb187-5"><a href="#cb187-5" aria-hidden="true"></a>  ,<span class="ot"> balance      ::</span> <span class="dt">Double</span></span>
<span id="cb187-6"><a href="#cb187-6" aria-hidden="true"></a>  ,<span class="ot"> interestRate ::</span> <span class="dt">Double</span></span>
<span id="cb187-7"><a href="#cb187-7" aria-hidden="true"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb187-8"><a href="#cb187-8" aria-hidden="true"></a></span>
<span id="cb187-9"><a href="#cb187-9" aria-hidden="true"></a><span class="co">-- a &quot;smart constructor&quot; that just needs a unique int to construct a BankAccount</span></span>
<span id="cb187-10"><a href="#cb187-10" aria-hidden="true"></a><span class="ot">buildAccount ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">BankAccount</span></span>
<span id="cb187-11"><a href="#cb187-11" aria-hidden="true"></a>buildAccount i <span class="ot">=</span> <span class="dt">BankAccount</span> i <span class="st">&quot;Dummy Customer&quot;</span> <span class="st">&quot;London&quot;</span> <span class="dv">0</span> <span class="dv">0</span></span>
<span id="cb187-12"><a href="#cb187-12" aria-hidden="true"></a></span>
<span id="cb187-13"><a href="#cb187-13" aria-hidden="true"></a>builderDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb187-14"><a href="#cb187-14" aria-hidden="true"></a>    <span class="co">-- construct a dummmy instance</span></span>
<span id="cb187-15"><a href="#cb187-15" aria-hidden="true"></a>    <span class="kw">let</span> account <span class="ot">=</span> buildAccount <span class="dv">1234</span></span>
<span id="cb187-16"><a href="#cb187-16" aria-hidden="true"></a>    <span class="fu">print</span> account</span>
<span id="cb187-17"><a href="#cb187-17" aria-hidden="true"></a>    <span class="co">-- use record syntax to create a modified clone of the dummy instance</span></span>
<span id="cb187-18"><a href="#cb187-18" aria-hidden="true"></a>    <span class="kw">let</span> account1 <span class="ot">=</span> account {name<span class="ot">=</span><span class="st">&quot;Marjin Mejer&quot;</span>, branch<span class="ot">=</span><span class="st">&quot;Paris&quot;</span>, balance<span class="ot">=</span><span class="dv">10000</span>, interestRate<span class="ot">=</span><span class="dv">2</span>}</span>
<span id="cb187-19"><a href="#cb187-19" aria-hidden="true"></a>    <span class="fu">print</span> account1</span>
<span id="cb187-20"><a href="#cb187-20" aria-hidden="true"></a></span>
<span id="cb187-21"><a href="#cb187-21" aria-hidden="true"></a>    <span class="co">-- directly using record syntax to create an instance</span></span>
<span id="cb187-22"><a href="#cb187-22" aria-hidden="true"></a>    <span class="kw">let</span> account2 <span class="ot">=</span> <span class="dt">BankAccount</span> {</span>
<span id="cb187-23"><a href="#cb187-23" aria-hidden="true"></a>          accountNo    <span class="ot">=</span> <span class="dv">5678</span></span>
<span id="cb187-24"><a href="#cb187-24" aria-hidden="true"></a>        , name         <span class="ot">=</span> <span class="st">&quot;Marjin&quot;</span></span>
<span id="cb187-25"><a href="#cb187-25" aria-hidden="true"></a>        , branch       <span class="ot">=</span> <span class="st">&quot;Reikjavik&quot;</span></span>
<span id="cb187-26"><a href="#cb187-26" aria-hidden="true"></a>        , balance      <span class="ot">=</span> <span class="dv">1000</span></span>
<span id="cb187-27"><a href="#cb187-27" aria-hidden="true"></a>        , interestRate <span class="ot">=</span> <span class="fl">2.5</span></span>
<span id="cb187-28"><a href="#cb187-28" aria-hidden="true"></a>        }</span>
<span id="cb187-29"><a href="#cb187-29" aria-hidden="true"></a>    <span class="fu">print</span> account2</span>
<span id="cb187-30"><a href="#cb187-30" aria-hidden="true"></a></span>
<span id="cb187-31"><a href="#cb187-31" aria-hidden="true"></a><span class="co">-- and then in Ghci:</span></span>
<span id="cb187-32"><a href="#cb187-32" aria-hidden="true"></a>ghci<span class="op">&gt;</span> builderDemo</span>
<span id="cb187-33"><a href="#cb187-33" aria-hidden="true"></a><span class="dt">BankAccount</span> {accountNo <span class="ot">=</span> <span class="dv">1234</span>, name <span class="ot">=</span> <span class="st">&quot;Dummy Customer&quot;</span>, branch <span class="ot">=</span> <span class="st">&quot;London&quot;</span>, balance <span class="ot">=</span> <span class="fl">0.0</span>, interestRate <span class="ot">=</span> <span class="fl">0.0</span>}</span>
<span id="cb187-34"><a href="#cb187-34" aria-hidden="true"></a><span class="dt">BankAccount</span> {accountNo <span class="ot">=</span> <span class="dv">1234</span>, name <span class="ot">=</span> <span class="st">&quot;Marjin Mejer&quot;</span>, branch <span class="ot">=</span> <span class="st">&quot;Paris&quot;</span>, balance <span class="ot">=</span> <span class="fl">10000.0</span>, interestRate <span class="ot">=</span> <span class="fl">2.0</span>}</span>
<span id="cb187-35"><a href="#cb187-35" aria-hidden="true"></a><span class="dt">BankAccount</span> {accountNo <span class="ot">=</span> <span class="dv">5678</span>, name <span class="ot">=</span> <span class="st">&quot;Marjin Mejer&quot;</span>, branch <span class="ot">=</span> <span class="st">&quot;Reikjavik&quot;</span>, balance <span class="ot">=</span> <span class="fl">1000.0</span>, interestRate <span class="ot">=</span> <span class="fl">2.5</span>}</span></code></pre></div>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Builder.hs">Sourcecode for this section</a></p>
<h2 id="functional-programming-patterns">Functional Programming Patterns</h2>
<p>The patterns presented in this chapter all stem from functional languages. That is, they have been first developed in functional languages like Lisp, Scheme or Haskell and have later been adopted in other languages.</p>
<h3 id="higher-order-functions">Higher Order Functions</h3>
<blockquote>
<p>In mathematics and computer science, a higher-order function is a function that does at least one of the following:</p>
<ul>
<li>takes one or more functions as arguments (i.e. procedural parameters),</li>
<li>returns a function as its result.</li>
</ul>
<p>All other functions are first-order functions. In mathematics higher-order functions are also termed operators or functionals. The differential operator in calculus is a common example since it maps a function to its derivative, also a function. <a href="https://en.wikipedia.org/wiki/Higher-order_function">Quoted from Wikipedia</a></p>
</blockquote>
<p>We have already talked about higher order functions throughout this study – in particular in the section on the <a href="#strategy--functor">Strategy Pattern</a>. But as higher order functions are such a central pillar of the strength of functional languages I’d like to cover them in some more depths.</p>
<h4 id="higher-order-functions-taking-functions-as-arguments">Higher Order Functions taking functions as arguments</h4>
<p>Let’s have a look at two typical functions that work on lists; <code>sum</code> is calculating the sum of all values in a list, <code>product</code> likewise is computing the product of all values in the list:</p>
<div class="sourceCode" id="cb188"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb188-1"><a href="#cb188-1" aria-hidden="true"></a><span class="fu">sum</span><span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb188-2"><a href="#cb188-2" aria-hidden="true"></a><span class="fu">sum</span> []     <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb188-3"><a href="#cb188-3" aria-hidden="true"></a><span class="fu">sum</span> (x<span class="op">:</span>xs) <span class="ot">=</span> x <span class="op">+</span> <span class="fu">sum</span> xs</span>
<span id="cb188-4"><a href="#cb188-4" aria-hidden="true"></a></span>
<span id="cb188-5"><a href="#cb188-5" aria-hidden="true"></a><span class="fu">product</span><span class="ot"> ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb188-6"><a href="#cb188-6" aria-hidden="true"></a><span class="fu">product</span> []     <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb188-7"><a href="#cb188-7" aria-hidden="true"></a><span class="fu">product</span> (x<span class="op">:</span>xs) <span class="ot">=</span> x <span class="op">*</span> <span class="fu">product</span> xs</span>
<span id="cb188-8"><a href="#cb188-8" aria-hidden="true"></a></span>
<span id="cb188-9"><a href="#cb188-9" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb188-10"><a href="#cb188-10" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">sum</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb188-11"><a href="#cb188-11" aria-hidden="true"></a><span class="dv">55</span></span>
<span id="cb188-12"><a href="#cb188-12" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">product</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb188-13"><a href="#cb188-13" aria-hidden="true"></a><span class="dv">3628800</span></span></code></pre></div>
<p>These two functions <code>sum</code> and <code>product</code> have exactly the same structure. They both apply a mathematical operation <code>(+)</code> or <code>(*)</code> on a list by handling two cases:</p>
<ul>
<li>providing a neutral (or unit) value in the empty list <code>[]</code> case and</li>
<li>applying the mathematical operation and recursing into the tail of the list in the <code>(x:xs)</code> case.</li>
</ul>
<p>The two functions differ only in the concrete value for the empty list <code>[]</code> and the concrete mathematical operation to be applied in the <code>(x:xs)</code> case.</p>
<p>In order to avoid repetetive code when writing functions that work on lists, wise functional programmers have invented <code>fold</code> functions:</p>
<div class="sourceCode" id="cb189"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb189-1"><a href="#cb189-1" aria-hidden="true"></a><span class="fu">foldr</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</span>
<span id="cb189-2"><a href="#cb189-2" aria-hidden="true"></a><span class="fu">foldr</span> fn z []     <span class="ot">=</span> z</span>
<span id="cb189-3"><a href="#cb189-3" aria-hidden="true"></a><span class="fu">foldr</span> fn z (x<span class="op">:</span>xs) <span class="ot">=</span> fn x y</span>
<span id="cb189-4"><a href="#cb189-4" aria-hidden="true"></a>    <span class="kw">where</span> y <span class="ot">=</span> <span class="fu">foldr</span> fn z xs</span></code></pre></div>
<p>This <em>higher order function</em> takes a function <code>fn</code> of type <code>(a -&gt; b -&gt; b)</code>, a value <code>z</code> for the <code>[]</code> case and the actual list as parameters.</p>
<ul>
<li>in the <code>[]</code> case the value <code>z</code> is returned</li>
<li>in the <code>(x:xs)</code> case the function <code>fn</code> is applied to <code>x</code> and <code>y</code>, where <code>y</code> is computed by recursively applying <code>foldr fn z</code> on the tail of the list <code>xs</code>.</li>
</ul>
<p>We can use <code>foldr</code> to define functions like <code>sum</code> and <code>product</code> much more terse:</p>
<div class="sourceCode" id="cb190"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb190-1"><a href="#cb190-1" aria-hidden="true"></a><span class="ot">sum&#39; ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb190-2"><a href="#cb190-2" aria-hidden="true"></a>sum&#39; <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">+</span>) <span class="dv">0</span></span>
<span id="cb190-3"><a href="#cb190-3" aria-hidden="true"></a></span>
<span id="cb190-4"><a href="#cb190-4" aria-hidden="true"></a><span class="ot">product&#39; ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb190-5"><a href="#cb190-5" aria-hidden="true"></a>product&#39; <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">*</span>) <span class="dv">1</span></span></code></pre></div>
<p><code>foldr</code> can also be used to define <em>higher order functions</em> on lists like <code>map</code> and <code>filter</code> much denser than with the naive approach of writing pattern matching equations for <code>[]</code> and <code>(x:xs)</code>:</p>
<div class="sourceCode" id="cb191"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb191-1"><a href="#cb191-1" aria-hidden="true"></a><span class="co">-- naive approach:</span></span>
<span id="cb191-2"><a href="#cb191-2" aria-hidden="true"></a><span class="fu">map</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb191-3"><a href="#cb191-3" aria-hidden="true"></a><span class="fu">map</span> _ []     <span class="ot">=</span> []</span>
<span id="cb191-4"><a href="#cb191-4" aria-hidden="true"></a><span class="fu">map</span> f (x<span class="op">:</span>xs) <span class="ot">=</span> f x <span class="op">:</span> <span class="fu">map</span> f xs</span>
<span id="cb191-5"><a href="#cb191-5" aria-hidden="true"></a></span>
<span id="cb191-6"><a href="#cb191-6" aria-hidden="true"></a><span class="fu">filter</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb191-7"><a href="#cb191-7" aria-hidden="true"></a><span class="fu">filter</span> _ []     <span class="ot">=</span> []</span>
<span id="cb191-8"><a href="#cb191-8" aria-hidden="true"></a><span class="fu">filter</span> p (x<span class="op">:</span>xs) <span class="ot">=</span> <span class="kw">if</span> p x <span class="kw">then</span> x <span class="op">:</span> <span class="fu">filter</span> p xs <span class="kw">else</span> <span class="fu">filter</span> p xs</span>
<span id="cb191-9"><a href="#cb191-9" aria-hidden="true"></a></span>
<span id="cb191-10"><a href="#cb191-10" aria-hidden="true"></a><span class="co">-- wise functional programmers approach:</span></span>
<span id="cb191-11"><a href="#cb191-11" aria-hidden="true"></a><span class="ot">map&#39; ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb191-12"><a href="#cb191-12" aria-hidden="true"></a>map&#39; f <span class="ot">=</span> <span class="fu">foldr</span> ((<span class="op">:</span>) <span class="op">.</span> f) []</span>
<span id="cb191-13"><a href="#cb191-13" aria-hidden="true"></a></span>
<span id="cb191-14"><a href="#cb191-14" aria-hidden="true"></a><span class="ot">filter&#39; ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb191-15"><a href="#cb191-15" aria-hidden="true"></a>filter&#39; p <span class="ot">=</span> <span class="fu">foldr</span> (\x xs <span class="ot">-&gt;</span> <span class="kw">if</span> p x <span class="kw">then</span> x <span class="op">:</span> xs <span class="kw">else</span> xs) []</span>
<span id="cb191-16"><a href="#cb191-16" aria-hidden="true"></a></span>
<span id="cb191-17"><a href="#cb191-17" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb191-18"><a href="#cb191-18" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">map</span> (<span class="op">*</span><span class="dv">2</span>) [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb191-19"><a href="#cb191-19" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">14</span>,<span class="dv">16</span>,<span class="dv">18</span>,<span class="dv">20</span>]</span>
<span id="cb191-20"><a href="#cb191-20" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">filter</span> <span class="fu">even</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">10</span>]</span>
<span id="cb191-21"><a href="#cb191-21" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>]</span></code></pre></div>
<p>The idea to use <code>fold</code> operations to provide a generic mechanism to fold lists can be extented to cover other algebraic data types as well. Let’s take a binary tree as an example:</p>
<div class="sourceCode" id="cb192"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb192-1"><a href="#cb192-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span></span>
<span id="cb192-2"><a href="#cb192-2" aria-hidden="true"></a>            <span class="op">|</span> <span class="dt">Node</span> a (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a)</span>
<span id="cb192-3"><a href="#cb192-3" aria-hidden="true"></a></span>
<span id="cb192-4"><a href="#cb192-4" aria-hidden="true"></a><span class="ot">sumTree ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb192-5"><a href="#cb192-5" aria-hidden="true"></a>sumTree <span class="dt">Leaf</span> <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb192-6"><a href="#cb192-6" aria-hidden="true"></a>sumTree (<span class="dt">Node</span> x l r) <span class="ot">=</span> x <span class="op">+</span> sumTree l <span class="op">+</span> sumTree r</span>
<span id="cb192-7"><a href="#cb192-7" aria-hidden="true"></a></span>
<span id="cb192-8"><a href="#cb192-8" aria-hidden="true"></a><span class="ot">productTree ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb192-9"><a href="#cb192-9" aria-hidden="true"></a>productTree <span class="dt">Leaf</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb192-10"><a href="#cb192-10" aria-hidden="true"></a>productTree (<span class="dt">Node</span> x l r) <span class="ot">=</span> x <span class="op">*</span> sumTree l <span class="op">*</span> sumTree r</span>
<span id="cb192-11"><a href="#cb192-11" aria-hidden="true"></a></span>
<span id="cb192-12"><a href="#cb192-12" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb192-13"><a href="#cb192-13" aria-hidden="true"></a>ghci<span class="op">&gt;</span> sumTree tree</span>
<span id="cb192-14"><a href="#cb192-14" aria-hidden="true"></a><span class="dv">9</span></span>
<span id="cb192-15"><a href="#cb192-15" aria-hidden="true"></a>ghci<span class="op">&gt;</span> productTree tree</span>
<span id="cb192-16"><a href="#cb192-16" aria-hidden="true"></a><span class="dv">24</span></span></code></pre></div>
<p>The higher order <code>foldTree</code> operation takes a function <code>fn</code> of type <code>(a -&gt; b -&gt; b)</code>, a value <code>z</code> for the <code>Leaf</code> case and the actual <code>Tree a</code> as parameters:</p>
<div class="sourceCode" id="cb193"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb193-1"><a href="#cb193-1" aria-hidden="true"></a><span class="ot">foldTree ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> <span class="dt">Tree</span> a <span class="ot">-&gt;</span> b</span>
<span id="cb193-2"><a href="#cb193-2" aria-hidden="true"></a>foldTree fn z <span class="dt">Leaf</span> <span class="ot">=</span> z</span>
<span id="cb193-3"><a href="#cb193-3" aria-hidden="true"></a>foldTree fn z (<span class="dt">Node</span> a left right) <span class="ot">=</span> foldTree fn z&#39; left <span class="kw">where</span></span>
<span id="cb193-4"><a href="#cb193-4" aria-hidden="true"></a>   z&#39;  <span class="ot">=</span> fn a z&#39;&#39;</span>
<span id="cb193-5"><a href="#cb193-5" aria-hidden="true"></a>   z&#39;&#39; <span class="ot">=</span> foldTree fn z right</span></code></pre></div>
<p>The sum and product functions can now elegantly be defined by making use of <code>foldTree</code>:</p>
<div class="sourceCode" id="cb194"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb194-1"><a href="#cb194-1" aria-hidden="true"></a>sumTree&#39; <span class="ot">=</span> foldTree (<span class="op">+</span>) <span class="dv">0</span></span>
<span id="cb194-2"><a href="#cb194-2" aria-hidden="true"></a></span>
<span id="cb194-3"><a href="#cb194-3" aria-hidden="true"></a>productTree&#39; <span class="ot">=</span> foldTree (<span class="op">*</span>) <span class="dv">1</span></span></code></pre></div>
<p>As the family of <code>fold</code> operation is useful for many data types the GHC compiler even provides a special pragma that allows automatic provisioning of this functionality by declaring the data type as an instance of the type class <code>Foldable</code>:</p>
<div class="sourceCode" id="cb195"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb195-1"><a href="#cb195-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveFoldable #-}</span></span>
<span id="cb195-2"><a href="#cb195-2" aria-hidden="true"></a></span>
<span id="cb195-3"><a href="#cb195-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span></span>
<span id="cb195-4"><a href="#cb195-4" aria-hidden="true"></a>            <span class="op">|</span> <span class="dt">Node</span> a (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Foldable</span>)</span>
<span id="cb195-5"><a href="#cb195-5" aria-hidden="true"></a></span>
<span id="cb195-6"><a href="#cb195-6" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb195-7"><a href="#cb195-7" aria-hidden="true"></a><span class="op">&gt;</span> <span class="fu">foldr</span> (<span class="op">+</span>) <span class="dv">0</span> tree</span>
<span id="cb195-8"><a href="#cb195-8" aria-hidden="true"></a><span class="dv">9</span></span></code></pre></div>
<p>Apart from several <code>fold</code> operations the <code>Foldable</code> type class also provides useful functions like <code>maximum</code> and <code>minimum</code>: <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#t:Foldable">Foldable documentation on hackage</a></p>
<p>In this section we have seen how higher order functions that take functions as parameters can be very useful tools to provide generic algorithmic templates that can be applied in a wide range of situations.</p>
<h5 id="origami-programming-style">Origami programming style</h5>
<p>Mathematicians love symmetry. So it comes with littly surprise that the Haskell standard library <code>Data.List</code> provides a dual to <code>foldr</code>: the higher order function <code>unfoldr</code>. The function <code>foldr</code> allows to project a list of values on a single value. <code>unfoldr</code> allows to create a list of values starting from an initial value:</p>
<div class="sourceCode" id="cb196"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb196-1"><a href="#cb196-1" aria-hidden="true"></a><span class="ot">unfoldr ::</span> (b <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (a, b)) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a]</span>
<span id="cb196-2"><a href="#cb196-2" aria-hidden="true"></a>unfoldr f u <span class="ot">=</span> <span class="kw">case</span> f u <span class="kw">of</span></span>
<span id="cb196-3"><a href="#cb196-3" aria-hidden="true"></a>    <span class="dt">Nothing</span>     <span class="ot">-&gt;</span> []</span>
<span id="cb196-4"><a href="#cb196-4" aria-hidden="true"></a>    <span class="dt">Just</span> (x, v) <span class="ot">-&gt;</span> x<span class="op">:</span>(unfoldr f v)</span></code></pre></div>
<p>This mechanism can be used to generate finite and infinite lists:</p>
<div class="sourceCode" id="cb197"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb197-1"><a href="#cb197-1" aria-hidden="true"></a><span class="co">-- a list [10..0]</span></span>
<span id="cb197-2"><a href="#cb197-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="op">$</span> unfoldr (\n <span class="ot">-&gt;</span> <span class="kw">if</span> n<span class="op">==</span><span class="dv">0</span> <span class="kw">then</span> <span class="dt">Nothing</span> <span class="kw">else</span> <span class="dt">Just</span> (n, n<span class="op">-</span><span class="dv">1</span>)) <span class="dv">10</span></span>
<span id="cb197-3"><a href="#cb197-3" aria-hidden="true"></a>[<span class="dv">10</span>,<span class="dv">9</span>,<span class="dv">8</span>,<span class="dv">7</span>,<span class="dv">6</span>,<span class="dv">5</span>,<span class="dv">4</span>,<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>]</span>
<span id="cb197-4"><a href="#cb197-4" aria-hidden="true"></a></span>
<span id="cb197-5"><a href="#cb197-5" aria-hidden="true"></a><span class="co">-- the list of all fibonacci numbers</span></span>
<span id="cb197-6"><a href="#cb197-6" aria-hidden="true"></a>ghci<span class="op">&gt;</span> fibs <span class="ot">=</span> unfoldr (\(a, b) <span class="ot">-&gt;</span> <span class="dt">Just</span> (a, (b, a<span class="op">+</span>b))) (<span class="dv">0</span>, <span class="dv">1</span>)</span>
<span id="cb197-7"><a href="#cb197-7" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">print</span> <span class="op">$</span> <span class="fu">take</span> <span class="dv">20</span> fibs</span>
<span id="cb197-8"><a href="#cb197-8" aria-hidden="true"></a>[<span class="dv">0</span>,<span class="dv">1</span>,<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">8</span>,<span class="dv">13</span>,<span class="dv">21</span>,<span class="dv">34</span>,<span class="dv">55</span>,<span class="dv">89</span>,<span class="dv">144</span>,<span class="dv">233</span>,<span class="dv">377</span>,<span class="dv">610</span>,<span class="dv">987</span>,<span class="dv">1597</span>,<span class="dv">2584</span>,<span class="dv">4181</span>]</span></code></pre></div>
<p><code>unfoldr</code> can also be used to formulate algorithms like bubble sort in quite a dense form:</p>
<div class="sourceCode" id="cb198"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb198-1"><a href="#cb198-1" aria-hidden="true"></a><span class="co">-- bubble out the minimum element of a list:</span></span>
<span id="cb198-2"><a href="#cb198-2" aria-hidden="true"></a><span class="ot">bubble ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (a, [a])</span>
<span id="cb198-3"><a href="#cb198-3" aria-hidden="true"></a>bubble <span class="ot">=</span> <span class="fu">foldr</span> step <span class="dt">Nothing</span> <span class="kw">where</span></span>
<span id="cb198-4"><a href="#cb198-4" aria-hidden="true"></a>    step x <span class="dt">Nothing</span> <span class="ot">=</span> <span class="dt">Just</span> (x, [])</span>
<span id="cb198-5"><a href="#cb198-5" aria-hidden="true"></a>    step x (<span class="dt">Just</span> (y, ys))</span>
<span id="cb198-6"><a href="#cb198-6" aria-hidden="true"></a>        <span class="op">|</span> x <span class="op">&lt;</span> y     <span class="ot">=</span> <span class="dt">Just</span> (x, y<span class="op">:</span>ys)</span>
<span id="cb198-7"><a href="#cb198-7" aria-hidden="true"></a>        <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Just</span> (y, x<span class="op">:</span>ys)</span>
<span id="cb198-8"><a href="#cb198-8" aria-hidden="true"></a></span>
<span id="cb198-9"><a href="#cb198-9" aria-hidden="true"></a><span class="co">-- compute minimum, cons it with the minimum of the remaining list and so forth</span></span>
<span id="cb198-10"><a href="#cb198-10" aria-hidden="true"></a><span class="ot">bubbleSort ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb198-11"><a href="#cb198-11" aria-hidden="true"></a>bubbleSort <span class="ot">=</span> unfoldr bubble</span></code></pre></div>
<p>Unfolds produce data structures, and folds consume them. It is thus quite natural to compose these two operations. The pattern of an unfold followed by a fold (called <a href="https://en.wikipedia.org/wiki/Hylomorphism_(computer_science)"><em>hylomorphism</em></a> is fairly common. As a simple example we define the factorial function with our new tools:</p>
<div class="sourceCode" id="cb199"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb199-1"><a href="#cb199-1" aria-hidden="true"></a>factorial <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">*</span>) <span class="dv">1</span> <span class="op">.</span> unfoldr (\n <span class="ot">-&gt;</span> <span class="kw">if</span> n <span class="op">==</span><span class="dv">0</span> <span class="kw">then</span> <span class="dt">Nothing</span> <span class="kw">else</span> <span class="dt">Just</span> (n, n<span class="op">-</span><span class="dv">1</span>))</span></code></pre></div>
<p>The <code>unfold</code> part generates a list of integers <code>[1..n]</code> and the <code>foldr</code> part reduces this list by computing the product <code>[1..n]</code>.</p>
<p>But hylomorphisms are not limited to ivory tower examples: a typical compiler that takes some source code as input to generate an abstract syntax tree (unfolding) from which it then generates the object code of the target platform (folding) is quite a practical example of the same concept.</p>
<p>One interesting properties of hylomorphisms is that they may be fused – the intermediate data structure needs not actually be constructed. This technique is called <em>deforestation</em> and can be done automatically by a compiler.</p>
<p>Compressing data and uncompressing it later may be understood as a sequence of first folding and then unfolding. Algorithms that apply this pattern have been coined <a href="https://patternsinfp.wordpress.com/2017/10/04/metamorphisms/"><em>metamorphism</em></a>.</p>
<p>The programming style that uses combinations of higher order functions like fold and unfold operations on algebraic data structure has been dubbed <a href="https://www.cs.ox.ac.uk/jeremy.gibbons/publications/origami.pdf"><em>Origami Programming</em></a> after the Japanese art form based on paper folds.</p>
<h4 id="higher-order-functions-returning-functions">Higher Order Functions returning functions</h4>
<p>Functions returning new functions are ubiqituous in functional programming as well. If we look at a simple binary arithmetic functions like <code>(+)</code> or <code>(*)</code> it would be quite natural to think that they have a type signature like follows:</p>
<div class="sourceCode" id="cb200"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb200-1"><a href="#cb200-1" aria-hidden="true"></a><span class="ot">(+) ::</span> <span class="dt">Num</span> <span class="ot">=&gt;</span> (a, a) <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>But by inspecting the signature in GHCi (with <code>:t (+)</code>) we see that the actual signature is</p>
<div class="sourceCode" id="cb201"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb201-1"><a href="#cb201-1" aria-hidden="true"></a><span class="ot">(+) ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>This is because in Haskell all functions are considered curried: That is, all functions in Haskell take just one argument. The curried form is usually more convenient because it allows <a href="https://github.com/thma/LtuPatternFactory#dependency-injection--parameter-binding-partial-application">partial application</a>. It allows us to create new functions by applying the original function to a subset of the formal parameters:</p>
<div class="sourceCode" id="cb202"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb202-1"><a href="#cb202-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> double <span class="ot">=</span> (<span class="op">*</span>) <span class="dv">2</span></span>
<span id="cb202-2"><a href="#cb202-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t double</span>
<span id="cb202-3"><a href="#cb202-3" aria-hidden="true"></a><span class="ot">double ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb202-4"><a href="#cb202-4" aria-hidden="true"></a>ghci<span class="op">&gt;</span> double <span class="dv">7</span></span>
<span id="cb202-5"><a href="#cb202-5" aria-hidden="true"></a><span class="dv">14</span></span></code></pre></div>
<p>So even if we read a signature like <code>Int -&gt; Int -&gt; Int</code> informally as “takes two <code>Int</code>s and returns an <code>Int</code>”, It actually should be understood as <code>Int -&gt; (Int -&gt; Int)</code> which really says “takes an <code>Int</code> and returns a function of type <code>Int -&gt; Int</code>”.</p>
<p>Apart from this implicit occurrence of “functions returning functions” there are also more explicit use cases of this pattern. I’ll illustrate this with a simple generator for key/value mapping functions.</p>
<p>We start by defing a function type <code>Lookup</code> that can be used to define functions mapping keys to values:</p>
<div class="sourceCode" id="cb203"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb203-1"><a href="#cb203-1" aria-hidden="true"></a><span class="co">-- | Lookup is a function type from a key to a Maybe value:</span></span>
<span id="cb203-2"><a href="#cb203-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Lookup</span> key value <span class="ot">=</span> key <span class="ot">-&gt;</span> <span class="dt">Maybe</span> value</span>
<span id="cb203-3"><a href="#cb203-3" aria-hidden="true"></a></span>
<span id="cb203-4"><a href="#cb203-4" aria-hidden="true"></a><span class="co">-- | a lookup function that always returns Nothing</span></span>
<span id="cb203-5"><a href="#cb203-5" aria-hidden="true"></a><span class="ot">nada ::</span> <span class="dt">Lookup</span> k v</span>
<span id="cb203-6"><a href="#cb203-6" aria-hidden="true"></a>nada _ <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb203-7"><a href="#cb203-7" aria-hidden="true"></a></span>
<span id="cb203-8"><a href="#cb203-8" aria-hidden="true"></a><span class="co">-- | a function that knows it&#39;s abc...</span></span>
<span id="cb203-9"><a href="#cb203-9" aria-hidden="true"></a><span class="ot">abc ::</span> <span class="dt">Num</span> v <span class="ot">=&gt;</span> <span class="dt">Lookup</span> <span class="dt">String</span> v</span>
<span id="cb203-10"><a href="#cb203-10" aria-hidden="true"></a>abc <span class="st">&quot;a&quot;</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="dv">1</span></span>
<span id="cb203-11"><a href="#cb203-11" aria-hidden="true"></a>abc <span class="st">&quot;b&quot;</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="dv">2</span></span>
<span id="cb203-12"><a href="#cb203-12" aria-hidden="true"></a>abc <span class="st">&quot;c&quot;</span> <span class="ot">=</span> <span class="dt">Just</span> <span class="dv">3</span></span>
<span id="cb203-13"><a href="#cb203-13" aria-hidden="true"></a>abc _   <span class="ot">=</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>Now we write a <code>Lookup</code> function generator <code>put</code> that adds a new key to value mapping to an existing lookup function:</p>
<div class="sourceCode" id="cb204"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb204-1"><a href="#cb204-1" aria-hidden="true"></a><span class="co">-- | put returns a new Lookup function based on a key, a value and an existing lookup function:</span></span>
<span id="cb204-2"><a href="#cb204-2" aria-hidden="true"></a><span class="ot">put ::</span> <span class="dt">Eq</span> k <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">Lookup</span> k v <span class="ot">-&gt;</span> <span class="dt">Lookup</span> k v</span>
<span id="cb204-3"><a href="#cb204-3" aria-hidden="true"></a>put k v <span class="fu">lookup</span> <span class="ot">=</span></span>
<span id="cb204-4"><a href="#cb204-4" aria-hidden="true"></a>    \key <span class="ot">-&gt;</span> <span class="kw">if</span> key <span class="op">==</span> k</span>
<span id="cb204-5"><a href="#cb204-5" aria-hidden="true"></a>            <span class="kw">then</span> <span class="dt">Just</span> v</span>
<span id="cb204-6"><a href="#cb204-6" aria-hidden="true"></a>            <span class="kw">else</span> <span class="fu">lookup</span> key</span>
<span id="cb204-7"><a href="#cb204-7" aria-hidden="true"></a></span>
<span id="cb204-8"><a href="#cb204-8" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb204-9"><a href="#cb204-9" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get <span class="ot">=</span> put <span class="st">&quot;a&quot;</span> <span class="dv">1</span> nada</span>
<span id="cb204-10"><a href="#cb204-10" aria-hidden="true"></a></span>
<span id="cb204-11"><a href="#cb204-11" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="op">:</span>t get</span>
<span id="cb204-12"><a href="#cb204-12" aria-hidden="true"></a><span class="ot">get ::</span> <span class="dt">Num</span> v <span class="ot">=&gt;</span> <span class="dt">Lookup</span> <span class="dt">String</span> v</span>
<span id="cb204-13"><a href="#cb204-13" aria-hidden="true"></a></span>
<span id="cb204-14"><a href="#cb204-14" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get <span class="st">&quot;a&quot;</span></span>
<span id="cb204-15"><a href="#cb204-15" aria-hidden="true"></a><span class="dt">Just</span> <span class="dv">1</span></span>
<span id="cb204-16"><a href="#cb204-16" aria-hidden="true"></a></span>
<span id="cb204-17"><a href="#cb204-17" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get <span class="st">&quot;b&quot;</span></span>
<span id="cb204-18"><a href="#cb204-18" aria-hidden="true"></a><span class="dt">Nothing</span></span></code></pre></div>
<p>We can now use <code>put</code> to stack more key value mappings onto the <code>get</code> function:</p>
<div class="sourceCode" id="cb205"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb205-1"><a href="#cb205-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get&#39; <span class="ot">=</span> put <span class="st">&quot;b&quot;</span> <span class="dv">2</span> get</span>
<span id="cb205-2"><a href="#cb205-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get&#39; <span class="st">&quot;a&quot;</span></span>
<span id="cb205-3"><a href="#cb205-3" aria-hidden="true"></a><span class="dt">Just</span> <span class="dv">1</span></span>
<span id="cb205-4"><a href="#cb205-4" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get&#39; <span class="st">&quot;b&quot;</span></span>
<span id="cb205-5"><a href="#cb205-5" aria-hidden="true"></a><span class="dt">Just</span> <span class="dv">2</span></span>
<span id="cb205-6"><a href="#cb205-6" aria-hidden="true"></a>ghci<span class="op">&gt;</span> get&#39; <span class="st">&quot;c&quot;</span></span>
<span id="cb205-7"><a href="#cb205-7" aria-hidden="true"></a><span class="dt">Nothing</span></span></code></pre></div>
<p>A framework for symbolic derivation of functions in calculus would be another possible application of this approach, but as it involves several more advanced features (like Template Haskell and tagged types) I won’t cover it here but just point the fearless reader directly to the sourcecode: <a href="http://hackage.haskell.org/package/liboleg-2010.1.10.0/docs/src/Data-Symbolic-Diff.html">A symbolic differentiator for a subset of Haskell functions</a></p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/HigherOrder.hs">Sourcecode for this section</a></p>
<h3 id="map-reduce">Map Reduce</h3>
<blockquote>
<p>MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify a map function that processes a key/value pair to generate a set of intermediate key/value pairs, and a reduce function that merges all intermediate values associated with the same intermediate key.</p>
<p>Our abstraction is inspired by the map and reduce primitives present in Lisp and many other functional languages. <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/16cb30b4b92fd4989b8619a61752a2387c6dd474.pdf">Quoted from Google Research</a></p>
</blockquote>
<p>In this section I’m featuring one of the canonical examples for MapReduce: counting word frequencies in a large text.</p>
<p>Let’s start with a function <code>stringToWordCountMap</code> that takes a string as input and creates the respective word frequency map:</p>
<div class="sourceCode" id="cb206"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb206-1"><a href="#cb206-1" aria-hidden="true"></a><span class="co">-- | a key value map, mapping a word to a frequency</span></span>
<span id="cb206-2"><a href="#cb206-2" aria-hidden="true"></a><span class="kw">newtype</span> <span class="dt">WordCountMap</span> <span class="ot">=</span> <span class="dt">WordCountMap</span> (<span class="dt">Map</span> <span class="dt">String</span> <span class="dt">Int</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb206-3"><a href="#cb206-3" aria-hidden="true"></a></span>
<span id="cb206-4"><a href="#cb206-4" aria-hidden="true"></a><span class="co">-- | creating a word frequency map from a String.</span></span>
<span id="cb206-5"><a href="#cb206-5" aria-hidden="true"></a><span class="co">--   To ease readability I&#39;m using the (&gt;&gt;&gt;) operator, which is just an inverted (.): f &gt;&gt;&gt; g == g . f</span></span>
<span id="cb206-6"><a href="#cb206-6" aria-hidden="true"></a><span class="ot">stringToWordCountMap ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">WordCountMap</span></span>
<span id="cb206-7"><a href="#cb206-7" aria-hidden="true"></a>stringToWordCountMap <span class="ot">=</span></span>
<span id="cb206-8"><a href="#cb206-8" aria-hidden="true"></a>  <span class="fu">map</span> <span class="fu">toLower</span> <span class="op">&gt;&gt;&gt;</span> <span class="fu">words</span> <span class="op">&gt;&gt;&gt;</span>  <span class="co">-- convert to lowercase and split into a list of words</span></span>
<span id="cb206-9"><a href="#cb206-9" aria-hidden="true"></a>  <span class="fu">sort</span> <span class="op">&gt;&gt;&gt;</span> <span class="fu">group</span> <span class="op">&gt;&gt;&gt;</span>         <span class="co">-- sort the words alphabetically and group all equal words to sub-lists</span></span>
<span id="cb206-10"><a href="#cb206-10" aria-hidden="true"></a>  <span class="fu">map</span> (<span class="fu">head</span> <span class="op">&amp;&amp;&amp;</span> <span class="fu">length</span>) <span class="op">&gt;&gt;&gt;</span>  <span class="co">-- for each of those list of grouped words: form a pair (word, frequency)</span></span>
<span id="cb206-11"><a href="#cb206-11" aria-hidden="true"></a>  Map.fromList <span class="op">&gt;&gt;&gt;</span>           <span class="co">-- create a Map from the list of (word, frequency) pairs</span></span>
<span id="cb206-12"><a href="#cb206-12" aria-hidden="true"></a>  <span class="dt">WordCountMap</span>               <span class="co">-- wrap as WordCountMap</span></span>
<span id="cb206-13"><a href="#cb206-13" aria-hidden="true"></a></span>
<span id="cb206-14"><a href="#cb206-14" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb206-15"><a href="#cb206-15" aria-hidden="true"></a>ghci<span class="op">&gt;</span> stringToWordCountMap <span class="st">&quot;hello world World&quot;</span></span>
<span id="cb206-16"><a href="#cb206-16" aria-hidden="true"></a><span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;hello&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">2</span>)])</span></code></pre></div>
<p>In a MapReduce scenario we would have a huge text as input that would take ages to process on a single core. So the idea is to split up the huge text into smaller chunks that can than be processed in parallel on multiple cores or even large machine clusters.</p>
<p>Let’s assume we have split a text into two chunks. We could then use <code>map</code> to create a <code>WordCountMap</code> for both chunks:</p>
<div class="sourceCode" id="cb207"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb207-1"><a href="#cb207-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">map</span> stringToWordCountMap [<span class="st">&quot;hello world World&quot;</span>, <span class="st">&quot;out of this world&quot;</span>]</span>
<span id="cb207-2"><a href="#cb207-2" aria-hidden="true"></a>[<span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;hello&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">2</span>)])</span>
<span id="cb207-3"><a href="#cb207-3" aria-hidden="true"></a>,<span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;of&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;out&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;this&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">1</span>)])]</span></code></pre></div>
<p>This was the <em>Map</em> part. Now to <em>Reduce</em>. In Order to get a comprehensive word frequency map we have to merge those individual <code>WordCountMap</code>s into one. The merging must form a union of all entries from all individual maps. This union must also ensure that the frequencies from the indivual maps are added up properly in the resulting map. We will use the <code>Map.unionWith</code> function to achieve this:</p>
<div class="sourceCode" id="cb208"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb208-1"><a href="#cb208-1" aria-hidden="true"></a><span class="co">-- | merges a list of individual WordCountMap into single one.</span></span>
<span id="cb208-2"><a href="#cb208-2" aria-hidden="true"></a><span class="ot">reduceWordCountMaps ::</span> [<span class="dt">WordCountMap</span>] <span class="ot">-&gt;</span> <span class="dt">WordCountMap</span></span>
<span id="cb208-3"><a href="#cb208-3" aria-hidden="true"></a>reduceWordCountMaps <span class="ot">=</span> <span class="dt">WordCountMap</span> <span class="op">.</span> <span class="fu">foldr</span> (Map.unionWith (<span class="op">+</span>) <span class="op">.</span> coerce) empty</span>
<span id="cb208-4"><a href="#cb208-4" aria-hidden="true"></a></span>
<span id="cb208-5"><a href="#cb208-5" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb208-6"><a href="#cb208-6" aria-hidden="true"></a>ghci<span class="op">&gt;</span> reduceWordCountMaps it</span>
<span id="cb208-7"><a href="#cb208-7" aria-hidden="true"></a><span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;hello&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;of&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;out&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;this&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">3</span>)])</span></code></pre></div>
<p>We have just performed a manual map reduce operation! We can now take these ingredients to write a generic MapReduce function:</p>
<div class="sourceCode" id="cb209"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb209-1"><a href="#cb209-1" aria-hidden="true"></a><span class="ot">simpleMapReduce ::</span></span>
<span id="cb209-2"><a href="#cb209-2" aria-hidden="true"></a>     (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb209-3"><a href="#cb209-3" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb209-4"><a href="#cb209-4" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb209-5"><a href="#cb209-5" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb209-6"><a href="#cb209-6" aria-hidden="true"></a>simpleMapReduce mapFunc reduceFunc <span class="ot">=</span> reduceFunc <span class="op">.</span> <span class="fu">map</span> mapFunc</span>
<span id="cb209-7"><a href="#cb209-7" aria-hidden="true"></a></span>
<span id="cb209-8"><a href="#cb209-8" aria-hidden="true"></a><span class="co">-- and then in GHCi</span></span>
<span id="cb209-9"><a href="#cb209-9" aria-hidden="true"></a>ghci<span class="op">&gt;</span> simpleMapReduce stringToWordCountMap reduceWordCountMaps [<span class="st">&quot;hello world World&quot;</span>, <span class="st">&quot;out of this world&quot;</span>]</span>
<span id="cb209-10"><a href="#cb209-10" aria-hidden="true"></a><span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;hello&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;of&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;out&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;this&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">3</span>)])</span></code></pre></div>
<p>What I have shown so far just demonstrates the general mechanism of chaining <code>map</code> and <code>reduce</code> functions without implying any parallel execution. Essentially we are chaining a <code>map</code> with a <code>fold</code> (i.e. reduction) function. In the Haskell base library there is a higher order function <code>foldMap</code> that covers exactly this pattern of chaining. Please note that <code>foldMap</code>does only a single traversal of the foldable data structure. It fuses the <code>map</code> and <code>reduce</code> phase into a single one by function composition of <code>mappend</code> and the mapping function <code>f</code>:</p>
<div class="sourceCode" id="cb210"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb210-1"><a href="#cb210-1" aria-hidden="true"></a><span class="co">-- | Map each element of the structure to a monoid,</span></span>
<span id="cb210-2"><a href="#cb210-2" aria-hidden="true"></a><span class="co">-- and combine the results.</span></span>
<span id="cb210-3"><a href="#cb210-3" aria-hidden="true"></a><span class="fu">foldMap</span><span class="ot"> ::</span> (<span class="dt">Foldable</span> t, <span class="dt">Monoid</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> m</span>
<span id="cb210-4"><a href="#cb210-4" aria-hidden="true"></a><span class="fu">foldMap</span> f <span class="ot">=</span> <span class="fu">foldr</span> (<span class="fu">mappend</span> <span class="op">.</span> f) <span class="fu">mempty</span></span></code></pre></div>
<p>This signature requires that our type <code>WordCountMap</code> must be a <code>Monoid</code> in order to allow merging of multiple <code>WordCountMaps</code> by using <code>mappend</code>.</p>
<div class="sourceCode" id="cb211"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb211-1"><a href="#cb211-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Semigroup</span> <span class="dt">WordCountMap</span> <span class="kw">where</span></span>
<span id="cb211-2"><a href="#cb211-2" aria-hidden="true"></a>    <span class="dt">WordCountMap</span> a <span class="op">&lt;&gt;</span> <span class="dt">WordCountMap</span> b <span class="ot">=</span> <span class="dt">WordCountMap</span> <span class="op">$</span> Map.unionWith (<span class="op">+</span>) a b</span>
<span id="cb211-3"><a href="#cb211-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Monoid</span> <span class="dt">WordCountMap</span> <span class="kw">where</span></span>
<span id="cb211-4"><a href="#cb211-4" aria-hidden="true"></a>    <span class="fu">mempty</span> <span class="ot">=</span> <span class="dt">WordCountMap</span> Map.empty</span></code></pre></div>
<p>That’s all we need to use <code>foldMap</code> to achieve a MapReduce:</p>
<div class="sourceCode" id="cb212"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb212-1"><a href="#cb212-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">foldMap</span> stringToWordCountMap [<span class="st">&quot;hello world World&quot;</span>, <span class="st">&quot;out of this world&quot;</span>]</span>
<span id="cb212-2"><a href="#cb212-2" aria-hidden="true"></a><span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;hello&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;of&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;out&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;this&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">3</span>)])</span></code></pre></div>
<p>From what I have shown so far it’s easy to see that the <code>map</code> and <code>reduce</code> phases of the word frequency computation are candidates for heavily parallelized processing:</p>
<ul>
<li>The generation of word frequency maps for the text chunks can be done in parallel. There are no shared data or other dependencies between those executions.</li>
<li>The reduction of the maps can start in parallel (that is we don’t have to wait to start reduction until all individual maps are computed) and the reduction itself can also be parallelized.</li>
</ul>
<p>The calculation of word frequencies is a candidate for a parallel MapReduce because the addition operation used to accumulate the word frequencies is <em>associatve</em>: <em>The order of execution doesn’t affect the final result</em>.</p>
<p>(Actually our data type <code>WordCountMap</code> is not only a <code>Monoid</code> (which requires an <em>associative</em> binary operation) but even a <a href="https://en.wikipedia.org/wiki/Monoid#Commutative_monoid"><em>commutative Monoid</em></a>.)</p>
<p>So our conclusion: if the intermediary key/value map for the data analytics task at hand forms a <em>monoid</em> under the reduce operation then it is a candidate for parallel MapReduce. See also <a href="https://pdfs.semanticscholar.org/0498/3a1c0d6343e21129aaffca2a1b3eec419523.pdf">An Algebra for Distributed Big Data Analytics</a>.</p>
<p>Haskell provides a package <code>parallel</code> for defining parallel executions in a rather declarative way. Here is what a parallelized MapReduce looks like when using this package:</p>
<div class="sourceCode" id="cb213"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb213-1"><a href="#cb213-1" aria-hidden="true"></a><span class="co">-- | a MapReduce using the Control.Parallel package to denote parallel execution</span></span>
<span id="cb213-2"><a href="#cb213-2" aria-hidden="true"></a><span class="ot">parMapReduce ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> c</span>
<span id="cb213-3"><a href="#cb213-3" aria-hidden="true"></a>parMapReduce mapFunc reduceFunc input <span class="ot">=</span></span>
<span id="cb213-4"><a href="#cb213-4" aria-hidden="true"></a>    mapResult <span class="ot">`pseq`</span> reduceResult</span>
<span id="cb213-5"><a href="#cb213-5" aria-hidden="true"></a>    <span class="kw">where</span> mapResult    <span class="ot">=</span> parMap rseq mapFunc input</span>
<span id="cb213-6"><a href="#cb213-6" aria-hidden="true"></a>          reduceResult <span class="ot">=</span> reduceFunc mapResult <span class="ot">`using`</span> rseq</span>
<span id="cb213-7"><a href="#cb213-7" aria-hidden="true"></a></span>
<span id="cb213-8"><a href="#cb213-8" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb213-9"><a href="#cb213-9" aria-hidden="true"></a>ghci<span class="op">&gt;</span> parMapReduce stringToWordCountMap reduceWordCountMaps [<span class="st">&quot;hello world World&quot;</span>, <span class="st">&quot;out of this world&quot;</span>]</span>
<span id="cb213-10"><a href="#cb213-10" aria-hidden="true"></a><span class="dt">WordCountMap</span> (fromList [(<span class="st">&quot;hello&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;of&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;out&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;this&quot;</span>,<span class="dv">1</span>),(<span class="st">&quot;world&quot;</span>,<span class="dv">3</span>)])</span></code></pre></div>
<p>For more details see <a href="http://book.realworldhaskell.org/read/concurrent-and-multicore-programming.html">Real World Haskell</a></p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/MapReduce.hs">Sourcecode for this section</a></p>
<!--
### Continuation Passing

tbd.
-->
<h3 id="lazy-evaluation">Lazy Evaluation</h3>
<blockquote>
<p>In programming language theory, lazy evaluation, or call-by-need is an evaluation strategy which delays the evaluation of an expression until its value is needed (non-strict evaluation) and which also avoids repeated evaluations (sharing). The sharing can reduce the running time of certain functions by an exponential factor over other non-strict evaluation strategies, such as call-by-name.</p>
<p>The benefits of lazy evaluation include:</p>
<ul>
<li>The ability to define control flow (structures) as abstractions instead of primitives.</li>
<li>The ability to define potentially infinite data structures. This allows for more straightforward implementation of some algorithms.</li>
<li>Performance increases by avoiding needless calculations, and avoiding error conditions when evaluating compound expressions.</li>
</ul>
<p><a href="https://en.wikipedia.org/wiki/Lazy_evaluation">Quoted from Wikipedia</a></p>
</blockquote>
<p>Let’s start with a short snippet from a Java program:</p>
<div class="sourceCode" id="cb214"><pre class="sourceCode java"><code class="sourceCode java"><span id="cb214-1"><a href="#cb214-1" aria-hidden="true"></a>    <span class="co">// a non-terminating computation aka _|_ or bottom</span></span>
<span id="cb214-2"><a href="#cb214-2" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">static</span> <span class="bu">Void</span> <span class="fu">bottom</span>() {</span>
<span id="cb214-3"><a href="#cb214-3" aria-hidden="true"></a>        <span class="kw">return</span> <span class="fu">bottom</span>();</span>
<span id="cb214-4"><a href="#cb214-4" aria-hidden="true"></a>    }</span>
<span id="cb214-5"><a href="#cb214-5" aria-hidden="true"></a></span>
<span id="cb214-6"><a href="#cb214-6" aria-hidden="true"></a>    <span class="co">// the K combinator, K x y returns x</span></span>
<span id="cb214-7"><a href="#cb214-7" aria-hidden="true"></a>    <span class="kw">private</span> <span class="dt">static</span> &lt;A, B&gt; A <span class="fu">k</span>(A x, B y) {</span>
<span id="cb214-8"><a href="#cb214-8" aria-hidden="true"></a>        <span class="kw">return</span> x;</span>
<span id="cb214-9"><a href="#cb214-9" aria-hidden="true"></a>    }</span>
<span id="cb214-10"><a href="#cb214-10" aria-hidden="true"></a></span>
<span id="cb214-11"><a href="#cb214-11" aria-hidden="true"></a>    <span class="kw">public</span> <span class="dt">static</span> <span class="dt">void</span> <span class="fu">main</span>(<span class="bu">String</span>[] args) {</span>
<span id="cb214-12"><a href="#cb214-12" aria-hidden="true"></a>        <span class="co">// part 1</span></span>
<span id="cb214-13"><a href="#cb214-13" aria-hidden="true"></a>        <span class="kw">if</span> (<span class="kw">true</span>) {</span>
<span id="cb214-14"><a href="#cb214-14" aria-hidden="true"></a>            <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="st">&quot;21 is only half the truth&quot;</span>);</span>
<span id="cb214-15"><a href="#cb214-15" aria-hidden="true"></a>        } <span class="kw">else</span> {</span>
<span id="cb214-16"><a href="#cb214-16" aria-hidden="true"></a>            <span class="fu">bottom</span>();</span>
<span id="cb214-17"><a href="#cb214-17" aria-hidden="true"></a>        }</span>
<span id="cb214-18"><a href="#cb214-18" aria-hidden="true"></a></span>
<span id="cb214-19"><a href="#cb214-19" aria-hidden="true"></a>        <span class="co">// part 2</span></span>
<span id="cb214-20"><a href="#cb214-20" aria-hidden="true"></a>        <span class="bu">System</span>.<span class="fu">out</span>.<span class="fu">println</span>(<span class="fu">k</span> (<span class="dv">42</span>, <span class="fu">bottom</span>()));</span>
<span id="cb214-21"><a href="#cb214-21" aria-hidden="true"></a>    }</span></code></pre></div>
<p>What is the expected output of running <code>main</code>? In part 1 we expect to see the text “21 is only half the truth” on the console. The else part of the <code>if</code> statement will never be executed (thus avoiding the endless loop of calling <code>bottom()</code>) as <code>true</code> is always true.</p>
<p>But what will happen in part 2? If the Java compiler would be clever it could determine that <code>k (x, y)</code> will never need to evaluate <code>y</code> as is always returns just <code>x</code>. In this case we should see a 42 printed to the console.</p>
<p>But Java Method calls have eager evaluation semantics. So will just see a <code>StackOverflowError</code>…</p>
<p>In a non-strict (or lazy) language like Haskell this will work out much smoother:</p>
<div class="sourceCode" id="cb215"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb215-1"><a href="#cb215-1" aria-hidden="true"></a><span class="co">-- | bottom, a computation which never completes successfully, aka as _|_</span></span>
<span id="cb215-2"><a href="#cb215-2" aria-hidden="true"></a><span class="ot">bottom ::</span> a</span>
<span id="cb215-3"><a href="#cb215-3" aria-hidden="true"></a>bottom <span class="ot">=</span> bottom</span>
<span id="cb215-4"><a href="#cb215-4" aria-hidden="true"></a></span>
<span id="cb215-5"><a href="#cb215-5" aria-hidden="true"></a><span class="co">-- | the K combinator which drop its second argument (k x y = x)</span></span>
<span id="cb215-6"><a href="#cb215-6" aria-hidden="true"></a><span class="ot">k ::</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a</span>
<span id="cb215-7"><a href="#cb215-7" aria-hidden="true"></a>k x _ <span class="ot">=</span> x</span>
<span id="cb215-8"><a href="#cb215-8" aria-hidden="true"></a></span>
<span id="cb215-9"><a href="#cb215-9" aria-hidden="true"></a><span class="ot">infinityDemo ::</span> <span class="dt">IO</span> ()</span>
<span id="cb215-10"><a href="#cb215-10" aria-hidden="true"></a>infinityDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb215-11"><a href="#cb215-11" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> k <span class="dv">21</span> <span class="fu">undefined</span> <span class="co">-- evaluating undefined would result in a runtime error</span></span>
<span id="cb215-12"><a href="#cb215-12" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> k <span class="dv">42</span> bottom    <span class="co">-- evaluating botoom would result in an endless loop</span></span>
<span id="cb215-13"><a href="#cb215-13" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>Haskell being a non-strict language the arguments of <code>k</code> are not evaluated when calling the function. thus in <code>k 21 undefined</code> and <code>k 42 bottom</code> the second arguments <code>undefined</code> and <code>bottom</code> are simply dropped and never evaluated.</p>
<p>The Haskell laziness can sometimes be tricky to deal with but it has also some huge benefits when dealing with infinite data structures.</p>
<div class="sourceCode" id="cb216"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb216-1"><a href="#cb216-1" aria-hidden="true"></a><span class="co">-- | a list of *all* natural numbers</span></span>
<span id="cb216-2"><a href="#cb216-2" aria-hidden="true"></a><span class="ot">ints ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a]</span>
<span id="cb216-3"><a href="#cb216-3" aria-hidden="true"></a>ints <span class="ot">=</span> from <span class="dv">1</span></span>
<span id="cb216-4"><a href="#cb216-4" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb216-5"><a href="#cb216-5" aria-hidden="true"></a>    from n <span class="ot">=</span> n <span class="op">:</span> from (n <span class="op">+</span> <span class="dv">1</span>)</span></code></pre></div>
<p>This is a recursive definition of a list holding all natural numbers. As this recursion has no termination criteria it will never terminate!</p>
<p>What will happen when we start to use <code>ints</code> in our code?</p>
<div class="sourceCode" id="cb217"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb217-1"><a href="#cb217-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> ints</span>
<span id="cb217-2"><a href="#cb217-2" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span></code></pre></div>
<p>In this case we have not been greedy and just asked for a finite subset of ints. The Haskell runtime thus does not fully evaluate <code>ints</code> but only as many elements as we aked for.</p>
<p>These kind of generator functions (also known as <a href="https://wiki.haskell.org/Constant_applicative_form">CAFs</a> for Constant Applicative Forms) can be very useful to define lazy streams of infinite data.</p>
<p>Haskell even provides some more syntactic sugar to ease the definitions of such CAFs. So for instance our <code>ints</code> function could be written as:</p>
<div class="sourceCode" id="cb218"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb218-1"><a href="#cb218-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> ints <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span>]</span>
<span id="cb218-2"><a href="#cb218-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> ints</span>
<span id="cb218-3"><a href="#cb218-3" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span></code></pre></div>
<p>This feature is called <em>arithmetic sequences</em> and allows also to define regions and a step witdth:</p>
<div class="sourceCode" id="cb219"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb219-1"><a href="#cb219-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> [<span class="dv">2</span>,<span class="dv">4</span><span class="op">..</span><span class="dv">20</span>]</span>
<span id="cb219-2"><a href="#cb219-2" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">14</span>,<span class="dv">16</span>,<span class="dv">18</span>,<span class="dv">20</span>]</span></code></pre></div>
<p>Another useful feature in this area are <em>list comprehensions</em>. With list comprehensions it’s quite convenient to define infinite sets with specific properties:</p>
<div class="sourceCode" id="cb220"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb220-1"><a href="#cb220-1" aria-hidden="true"></a><span class="co">-- | infinite list of all odd numbers</span></span>
<span id="cb220-2"><a href="#cb220-2" aria-hidden="true"></a><span class="ot">odds ::</span> [<span class="dt">Int</span>]</span>
<span id="cb220-3"><a href="#cb220-3" aria-hidden="true"></a>odds <span class="ot">=</span> [n <span class="op">|</span> n <span class="ot">&lt;-</span> [<span class="dv">1</span> <span class="op">..</span>], n <span class="ot">`mod`</span> <span class="dv">2</span> <span class="op">/=</span> <span class="dv">0</span>] <span class="co">-- read as set builder notation: {n | n ∈ ℕ, n%2 ≠ 0}</span></span>
<span id="cb220-4"><a href="#cb220-4" aria-hidden="true"></a></span>
<span id="cb220-5"><a href="#cb220-5" aria-hidden="true"></a><span class="co">-- | infinite list of all integer pythagorean triples with a² + b² = c²</span></span>
<span id="cb220-6"><a href="#cb220-6" aria-hidden="true"></a><span class="ot">pythagoreanTriples ::</span> [(<span class="dt">Int</span>, <span class="dt">Int</span>, <span class="dt">Int</span>)]</span>
<span id="cb220-7"><a href="#cb220-7" aria-hidden="true"></a>pythagoreanTriples <span class="ot">=</span>  [ (a, b, c)</span>
<span id="cb220-8"><a href="#cb220-8" aria-hidden="true"></a>  <span class="op">|</span> c <span class="ot">&lt;-</span> [<span class="dv">1</span> <span class="op">..</span>]</span>
<span id="cb220-9"><a href="#cb220-9" aria-hidden="true"></a>  , b <span class="ot">&lt;-</span> [<span class="dv">1</span> <span class="op">..</span> c <span class="op">-</span> <span class="dv">1</span>]</span>
<span id="cb220-10"><a href="#cb220-10" aria-hidden="true"></a>  , a <span class="ot">&lt;-</span> [<span class="dv">1</span> <span class="op">..</span> b <span class="op">-</span> <span class="dv">1</span>]</span>
<span id="cb220-11"><a href="#cb220-11" aria-hidden="true"></a>  , a <span class="op">^</span> <span class="dv">2</span> <span class="op">+</span> b <span class="op">^</span> <span class="dv">2</span> <span class="op">==</span> c <span class="op">^</span> <span class="dv">2</span></span>
<span id="cb220-12"><a href="#cb220-12" aria-hidden="true"></a>  ]</span>
<span id="cb220-13"><a href="#cb220-13" aria-hidden="true"></a></span>
<span id="cb220-14"><a href="#cb220-14" aria-hidden="true"></a><span class="co">-- | infinite list of all prime numbers</span></span>
<span id="cb220-15"><a href="#cb220-15" aria-hidden="true"></a><span class="ot">primes ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb220-16"><a href="#cb220-16" aria-hidden="true"></a>primes <span class="ot">=</span> <span class="dv">2</span> <span class="op">:</span> [i <span class="op">|</span> i <span class="ot">&lt;-</span> [<span class="dv">3</span>,<span class="dv">5</span><span class="op">..</span>],  </span>
<span id="cb220-17"><a href="#cb220-17" aria-hidden="true"></a>              <span class="fu">and</span> [<span class="fu">rem</span> i p <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">|</span> p <span class="ot">&lt;-</span> <span class="fu">takeWhile</span> (\p <span class="ot">-&gt;</span> p<span class="op">^</span><span class="dv">2</span> <span class="op">&lt;=</span> i) primes]]</span>
<span id="cb220-18"><a href="#cb220-18" aria-hidden="true"></a></span>
<span id="cb220-19"><a href="#cb220-19" aria-hidden="true"></a><span class="co">-- and the in GHCi:</span></span>
<span id="cb220-20"><a href="#cb220-20" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> odds</span>
<span id="cb220-21"><a href="#cb220-21" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">15</span>,<span class="dv">17</span>,<span class="dv">19</span>]</span>
<span id="cb220-22"><a href="#cb220-22" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> pythagoreanTriples</span>
<span id="cb220-23"><a href="#cb220-23" aria-hidden="true"></a>[(<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>),(<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>),(<span class="dv">5</span>,<span class="dv">12</span>,<span class="dv">13</span>),(<span class="dv">9</span>,<span class="dv">12</span>,<span class="dv">15</span>),(<span class="dv">8</span>,<span class="dv">15</span>,<span class="dv">17</span>),(<span class="dv">12</span>,<span class="dv">16</span>,<span class="dv">20</span>),(<span class="dv">15</span>,<span class="dv">20</span>,<span class="dv">25</span>),(<span class="dv">7</span>,<span class="dv">24</span>,<span class="dv">25</span>),(<span class="dv">10</span>,<span class="dv">24</span>,<span class="dv">26</span>),(<span class="dv">20</span>,<span class="dv">21</span>,<span class="dv">29</span>)]</span>
<span id="cb220-24"><a href="#cb220-24" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">20</span> primes</span>
<span id="cb220-25"><a href="#cb220-25" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">17</span>,<span class="dv">19</span>,<span class="dv">23</span>,<span class="dv">29</span>,<span class="dv">31</span>,<span class="dv">37</span>,<span class="dv">41</span>,<span class="dv">43</span>,<span class="dv">47</span>,<span class="dv">53</span>,<span class="dv">59</span>,<span class="dv">61</span>,<span class="dv">67</span>,<span class="dv">71</span>]</span></code></pre></div>
<p>Another classic example in this area is the Newton-Raphson algorithm that approximates the square roots of a number <em>n</em> by starting from an initial value <em>a<sub>0</sub></em> and computing the approximation <em>a<sub>i+1</sub></em> as:</p>
<p><em>a<sub>i+1</sub> = (a<sub>i</sub> + n/a<sub>i</sub>)/2</em></p>
<p>For <em>n &gt;= 0</em> and <em>a<sub>0</sub> &gt; 0</em> this series converges quickly towards the square root of <em>n</em> (See <a href="https://en.wikipedia.org/wiki/Newton%27s_method">Newton’s method on Wikipedia</a> for details).</p>
<p>The Haskell implementations makes full usage of lazy evaluation. The first step is to define a function <code>next</code> that computes <em>a<sub>i+1</sub></em> based on <em>n</em> and <em>a<sub>i</sub></em>:</p>
<div class="sourceCode" id="cb221"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb221-1"><a href="#cb221-1" aria-hidden="true"></a><span class="ot">next ::</span> <span class="dt">Fractional</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb221-2"><a href="#cb221-2" aria-hidden="true"></a>next n a_i <span class="ot">=</span> (a_i <span class="op">+</span> n<span class="op">/</span>a_i)<span class="op">/</span><span class="dv">2</span></span></code></pre></div>
<p>Now we use <code>next</code> to define an infinite set of approximizations:</p>
<div class="sourceCode" id="cb222"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb222-1"><a href="#cb222-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> root_of_16 <span class="ot">=</span> <span class="fu">iterate</span> (next <span class="dv">16</span>) <span class="dv">1</span></span>
<span id="cb222-2"><a href="#cb222-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> root_of_16</span>
<span id="cb222-3"><a href="#cb222-3" aria-hidden="true"></a>[<span class="fl">1.0</span>,<span class="fl">8.5</span>,<span class="fl">5.1911764705882355</span>,<span class="fl">4.136664722546242</span>,<span class="fl">4.002257524798522</span>,<span class="fl">4.000000636692939</span>,<span class="fl">4.000000000000051</span>,<span class="fl">4.0</span>,<span class="fl">4.0</span>,<span class="fl">4.0</span>]</span></code></pre></div>
<p>The function <code>iterate</code> is a standard library function in Haskell. <code>iterate f x</code> returns an infinite list of repeated applications of <code>f</code> to <code>x</code>:</p>
<div class="sourceCode" id="cb223"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb223-1"><a href="#cb223-1" aria-hidden="true"></a><span class="fu">iterate</span> f x <span class="op">==</span> [x, f x, f (f x), <span class="op">...</span>]</span></code></pre></div>
<p>It is defined as:</p>
<div class="sourceCode" id="cb224"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb224-1"><a href="#cb224-1" aria-hidden="true"></a><span class="fu">iterate</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> [a]</span>
<span id="cb224-2"><a href="#cb224-2" aria-hidden="true"></a><span class="fu">iterate</span> f x <span class="ot">=</span>  x <span class="op">:</span> <span class="fu">iterate</span> f (f x)</span></code></pre></div>
<p>As lazy evaluation is the default in Haskell it’s totally safe to define infinite structures like <code>root_of_16</code> as long as we make sure that not all elements of the list are required by subsequent computations.</p>
<p>As <code>root_of_16</code> represents a converging series of approximisations we’ll have to search this list for the first element that matches our desired precision, specified by a maximum tolerance <code>eps</code>.</p>
<p>We define a function <code>within</code> which takes the tolerance <code>eps</code> and a list of approximations and looks down the list for two successive approximations <code>a</code> and <code>b</code> that differ by no more than the given tolerance <code>eps</code>:</p>
<div class="sourceCode" id="cb225"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb225-1"><a href="#cb225-1" aria-hidden="true"></a><span class="ot">within ::</span> (<span class="dt">Ord</span> a, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb225-2"><a href="#cb225-2" aria-hidden="true"></a>within eps (a<span class="op">:</span>b<span class="op">:</span>rest) <span class="ot">=</span></span>
<span id="cb225-3"><a href="#cb225-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">abs</span>(a<span class="op">/</span>b <span class="op">-</span> <span class="dv">1</span>) <span class="op">&lt;=</span> eps</span>
<span id="cb225-4"><a href="#cb225-4" aria-hidden="true"></a>    <span class="kw">then</span> b</span>
<span id="cb225-5"><a href="#cb225-5" aria-hidden="true"></a>    <span class="kw">else</span> within eps (b<span class="op">:</span>rest)</span></code></pre></div>
<p>The actual function <code>root n eps</code> can then be defined as:</p>
<div class="sourceCode" id="cb226"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb226-1"><a href="#cb226-1" aria-hidden="true"></a><span class="ot">root ::</span> (<span class="dt">Ord</span> a, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb226-2"><a href="#cb226-2" aria-hidden="true"></a>root n eps <span class="ot">=</span> within eps (<span class="fu">iterate</span> (next n) <span class="dv">1</span>)<span class="ot">```</span></span>
<span id="cb226-3"><a href="#cb226-3" aria-hidden="true"></a></span>
<span id="cb226-4"><a href="#cb226-4" aria-hidden="true"></a><span class="ot">-- and then in GHCI:</span></span>
<span id="cb226-5"><a href="#cb226-5" aria-hidden="true"></a><span class="ot">ghci&gt; root 2 0.000001</span></span>
<span id="cb226-6"><a href="#cb226-6" aria-hidden="true"></a><span class="ot">1.414213562373095</span></span></code></pre></div>
<p>This example has been taken from The classic paper <a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">Why Functional Programming Matters</a>. In this paper John Hughes highlights higher order functions and lazy evaluation as two outstanding contributions of functional programming. The paper features several very instructive examples for both concepts.</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Infinity.hs">Sourcecode for this section</a></p>
<!--
### Functional Reactive Programming

tbd.
-->
<h3 id="reflection">Reflection</h3>
<blockquote>
<p>In computer science, reflection is the ability of a computer program to examine, introspect, and modify its own structure and behavior at runtime.</p>
<p><a href="https://en.wikipedia.org/wiki/Reflection_(computer_programming)">Quoted from Wikipedia</a></p>
</blockquote>
<p>Reflection is one of those programming language features that were introduced first in Lisp based environments but became popular in many mainstream programming languages as it proved to be very useful in writing generic frameworks for persistence, serialization etc.</p>
<p>I’ll demonstrate this with simple persistence library. This library is kept as simple as possible. We just define a new type class <code>Entity a</code> with two actions <code>persist</code> and <code>retrieve</code> with both have a generic default implementation used for writing an entity to a file or reading it back from a file. The type class also features a function <code>getId</code> which returns a unique identifier for a given entity, which must be implemented by all concrete types deriving <code>Entity</code>.</p>
<div class="sourceCode" id="cb227"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb227-1"><a href="#cb227-1" aria-hidden="true"></a><span class="kw">module</span> <span class="dt">SimplePersistence</span></span>
<span id="cb227-2"><a href="#cb227-2" aria-hidden="true"></a>    ( <span class="dt">Id</span></span>
<span id="cb227-3"><a href="#cb227-3" aria-hidden="true"></a>    , <span class="dt">Entity</span></span>
<span id="cb227-4"><a href="#cb227-4" aria-hidden="true"></a>    , getId</span>
<span id="cb227-5"><a href="#cb227-5" aria-hidden="true"></a>    , persist</span>
<span id="cb227-6"><a href="#cb227-6" aria-hidden="true"></a>    , retrieve</span>
<span id="cb227-7"><a href="#cb227-7" aria-hidden="true"></a>    ) <span class="kw">where</span></span>
<span id="cb227-8"><a href="#cb227-8" aria-hidden="true"></a></span>
<span id="cb227-9"><a href="#cb227-9" aria-hidden="true"></a><span class="co">-- | Identifier for an Entity</span></span>
<span id="cb227-10"><a href="#cb227-10" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Id</span> <span class="ot">=</span> <span class="dt">String</span></span>
<span id="cb227-11"><a href="#cb227-11" aria-hidden="true"></a></span>
<span id="cb227-12"><a href="#cb227-12" aria-hidden="true"></a><span class="co">-- | The Entity type class provides generic persistence to text files</span></span>
<span id="cb227-13"><a href="#cb227-13" aria-hidden="true"></a><span class="kw">class</span> (<span class="dt">Show</span> a, <span class="dt">Read</span> a) <span class="ot">=&gt;</span> <span class="dt">Entity</span> a <span class="kw">where</span></span>
<span id="cb227-14"><a href="#cb227-14" aria-hidden="true"></a></span>
<span id="cb227-15"><a href="#cb227-15" aria-hidden="true"></a>    <span class="co">-- | return the unique Id of the entity. This function must be implemented by type class instances.</span></span>
<span id="cb227-16"><a href="#cb227-16" aria-hidden="true"></a><span class="ot">    getId ::</span> a <span class="ot">-&gt;</span> <span class="dt">Id</span></span>
<span id="cb227-17"><a href="#cb227-17" aria-hidden="true"></a></span>
<span id="cb227-18"><a href="#cb227-18" aria-hidden="true"></a>    <span class="co">-- | persist an entity of type a and identified by an Id to a text file</span></span>
<span id="cb227-19"><a href="#cb227-19" aria-hidden="true"></a><span class="ot">    persist ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb227-20"><a href="#cb227-20" aria-hidden="true"></a>    persist entity <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb227-21"><a href="#cb227-21" aria-hidden="true"></a>        <span class="co">-- compute file path based on entity id</span></span>
<span id="cb227-22"><a href="#cb227-22" aria-hidden="true"></a>        <span class="kw">let</span> fileName <span class="ot">=</span> getPath (getId entity)</span>
<span id="cb227-23"><a href="#cb227-23" aria-hidden="true"></a>        <span class="co">-- serialize entity as JSON and write to file</span></span>
<span id="cb227-24"><a href="#cb227-24" aria-hidden="true"></a>        <span class="fu">writeFile</span> fileName (<span class="fu">show</span> entity)</span>
<span id="cb227-25"><a href="#cb227-25" aria-hidden="true"></a></span>
<span id="cb227-26"><a href="#cb227-26" aria-hidden="true"></a>    <span class="co">-- | load persistent entity of type a and identified by an Id</span></span>
<span id="cb227-27"><a href="#cb227-27" aria-hidden="true"></a><span class="ot">    retrieve ::</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb227-28"><a href="#cb227-28" aria-hidden="true"></a>    retrieve <span class="fu">id</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb227-29"><a href="#cb227-29" aria-hidden="true"></a>        <span class="co">-- compute file path based on entity id</span></span>
<span id="cb227-30"><a href="#cb227-30" aria-hidden="true"></a>        <span class="kw">let</span> fileName <span class="ot">=</span> getPath <span class="fu">id</span></span>
<span id="cb227-31"><a href="#cb227-31" aria-hidden="true"></a>        <span class="co">-- read file content into string</span></span>
<span id="cb227-32"><a href="#cb227-32" aria-hidden="true"></a>        contentString <span class="ot">&lt;-</span> <span class="fu">readFile</span> fileName</span>
<span id="cb227-33"><a href="#cb227-33" aria-hidden="true"></a>        <span class="co">-- parse entity from string</span></span>
<span id="cb227-34"><a href="#cb227-34" aria-hidden="true"></a>        <span class="fu">return</span> (<span class="fu">read</span> contentString)</span>
<span id="cb227-35"><a href="#cb227-35" aria-hidden="true"></a></span>
<span id="cb227-36"><a href="#cb227-36" aria-hidden="true"></a><span class="co">-- | compute path of data file</span></span>
<span id="cb227-37"><a href="#cb227-37" aria-hidden="true"></a><span class="ot">getPath ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span></span>
<span id="cb227-38"><a href="#cb227-38" aria-hidden="true"></a>getPath <span class="fu">id</span> <span class="ot">=</span> <span class="st">&quot;.stack-work/&quot;</span> <span class="op">++</span> <span class="fu">id</span> <span class="op">++</span> <span class="st">&quot;.txt&quot;</span></span></code></pre></div>
<p>A typical usage of this library would look like follows:</p>
<div class="sourceCode" id="cb228"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb228-1"><a href="#cb228-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">SimplePersistence</span> (<span class="dt">Id</span>, <span class="dt">Entity</span>, getId, persist, retrieve)</span>
<span id="cb228-2"><a href="#cb228-2" aria-hidden="true"></a></span>
<span id="cb228-3"><a href="#cb228-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span> {</span>
<span id="cb228-4"><a href="#cb228-4" aria-hidden="true"></a><span class="ot">      userId ::</span> <span class="dt">Id</span></span>
<span id="cb228-5"><a href="#cb228-5" aria-hidden="true"></a>    ,<span class="ot"> name   ::</span> <span class="dt">String</span></span>
<span id="cb228-6"><a href="#cb228-6" aria-hidden="true"></a>    ,<span class="ot"> email  ::</span> <span class="dt">String</span></span>
<span id="cb228-7"><a href="#cb228-7" aria-hidden="true"></a>} <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb228-8"><a href="#cb228-8" aria-hidden="true"></a></span>
<span id="cb228-9"><a href="#cb228-9" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Entity</span> <span class="dt">User</span> <span class="kw">where</span></span>
<span id="cb228-10"><a href="#cb228-10" aria-hidden="true"></a>    getId <span class="ot">=</span> userId</span>
<span id="cb228-11"><a href="#cb228-11" aria-hidden="true"></a></span>
<span id="cb228-12"><a href="#cb228-12" aria-hidden="true"></a>reflectionDemo <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb228-13"><a href="#cb228-13" aria-hidden="true"></a>    <span class="kw">let</span> user <span class="ot">=</span> <span class="dt">User</span> <span class="st">&quot;1&quot;</span> <span class="st">&quot;Heinz Meier&quot;</span> <span class="st">&quot;hm@meier.com&quot;</span></span>
<span id="cb228-14"><a href="#cb228-14" aria-hidden="true"></a>    persist user</span>
<span id="cb228-15"><a href="#cb228-15" aria-hidden="true"></a>    user&#39; <span class="ot">&lt;-</span> retrieve <span class="st">&quot;1&quot;</span><span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">User</span></span>
<span id="cb228-16"><a href="#cb228-16" aria-hidden="true"></a>    <span class="fu">print</span> user&#39;</span></code></pre></div>
<p>So all a user has to do in order to use our library is:</p>
<ol type="1">
<li>let the data type derive the <code>Show</code> and <code>Read</code> type classes, which provides a poor mans serialization.</li>
<li>let the data type derive from <code>Entity</code> by providing an implementation for <code>getId</code>.</li>
<li>use <code>persist</code> and <code>retrieve</code> to write and read entities to/from file.</li>
</ol>
<p>As we can see from the function signatures for <code>persist</code> and <code>retrieve</code> both functions have no information about the concrete type they are being used on:</p>
<div class="sourceCode" id="cb229"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb229-1"><a href="#cb229-1" aria-hidden="true"></a><span class="ot">persist  ::</span> <span class="dt">Entity</span> a <span class="ot">=&gt;</span> a  <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb229-2"><a href="#cb229-2" aria-hidden="true"></a><span class="ot">retrieve ::</span> <span class="dt">Entity</span> a <span class="ot">=&gt;</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span></code></pre></div>
<p>As a consequence the generic implementation of both function in the Entity type class also have no direct access to the concrete type of the processed entities. (They simply delegate to other generic functions like <code>read</code> and <code>show</code>.)</p>
<p>So how can we access the concrete type of a processed entity? Imagine we’d like to store our entities into files that bear the type name as part of the file name, e.g. <code>User.7411.txt</code></p>
<p>The answer is of course: reflection. Here is what we have to add to our library to extend <code>persist</code> according to our new requirements:</p>
<div class="sourceCode" id="cb230"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb230-1"><a href="#cb230-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ScopedTypeVariables   #-}</span></span>
<span id="cb230-2"><a href="#cb230-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Data.Typeable</span></span>
<span id="cb230-3"><a href="#cb230-3" aria-hidden="true"></a></span>
<span id="cb230-4"><a href="#cb230-4" aria-hidden="true"></a><span class="kw">class</span> (<span class="dt">Show</span> a, <span class="dt">Read</span> a, <span class="dt">Typeable</span> a) <span class="ot">=&gt;</span> <span class="dt">Entity</span> a <span class="kw">where</span></span>
<span id="cb230-5"><a href="#cb230-5" aria-hidden="true"></a></span>
<span id="cb230-6"><a href="#cb230-6" aria-hidden="true"></a>    <span class="co">-- | persist an entity of type a and identified by an Id to a file</span></span>
<span id="cb230-7"><a href="#cb230-7" aria-hidden="true"></a><span class="ot">    persist ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb230-8"><a href="#cb230-8" aria-hidden="true"></a>    persist entity <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb230-9"><a href="#cb230-9" aria-hidden="true"></a>        <span class="co">-- compute file path based on entity type and id</span></span>
<span id="cb230-10"><a href="#cb230-10" aria-hidden="true"></a>        <span class="kw">let</span> fileName <span class="ot">=</span> getPath (typeOf entity) (getId entity)</span>
<span id="cb230-11"><a href="#cb230-11" aria-hidden="true"></a>        <span class="co">-- serialize entity as JSON and write to file</span></span>
<span id="cb230-12"><a href="#cb230-12" aria-hidden="true"></a>        <span class="fu">writeFile</span> fileName (<span class="fu">show</span> entity)</span>
<span id="cb230-13"><a href="#cb230-13" aria-hidden="true"></a></span>
<span id="cb230-14"><a href="#cb230-14" aria-hidden="true"></a><span class="co">-- | compute path of data file, this time with the type name as part of the file name</span></span>
<span id="cb230-15"><a href="#cb230-15" aria-hidden="true"></a><span class="ot">getPath ::</span> <span class="dt">TypeRep</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span></span>
<span id="cb230-16"><a href="#cb230-16" aria-hidden="true"></a>getPath tr <span class="fu">id</span> <span class="ot">=</span> <span class="st">&quot;.stack-work/&quot;</span> <span class="op">++</span> <span class="fu">show</span> tr <span class="op">++</span> <span class="st">&quot;.&quot;</span> <span class="op">++</span> <span class="fu">id</span> <span class="op">++</span> <span class="st">&quot;.txt&quot;</span></span></code></pre></div>
<p>We have to add a new constrained <code>Typeable a</code> to our definition of <code>Entity</code>. This allows to use reflective code on our entity types. In our case we simply compute a type representation <code>TypeRep</code> by calling <code>typeOf entity</code> which we then use in <code>getPath</code> to add the type name to the file path.</p>
<p>The definition of <code>retrieve</code> is a bit more tricky as we don’t yet have an entity available yet when computing the file path. So we have to apply a small trick to compute the correct type representation:</p>
<div class="sourceCode" id="cb231"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb231-1"><a href="#cb231-1" aria-hidden="true"></a><span class="ot">    retrieve ::</span> <span class="dt">Id</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb231-2"><a href="#cb231-2" aria-hidden="true"></a>    retrieve <span class="fu">id</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb231-3"><a href="#cb231-3" aria-hidden="true"></a>        <span class="co">-- compute file path based on entity type and id</span></span>
<span id="cb231-4"><a href="#cb231-4" aria-hidden="true"></a>        <span class="kw">let</span> fileName <span class="ot">=</span> getPath (typeOf (<span class="fu">undefined</span><span class="ot"> ::</span> a)) <span class="fu">id</span></span>
<span id="cb231-5"><a href="#cb231-5" aria-hidden="true"></a>        <span class="co">-- read file content into string</span></span>
<span id="cb231-6"><a href="#cb231-6" aria-hidden="true"></a>        contentString <span class="ot">&lt;-</span> <span class="fu">readFile</span> fileName</span>
<span id="cb231-7"><a href="#cb231-7" aria-hidden="true"></a>        <span class="co">-- parse entity from string</span></span>
<span id="cb231-8"><a href="#cb231-8" aria-hidden="true"></a>        <span class="fu">return</span> (<span class="fu">read</span> contentString)</span></code></pre></div>
<p>The compiler will be able to deduce the correct type of <code>a</code> in the expression <code>(undefined :: a)</code> as the concrete return type of <code>retrieve</code> must be specified at the call site, as in example <code>user' &lt;- retrieve "1" :: IO User</code></p>
<p>Of course this was only a teaser of what is possible with generic reflective programming. The fearless reader is invited to study the <a href="https://github.com/bos/aeson">source code of the aeson library</a> for a deep dive.</p>
<p><a href="https://github.com/thma/LtuPatternFactory/blob/master/src/Reflection.hs">Sourcecode for this section</a></p>
<h2 id="conclusions">Conclusions</h2>
<h3 id="design-patterns-are-not-limited-to-object-oriented-programming">Design Patterns are not limited to object oriented programming</h3>
<blockquote>
<p>Christopher Alexander says, “Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice” [AIS+77, page x]. Even though Alexander was talking about patterns in buildings and towns, what he says is true about object-oriented design patterns. Our solutions are expressed in terms of objects and interfaces instead of walls and doors, but at the core of both kinds of patterns is a solution to a problem in a context. <a href="https://en.wikipedia.org/wiki/Design_Patterns">Quoted from “Design Patterns Elements of Reusable Object-Oriented Software”</a></p>
</blockquote>
<p>The GoF <em>Design Patterns Elements of Reusable Object-Oriented Software</em> was written to help software developers to think about software design problems in a different way: From just writing a minimum adhoc solution for the problem at hand to stepping back and to think about how to solve the problem in a way that improves longterm qualities like extensibilty, flexibility, maintenability, testability and comprehensibility of a software design.</p>
<p>The GoF and other researches in the pattern area did “pattern mining”: they examined code of experienced software developers and looked for recurring structures and solutions. The patterns they distilled by this process are thus <em>reusable abstractions</em> for structuring object-oriented software to achieve the above mentioned goals.</p>
<p>So while the original design patterns are formulated with object oriented languages in mind, they still adress universal problems in software engineering: decoupling of layers, configuration, dependency management, data composition, data traversal, handling state, variation of behaviour, etc.</p>
<p>So it comes with little surprise that we can map many of those patterns to commonly used structures in functional programming: The domain problems remain the same, yet the concrete solutions differ:</p>
<ul>
<li>Some patterns are absorbed by language features:
<ul>
<li>Template method and strategy pattern are no brainers in any functional language with functions as first class citizens and higher order functions.</li>
<li>Dependency Injection and Configuration is solved by partial application of curried functions.</li>
<li>Adapter layers are replaced by function composition</li>
<li>Visitor pattern and Interpreters are self-evident with algebraic data types.</li>
</ul></li>
<li>Other patterns are covered by libraries like the Haskell type classes:
<ul>
<li>Composite is reduced to a Monoid</li>
<li>Singleton, Pipeline, NullObject can be rooted in Functor, Applicative Functor and Monad</li>
<li>Visitor and Iterator are covered by Foldable and Traversable.</li>
</ul></li>
<li>Yet another category of patterns is covered by specific language features like Lazy Evaluation, Parallelism. These features may be specific to certain languages.
<ul>
<li>Laziness allows to work with non-terminating compuations and data structures of infinite size.</li>
<li>Parallelism allows to scale the execution of a program transparently across CPU cores.</li>
</ul></li>
</ul>
<h3 id="design-patterns-reflect-mathematical-structures">Design patterns reflect mathematical structures</h3>
<p>What really struck me in the course of writing this study was that so many of the Typeclassopedia type classes could be related to Design Patterns.</p>
<p>Most of these type classes stem from abstract algebra and category theory in particular. Take for instance the <code>Monoid</code> type class which is a 1:1 representation of the <a href="https://en.wikipedia.org/wiki/Monoid">monoid</a> of abstract algebra. Identifying the <a href="#composite--semigroup--monoid">composite pattern</a> as an application of a monoidal data structure was an eye opener for me:</p>
<p><em>Design patterns reflect abstract algebraic structures.</em></p>
<p>As another example take the <a href="#map-reduce">Map-Reduce</a> pattern: we demonstrated that the question whether a problem can be solved by a map-reduce approach boils down to the algebraic question whether the data structure used to hold the intermediary results of the <code>map</code> operation forms a <em>monoid</em> under the <code>reduce</code> operation.</p>
<p>Rooting design patterns in abstract algebra brings a higher level of confidence to software design as we can move from ‘hand waving’ – painting UML diagrams, writing prose, building prototypes, etc. – to mathematical reasoning.</p>
<p>Mark Seemann has written an instructive series of articles on the coincidence of design patterns with abstract algebra: <a href="http://blog.ploeh.dk/2017/10/04/from-design-patterns-to-category-theory/">From Design Patterns to Category Theory</a>.</p>
<p>Jeremy Gibbons has also written several excellent papers on this subject:</p>
<blockquote>
<p>Design patterns are reusable abstractions in object-oriented software. However, using current mainstream programming languages, these elements can only be expressed extra-linguistically: as prose,pictures, and prototypes. We believe that this is not inherent in the patterns themselves, but evidence of a lack of expressivity in the languages of today. We expect that, in the languages of the future, the code parts of design patterns will be expressible as reusable library components. Indeed, we claim that the languages of tomorrow will suffice; the future is not far away. All that is needed, in addition to commonly-available features, are higher-order and datatype-generic constructs; these features are already or nearly available now.<br />
Quoted from <a href="http://www.cs.ox.ac.uk/jeremy.gibbons/publications/hodgp.pdf">Design Patterns as Higher-Order Datatype-Generic Programs</a></p>
</blockquote>
<p>He also maintains a blog dedicated to <a href="https://patternsinfp.wordpress.com/welcome/">patterns in functional programming</a>.</p>
<p>I’d like to conclude this section with a quote from Martin Menestrets FP blog:</p>
<blockquote>
<p>[…] there is this curious thing called <a href="https://en.wikipedia.org/wiki/Curry%E2%80%93Howard_correspondence">Curry–Howard correspondence</a> which is a direct analogy between mathematical concepts and computational calculus […].</p>
<p>This correspondence means that a lot of useful stuff discovered and proven for decades in Math can then be transposed to programming, opening a way for a lot of extremely robust constructs for free.</p>
<p>In OOP, Design patterns are used a lot and could be defined as idiomatic ways to solve a given problems, in specific contexts but their existences won’t save you from having to apply and write them again and again each time you encounter the problems they solve.</p>
<p>Functional programming constructs, some directly coming from category theory (mathematics), solve directly what you would have tried to solve with design patterns.</p>
<p>Quoted from <a href="http://geekocephale.com/blog/2018/10/08/fp">Geekocephale</a></p>
</blockquote>
<h2 id="some-interesting-links">some interesting links</h2>
<p><a href="https://www.ibm.com/developerworks/library/j-ft10/index.html">IBM Developerworks</a></p>
<p><a href="http://blog.ezyang.com/2010/05/design-patterns-in-haskel/">Design patterns in Haskell</a></p>
<p><a href="https://staticallytyped.wordpress.com/2013/03/09/gang-of-four-patterns-with-type-classes-and-implicits-in-scala/">GOF patterns in Scala</a></p>
<p><a href="http://norvig.com/design-patterns/design-patterns.pdf">Patterns in dynamic functional languages</a></p>
<p><a href="https://github.com/tel/scala-typeclassopedia">Scala Typeclassopedia</a></p>
<p><a href="https://github.com/mmenestret/fp-resources/blob/master/README.md">FP resources</a></p>
]]></summary>
</entry>

</feed>
