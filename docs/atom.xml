<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>LambdaBlog: lambda is not a four letter word</title>
    <link href="https://thma.github.io//atom.xml" rel="self" />
    <link href="https://thma.github.io/" />
    <id>https://thma.github.io//atom.xml</id>
    <author>
        <name>Thomas Mahler</name>
        <email>Thomas.Mahler@ista.com</email>
    </author>
    <updated>2021-12-27T00:00:00Z</updated>
    <entry>
    <title>Implementing a Functional Language with Graph Reduction</title>
    <link href="https://thma.github.io//posts/2021-12-27-Implementing-a-functional-language-with-Graph-Reduction.html" />
    <id>https://thma.github.io//posts/2021-12-27-Implementing-a-functional-language-with-Graph-Reduction.html</id>
    <published>2021-12-27T00:00:00Z</published>
    <updated>2021-12-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on December 27, 2021
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p><a href="https://github.com/thma/lambda-ski/actions"><img src="https://github.com/thma/lambda-ski/workflows/Haskell%20CI/badge.svg" alt="Actions Status" /></a> <a href="https://github.com/thma/lambda-ski"><img src="/img/forkme.png" height="20" ></a></p>
<h2 id="abstract">Abstract</h2>
<p>Implementing a small functional language with a classic combinator based graph-reduction machine in Haskell.</p>
<p>The implementation is structured into three parts:</p>
<ol type="1">
<li><p>A λ-calculus parser from <a href="https://crypto.stanford.edu/~blynn/lambda/sk.html">A Combinatory Compiler</a> which was extended to cover a tiny functional language based on the untyped λ-calculus.</p></li>
<li><p>A compiler from λ-calculus to combinatory logic combinators (S,K,I,B,C and Y) which is based on bracket-abstraction and some optimization rules.</p></li>
<li><p>A graph-reducer. Combinator terms are allocated into a graph data-structure. Which is then reduced by applying combinator graph-reduction. The destructive inplace reduction of the graph is made possible by using <code>STRef</code> mutable references.</p></li>
</ol>
<h2 id="introduction">Introduction</h2>
<p>In my <a href="https://thma.github.io/posts/2021-04-04-Lambda-Calculus-Combinatory-Logic-and-Cartesian-Closed-Categories.html">last blog post</a> I presented two ways of transforming λ-terms into variable free representations: - bracket abstraction to combinatory logic terms (SKI) and - bracket abstraction to terms of closed cartesian categories (CCC).</p>
<p>I demonstrated that both representations are equivalent as they imply the same reduction rules.</p>
<p>My original intention was to extend an existing Haskell CCC implementation to a proof-of-concept implementation of a small functional language. I even promised to cover this in my next blog post.</p>
<p>I invested a lot of time in this idea but I failed to get it off the ground. <a href="https://github.com/thma/lambda-cat">At least the code of these experiments has been preserved</a>.</p>
<p>So I came back to writing a SKI graph-reduction as the backend of my language implementation. This is a well-worn path. I took the basic ideas from the classic <a href="https://www.goodreads.com/book/show/3468677-compiling-functional-languages">compiling functional languages</a> which dates back to 1988.</p>
<p>Fortunately, I did not fail this time! In the following I’m explaining my implementation approach. I’ll also share some of my insights and talk about possible future extensions.</p>
<h2 id="representing-λ-expressions">representing λ-expressions</h2>
<p>I’m aiming at a very rudimentary language that is basically just pure λ-calculus plus integers. Here is an example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="dt">Y</span>    <span class="ot">=</span> λf <span class="op">.</span> (λx <span class="op">.</span> x x)(λx <span class="op">.</span> f(x x))</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>fact <span class="ot">=</span> <span class="dt">Y</span>(\f n <span class="ot">-&gt;</span> <span class="kw">if</span> (is0 n) <span class="dv">1</span> (<span class="op">*</span> n (f (sub1 n))))</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>main <span class="ot">=</span> fact <span class="dv">10</span></span></code></pre></div>
<p>As you can see it’s possible to use classical λ-calculus notation <code>λx . x x</code> as well as Haskell syntax: <code>\x -&gt; x x</code>. It’s also possible to freely mix both styles.</p>
<p>λ-expressions can be assigned to names in a top-level environment by using the <code>=</code> sign. those names may be referred to in other λ-expressions. As of now recursive (also mutually recursive) references are not supported.</p>
<p>The <code>main</code> expression has a special meaning; it is interpreted as the entry point to a program.</p>
<p>With this knowledge at hand you will immediately recognize that the above program will compute the factorial of 10. Where <code>fact</code> is defined in a non-recursive way by means of the fixed-point combinator <code>Y</code>.</p>
<p>Expressions of this language are represented by the data type <code>Expr</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">5</span> <span class="op">:@</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Expr</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>  <span class="ot">=</span> <span class="dt">Expr</span> <span class="op">:@</span> <span class="dt">Expr</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Var</span> <span class="dt">String</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Int</span> <span class="dt">Integer</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Lam</span> <span class="dt">String</span> <span class="dt">Expr</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span></code></pre></div>
<p>The top-level environment which maps names to λ-Expressions is represented by the following type:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Environment</span> <span class="ot">=</span> [(<span class="dt">String</span>, <span class="dt">Expr</span>)]</span></code></pre></div>
<h2 id="the-parser">The Parser</h2>
<p>There is not much to see in <a href="https://github.com/thma/lambda-ski/blob/main/src/Parser.hs">this area</a>. It’s just a simple Parsec based parser. Most of the code was taken from <a href="https://crypto.stanford.edu/~blynn/lambda/sk.html">A Combinatory Compiler</a>. I just added the parsing of Integers.</p>
<p>The parser module exports to function <code>parseEnvironmentEither</code> and <code>parseEnvironment</code>. The former is a total function returning an Either: <code>parseEnvironmentEither :: String -&gt; Either ParseError Environment</code>, whereas the latter simply returns an <code>Environment</code> but may throw run-time errors.</p>
<p>The following <a href="https://github.com/thma/lambda-ski/blob/main/app/Main.hs">snippet</a> demonstrates how a program is parsed into an Environment:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">testSource ::</span> <span class="dt">String</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>testSource <span class="ot">=</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>       <span class="st">&quot;Y    = λf -&gt; (λx -&gt; x x)(λx -&gt; f(x x)) \n&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>    <span class="op">++</span> <span class="st">&quot;fact = Y(λf n -&gt; if (is0 n) 1 (* n (f (sub1 n)))) \n&quot;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    <span class="op">++</span> <span class="st">&quot;main = fact 10 \n&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>  <span class="kw">let</span> env <span class="ot">=</span> parseEnvironment testSource</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>  <span class="fu">mapM_</span> <span class="fu">print</span> env</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>This code results in the following output, which shows all <code>(String, Expr)</code> tuples in the environment:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>(<span class="st">&quot;Y&quot;</span>,   <span class="dt">Lam</span> <span class="st">&quot;f&quot;</span> (<span class="dt">Lam</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Var</span> <span class="st">&quot;x&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;x&quot;</span>) <span class="op">:@</span> <span class="dt">Lam</span> <span class="st">&quot;x&quot;</span> (<span class="dt">Var</span> <span class="st">&quot;f&quot;</span> <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;x&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;x&quot;</span>))))</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>(<span class="st">&quot;fact&quot;</span>,<span class="dt">Var</span> <span class="st">&quot;Y&quot;</span> <span class="op">:@</span> <span class="dt">Lam</span> <span class="st">&quot;f&quot;</span> (<span class="dt">Lam</span> <span class="st">&quot;n&quot;</span> (((<span class="dt">Var</span> <span class="st">&quot;if&quot;</span> <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;is0&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;n&quot;</span>)) <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">1</span>) <span class="op">:@</span> </span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>        ((<span class="dt">Var</span> <span class="st">&quot;*&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;n&quot;</span>) <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;f&quot;</span> <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;sub1&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;n&quot;</span>))))))</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>(<span class="st">&quot;main&quot;</span>,<span class="dt">Var</span> <span class="st">&quot;fact&quot;</span> <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">10</span>)</span></code></pre></div>
<h2 id="bracket-abstraction">Bracket abstraction</h2>
<h3 id="motivation">Motivation</h3>
<p>Of course it is possible to write interpreters that evaluate these λ-expression to normalform. This is what any Lisp or Scheme eval/apply interpreter does at its core <a href="http://www.sicpdistilled.com/section/4.1/">(See a tiny example here)</a>.</p>
<p>One of the most problematic areas of these interpreters is the handling of variables. In order to provide static binding you will need closures that captures the current environment of variable bindings and thread them through the whole interpreter execution.</p>
<p>Language implemetors have thus experimented with many ways to tackle this issue. One of the most influential ideas was to completely get rid of variables by abstracting them.</p>
<p>The earliest version of this approach was <a href="https://en.wikipedia.org/wiki/SKI_combinator_calculus">the SKI combinator calculus</a> invented by Haskell Curry and Moses Schönfinkel.</p>
<p>A λ-term that does not contain any free variables is said to be closed. Closed lambda terms are also called <em>combinators</em>.</p>
<p>Schönfinkel and Curry found out that any closed λ-term can be rewritten in terms of three basic combinators I, K and S (in fact only <em>K</em> and <em>S</em> are essential, as <em>I</em> can be expressed as SKK):</p>
<p><img style="align:center;" src="https://latex.codecogs.com/gif.latex?\begin{array}{rcl}&space;I&space;&&space;=&space;&&space;\lambda&space;x.x&space;\\&space;K&space;&&space;=&space;&&space;\lambda&space;x.&space;\lambda&space;y.x&space;\\&space;S&space;&&space;=&space;&&space;\lambda&space;f.(\lambda&space;g.(\lambda&space;x.fx(gx)))&space;\end{array}" title="\begin{array}{rcl} I & = & \lambda x.x \\ K & = & \lambda x. \lambda y.x \\ S & = & \lambda f.(\lambda g.(\lambda x.fx(gx))) \end{array}" /></p>
<p>In Haskell these combinators can simply be defined as:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>i x <span class="ot">=</span> x</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>k x y <span class="ot">=</span> x</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>s f g x <span class="ot">=</span> f x (g x)</span></code></pre></div>
<h2 id="the-basic-abstraction-rules">The basic abstraction rules</h2>
<p>The idea of bracket abstraction is to rewrite any closed λ-term in terms of I, K and S. This recursive transformation is defined by the following equations:</p>
<p><img src="https://latex.codecogs.com/gif.latex?\begin{array}{rcl}&space;\left&space;\lceil&space;\lambda&space;x.x&space;\right&space;\rceil&space;&&space;=&space;&&space;I&space;\\&space;\left&space;\lceil&space;\lambda&space;x.y&space;\right&space;\rceil&space;&&space;=&space;&&space;K&space;y&space;\\&space;\left&space;\lceil&space;\lambda&space;x.M&space;N&space;\right&space;\rceil&space;&&space;=&space;&&space;S&space;\left&space;\lceil&space;\lambda&space;x.M&space;\right&space;\rceil&space;\left&space;\lceil&space;\lambda&space;x.N&space;\right&space;\rceil&space;\end{array}" title="\begin{array}{rcl} \left \lceil \lambda x.x \right \rceil & = & I \\ \left \lceil \lambda x.y \right \rceil & = & K y \\ \left \lceil \lambda x.M N \right \rceil & = & S \left \lceil \lambda x.M \right \rceil \left \lceil \lambda x.N \right \rceil \end{array}" /></p>
<p>This can be implemented in Haskell as follows:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="co">-- | most basic bracket abstraction (plus resolution of free variables in the environment).</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="ot">babs0 ::</span> <span class="dt">Environment</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>babs0 env (<span class="dt">Lam</span> x e) <span class="co">-- this clause implements the three basic equations for bracket abstraction</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Var</span> y <span class="ot">&lt;-</span> t, x <span class="op">==</span> y     <span class="ot">=</span> <span class="dt">Var</span> <span class="st">&quot;i&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>  <span class="op">|</span> x <span class="ot">`notElem`</span> fv [] t    <span class="ot">=</span> <span class="dt">Var</span> <span class="st">&quot;k&quot;</span> <span class="op">:@</span> t</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a>  <span class="op">|</span> m <span class="op">:@</span> n <span class="ot">&lt;-</span> t            <span class="ot">=</span> <span class="dt">Var</span> <span class="st">&quot;s&quot;</span> <span class="op">:@</span> babs0 env (<span class="dt">Lam</span> x m) <span class="op">:@</span> babs0 env (<span class="dt">Lam</span> x n)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a>  <span class="kw">where</span> t <span class="ot">=</span> babs0 env e</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>babs0 env (<span class="dt">Var</span> s) <span class="co">-- this clause resolves free variables by looking them up in the environment env</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Just</span> t <span class="ot">&lt;-</span> <span class="fu">lookup</span> s env <span class="ot">=</span> babs0 env t</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">otherwise</span>              <span class="ot">=</span> <span class="dt">Var</span> s</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>babs0 env  (m <span class="op">:@</span> n)        <span class="ot">=</span> babs0 env m <span class="op">:@</span> babs0 env n  <span class="co">-- this clause recurses into applications</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a>babs0 _env x               <span class="ot">=</span> x                           <span class="co">-- returns anything else unchanged</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a><span class="co">-- | compute the list of free variables of a lambda expression</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a><span class="ot">fv ::</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>fv vs (<span class="dt">Var</span> s) <span class="op">|</span> s <span class="ot">`elem`</span> vs <span class="ot">=</span> []</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>              <span class="op">|</span> <span class="fu">otherwise</span>   <span class="ot">=</span> [s]</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true"></a>fv vs (x <span class="op">:@</span> y)              <span class="ot">=</span> fv vs x <span class="ot">`union`</span> fv vs y</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true"></a>fv vs (<span class="dt">Lam</span> s f)             <span class="ot">=</span> fv (s<span class="op">:</span>vs) f</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true"></a>fv vs _                     <span class="ot">=</span> vs</span></code></pre></div>
<p>Let’s have a look at a simple example. first we parse a simple expression into a lambda-term:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> env <span class="ot">=</span> parseEnvironment <span class="st">&quot;main = (λx -&gt; + 4 x) 5\n&quot;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> env</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>[(<span class="st">&quot;main&quot;</span>,<span class="dt">Lam</span> <span class="st">&quot;x&quot;</span> ((<span class="dt">Var</span> <span class="st">&quot;+&quot;</span> <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">4</span>) <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;x&quot;</span>) <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">5</span>)]</span></code></pre></div>
<p>Next we apply bracket abstraction:</p>
<pre><code>ghci&gt; skiExpr = babs env (snd . head $ env)
ghci&gt; skiExpr
((Var &quot;s&quot; :@ (Var &quot;k&quot; :@ (Var &quot;+&quot; :@ Int 4))) :@ Var &quot;i&quot;) :@ Int 5</code></pre>
<p>The result of bracket abstraction is still a lambda-term, but one where all <code>Lam</code>-expression have been eliminated.</p>
<h3 id="optimization">Optimization</h3>
<p>Even from this simple example it is obvious that the SKI-combinator terms become larger than the original expressions. This will be an impediment to efficient implementation. So many different approaches have been conceived to mitigate this issue.</p>
<p>The earliest solution, already suggested by Schönfinkel, is to introduce additional combinators B and C that cover specific patterns in the source code. Here are the reduction rules for B and C.</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="dt">C</span> f g x <span class="ot">=</span> ((f x) g)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a><span class="dt">B</span> f g x <span class="ot">=</span> (f (g x))</span></code></pre></div>
<p>We could extend <code>babs</code> to cover B and C. But the most common way is to run a second optimization pass over the SKI-expression.</p>
<p>Here is is a simple example of such an optimization:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="ot">opt ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>opt (<span class="dt">Var</span> <span class="st">&quot;i&quot;</span> <span class="op">:@</span> n<span class="op">@</span>(<span class="dt">Int</span> _n))                           <span class="ot">=</span> n</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>opt ((<span class="dt">Var</span> <span class="st">&quot;s&quot;</span> <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;k&quot;</span> <span class="op">:@</span> e1)) <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;k&quot;</span> <span class="op">:@</span> e2)) <span class="ot">=</span> <span class="dt">Var</span> <span class="st">&quot;k&quot;</span> <span class="op">:@</span> (e1 <span class="op">:@</span> e2)</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>opt ((<span class="dt">Var</span> <span class="st">&quot;s&quot;</span> <span class="op">:@</span> e1) <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;k&quot;</span> <span class="op">:@</span> e2))              <span class="ot">=</span> (<span class="dt">Var</span> <span class="st">&quot;c&quot;</span> <span class="op">:@</span> e1) <span class="op">:@</span> e2</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>opt ((<span class="dt">Var</span> <span class="st">&quot;s&quot;</span> <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;k&quot;</span> <span class="op">:@</span> e1)) <span class="op">:@</span> e2)              <span class="ot">=</span> (<span class="dt">Var</span> <span class="st">&quot;b&quot;</span> <span class="op">:@</span> e1) <span class="op">:@</span> e2</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a>opt (x <span class="op">:@</span> y)                                          <span class="ot">=</span> opt x <span class="op">:@</span> opt y</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a>opt x                                                 <span class="ot">=</span> x</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a><span class="ot">ropt ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true"></a>ropt expr <span class="ot">=</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true"></a>  <span class="kw">let</span> expr&#39; <span class="ot">=</span> opt expr</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true"></a>  <span class="kw">in</span>  <span class="kw">if</span> expr&#39; <span class="op">==</span> expr</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true"></a>        <span class="kw">then</span> expr</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true"></a>        <span class="kw">else</span> <span class="kw">case</span> expr&#39; <span class="kw">of</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true"></a>          (x <span class="op">:@</span> y) <span class="ot">-&gt;</span> ropt <span class="op">$</span> ropt x <span class="op">:@</span> ropt y</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true"></a>          _        <span class="ot">-&gt;</span> ropt expr&#39;</span></code></pre></div>
<p>Let’s try this out:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> optExpr <span class="ot">=</span> ropt skiExpr</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> optEpr</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>((<span class="dt">Var</span> <span class="st">&quot;b&quot;</span> <span class="op">:@</span> (<span class="dt">Var</span> <span class="st">&quot;+&quot;</span> <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">4</span>)) <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;i&quot;</span>) <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">5</span></span></code></pre></div>
<p>This looks much better than before. See <a href="https://crypto.stanford.edu/~blynn/lambda/logski.html">this project for a more in depth coverage of optimization techniques</a>. I’m also planning to write a separate blog post on this subtopic.</p>
<p>The <a href="https://github.com/thma/lambda-ski/blob/main/src/LambdaToSKI.hs">sourcecode for this section can be found here</a></p>
<h2 id="graph-reduction-in-a-nutshell">Graph-reduction in a nutshell</h2>
<p>So now that we have eliminated lambda abstractions from our lambda terms it should be straight forward to evaluate these expressions with a simple interpreter.</p>
<p>Let’s have a look at a simple example:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>sqr  <span class="ot">=</span> λx <span class="ot">-&gt;</span> <span class="op">*</span> x x</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>main <span class="ot">=</span> sqr (<span class="op">+</span> <span class="dv">3</span> <span class="dv">2</span>)</span></code></pre></div>
<p>When we implement a strict interpreter with applicative-order semantics, <code>(+ 3 2)</code> will be computed first and the result bound to the variable <code>x</code> in the local environment and then the body of <code>sqr</code> will be evaluated in this environment. That’s fine. but it’s not normal-order reduction.</p>
<p>When implementing a lazy interpreter with normal-order semantics, we can not compute <code>(+ 3 2)</code> before binding it to <code>x</code>. Thus we will have to bind an un-evaluated <em>thunk</em> to <code>x</code>. We will also have to make sure that <code>x</code> is only evaluated when needed and only once, even when it is used at several places in the body of <code>sqr</code>. (See <a href="https://academic.udayton.edu/saverioperugini/courses/cps343/lecture_notes/lazyevaluation.html">these lecture notes for all the intricacies of this approach</a>)</p>
<p>Graph-reduction on the other hand, has some very interesting features: - It maintains normal-order reduction (that is lazy evaluation) - double evaluations of terms is avoided - dealing with local environments, variable scope, etc. at run-time is avoided - copying of argument data is significantly reduced as compared to eval/apply interpreters</p>
<p>Let’s see this in action with our toy example. The above program can be transformed into the following SKI combinator term:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a>((<span class="dt">Var</span> <span class="st">&quot;s&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;*&quot;</span>) <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;i&quot;</span>) <span class="op">:@</span> ((<span class="dt">Var</span> <span class="st">&quot;+&quot;</span> <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">3</span>) <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">2</span>)</span></code></pre></div>
<p>This term can be represented as a binary graph, where each application <code>:@</code> is represented as an <code>@</code> node, all combinators like <code>(Var "s")</code> are represented with Constructors like <code>S</code>, <code>I</code>, <code>MUL</code>, <code>ADD</code> and integer values like <code>Int 2</code> are just shown as numeric values like <code>2</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>          <span class="op">@</span>                   </span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>         <span class="op">/</span> \              </span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>        <span class="op">/</span>   \               </span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>       <span class="op">/</span>     <span class="op">@</span>          </span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>      <span class="op">/</span>     <span class="op">/</span> \          </span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true"></a>     <span class="op">/</span>     <span class="op">@</span>   <span class="dv">2</span>         </span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true"></a>    <span class="op">@</span>     <span class="op">/</span> \     </span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true"></a>   <span class="op">/</span> \  <span class="dt">ADD</span>  <span class="dv">3</span>    </span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true"></a>  <span class="op">@</span>   <span class="dt">I</span>            </span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true"></a> <span class="op">/</span> \             </span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true"></a><span class="dt">S</span>  <span class="dt">MUL</span>   </span></code></pre></div>
<p>In the following diagram we follow the reduction of this graph:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>          <span class="op">@</span>                   <span class="op">@</span>                   <span class="op">@</span>                  <span class="op">@</span>           <span class="dv">25</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>         <span class="op">/</span> \                 <span class="op">/</span> \                 <span class="op">/</span> \                <span class="op">/</span> \</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>        <span class="op">/</span>   \               <span class="op">/</span>   \               <span class="op">/</span>   \              <span class="op">/</span>   <span class="op">|</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>       <span class="op">/</span>     <span class="op">@</span>             <span class="op">/</span>     <span class="op">@</span>             <span class="op">/</span>     <span class="op">@</span>            <span class="op">/</span>   <span class="op">/</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>      <span class="op">/</span>     <span class="op">/</span> \           <span class="op">@</span>     <span class="op">/</span> \           <span class="op">@</span>     <span class="op">/</span> \          <span class="op">@</span>   <span class="op">/</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>     <span class="op">/</span>     <span class="op">@</span>   <span class="dv">2</span>         <span class="op">/</span> \   <span class="dt">I</span>   <span class="op">|</span>         <span class="op">/</span> \   <span class="dt">I</span>   <span class="op">|</span>        <span class="op">/</span> \ <span class="op">/</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a>    <span class="op">@</span>     <span class="op">/</span> \           <span class="op">/</span>   <span class="op">@</span> ––––<span class="op">/</span>         <span class="op">/</span>   <span class="dv">5</span> ––––<span class="op">/</span>        <span class="op">/</span>   <span class="dv">5</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>   <span class="op">/</span> \  <span class="dt">ADD</span>  <span class="dv">3</span>         <span class="op">/</span>   <span class="op">/</span> \             <span class="op">/</span>                  <span class="op">/</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>  <span class="op">@</span>   <span class="dt">I</span>               <span class="op">/</span>   <span class="op">@</span>   <span class="dv">2</span>           <span class="op">/</span>                  <span class="op">/</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a> <span class="op">/</span> \                 <span class="op">/</span>   <span class="op">/</span> \             <span class="op">/</span>                  <span class="op">/</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true"></a><span class="dt">S</span>  <span class="dt">MUL</span>             <span class="dt">MUL</span>  <span class="dt">ADD</span> <span class="dv">3</span>           <span class="dt">MUL</span>                <span class="dt">MUL</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true"></a></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true"></a><span class="dt">Step</span> <span class="dv">0</span>             <span class="dt">Step</span> <span class="dv">1</span>               <span class="dt">Step</span> <span class="dv">2</span>             <span class="dt">Step</span> <span class="dv">3</span>                <span class="dt">Step</span> <span class="dv">4</span></span></code></pre></div>
<ul>
<li><p><strong>Step 0</strong>: This is just the initial state of the graph as explained above. Please note that in this state the <code>S</code> is our <em>redex</em> (i.e. the left-most ancestor of the root node) and <em>saturated</em> (i.e all three arguments of the combinator) are populated, so according to the reduction rule <code>s f g x = f x (g x)</code> we expect to see a reduction <code>S MUL I (ADD 3 2) = MUL (ADD 3 2) (I (ADD 3 2))</code> in step 1.</p></li>
<li><p><strong>Step 1</strong>: As expected the first reduction step mutates the graph to represent <code>MUL (ADD 3 2) (I (ADD 3 2))</code>. Please note that both occurrences of <code>(ADD 3 2)</code> are represented by references to one and the same node.</p></li>
<li><p><strong>Step 2</strong>: Now <code>MUL</code> has become the <em>redex</em> (short for reducible expression). But this time both arguments <code>(ADD 3 2)</code> and <code>I (ADD 3 2)</code> are not in normal-form and thus have to be reduced first before <code>MUL</code> can be executed. So first <code>(ADD 3 2)</code> is reduced to <code>5</code>. Please note that both references to the former <code>(ADD 3 2)</code> node now point to <code>5</code>. So in effect the <code>I (ADD 3 2)</code> node has changed to <code>I 5</code> as <code>(ADD 3 2)</code> was a shared node.</p></li>
<li><p><strong>Step 3</strong>: next the <code>I 5</code> node is reduced according to the equation <code>i x = x</code>. That is, the reference to the application node <code>I @ 5</code> is modified to directly point to <code>5</code> instead. Please note that both arguments point to one and the same numeric value <code>5</code>.</p></li>
<li><p><strong>Step 4</strong>: As a result of the transformation in step 3 both arguments of <code>MUL</code> are in normal-form. So now <code>MUL 5 5</code> can be performed: Accordingly the root node is now changed to <code>25</code>.</p></li>
</ul>
<p>Now that we have a basic understanding of the ideas behind graph-reduction we will have a closer look at the actual implementation in the following sections.</p>
<h2 id="allocating-a-graph-with-mutable-references">Allocating a Graph with mutable references</h2>
<p>As we have seen in the last section we will have to deal with mutable references in order to implement things like node sharing and in-place mutation of nodes.</p>
<p>I will use the Haskell datatype <a href="https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-STRef.html"><code>Data.STRef</code></a> which provides mutable references in the <code>ST</code> monad.</p>
<p>Here comes a basic example that demonstrates the basic functionality of <code>STRef</code>. A list of numbers is summed up by adding each of them to an accumulator. The accumulator is implemented by a reference <code>acc</code> pointing to an initial value of <code>0</code>. Then we iterate over the list of numbers and update the value of the accumulator by adding each number <code>x</code> to it. Finally the result is read out from the accumulator and extracted from the ST Monad by runST. From this example we can see that <code>STRef</code>s work much like pointers in imperative languages:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Data.STRef</span>       (<span class="dt">STRef</span>, modifySTRef, newSTRef, readSTRef writeSTRef)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="kw">import</span> <span class="dt">Control.Monad.ST</span> (runST)</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a><span class="co">-- | sum up a list of numerical values </span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a><span class="ot">sumST ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> [a] <span class="ot">-&gt;</span> a</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>sumST numbers <span class="ot">=</span> runST <span class="op">$</span> <span class="kw">do</span> <span class="co">-- runST takes stateful ST code and makes it pure.</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>  acc <span class="ot">&lt;-</span> newSTRef <span class="dv">0</span>        <span class="co">-- Create an STRef (a mutable variable) to an accumulator</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a>  forM_ numbers <span class="op">$</span> \x <span class="ot">-&gt;</span>    <span class="co">-- iterate over all numbers</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a>    modifySTRef acc (<span class="op">+</span> x)  <span class="co">-- add each number to what we have in acc.</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a>  readSTRef acc            <span class="co">-- read the value of acc, which will be returned by the runST above.</span></span></code></pre></div>
<p>This looks promising. So now lets implement a binary graph for our compiled combinator terms with it:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="kw">infixl</span> <span class="dv">5</span> <span class="op">:@:</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Graph</span> s</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a>  <span class="ot">=</span> (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s)) <span class="op">:@:</span> (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s))</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Comb</span> <span class="dt">Combinator</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>  <span class="op">|</span> <span class="dt">Num</span> <span class="dt">Integer</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Combinator</span> <span class="ot">=</span> <span class="dt">I</span> <span class="op">|</span> <span class="dt">K</span> <span class="op">|</span> <span class="dt">S</span> <span class="op">|</span> <span class="dt">B</span> <span class="op">|</span> <span class="dt">C</span> <span class="op">|</span> <span class="dt">Y</span> <span class="op">|</span> <span class="dt">P</span> <span class="op">|</span> <span class="dt">ADD</span> <span class="op">|</span> <span class="dt">SUB</span> <span class="op">|</span> <span class="dt">MUL</span> <span class="op">|</span> <span class="dt">DIV</span> <span class="op">|</span> <span class="dt">REM</span> <span class="op">|</span> <span class="dt">SUB1</span> <span class="op">|</span> <span class="dt">EQL</span> <span class="op">|</span> <span class="dt">ZEROP</span> <span class="op">|</span> <span class="dt">IF</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span></code></pre></div>
<p>So we basically mimic the <code>Expr</code> data type used to encode λ-expression but without variables and lambda-abstractions. The data type <code>Combinator</code> contains constructors for combinators that we intend to implement in the graph-reduction engine.</p>
<p>Next we define a function <code>allocate</code> that allows to allocate a ‘lambda-abstracted’ λ-expression (of type <code>Expr</code>) into a reference to a <code>Graph</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="co">-- | allocate a &#39;lambda-abstracted&#39; Expr into a referenced Graph</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a><span class="ot">allocate ::</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">ST</span> s (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s))</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>allocate (<span class="dt">Var</span> name) <span class="ot">=</span> newSTRef <span class="op">$</span> <span class="dt">Comb</span> <span class="op">$</span> fromString name</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>allocate (<span class="dt">Int</span> val)  <span class="ot">=</span> newSTRef <span class="op">$</span> <span class="dt">Num</span> val</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>allocate (l <span class="op">:@</span> r)   <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>  lg <span class="ot">&lt;-</span> allocate l</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>  rg <span class="ot">&lt;-</span> allocate r</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true"></a>  newSTRef <span class="op">$</span> lg <span class="op">:@:</span> rg</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true"></a>allocate (<span class="dt">Lam</span> _ _)  <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;lambdas must already be abstracted away!&quot;</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true"></a></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true"></a><span class="co">-- | lookup Combinator constructors by their names</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true"></a><span class="ot">fromString ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Combinator</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true"></a>fromString <span class="st">&quot;i&quot;</span>    <span class="ot">=</span> <span class="dt">I</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true"></a>fromString <span class="st">&quot;k&quot;</span>    <span class="ot">=</span> <span class="dt">K</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true"></a>fromString <span class="st">&quot;s&quot;</span>    <span class="ot">=</span> <span class="dt">S</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true"></a>fromString <span class="st">&quot;b&quot;</span>    <span class="ot">=</span> <span class="dt">B</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true"></a>fromString <span class="st">&quot;c&quot;</span>    <span class="ot">=</span> <span class="dt">C</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true"></a>fromString <span class="st">&quot;y&quot;</span>    <span class="ot">=</span> <span class="dt">Y</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true"></a>fromString <span class="st">&quot;p&quot;</span>    <span class="ot">=</span> <span class="dt">P</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true"></a>fromString <span class="st">&quot;+&quot;</span>    <span class="ot">=</span> <span class="dt">ADD</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true"></a>fromString <span class="st">&quot;sub&quot;</span>  <span class="ot">=</span> <span class="dt">SUB</span></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true"></a>fromString <span class="st">&quot;div&quot;</span>  <span class="ot">=</span> <span class="dt">DIV</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true"></a>fromString <span class="st">&quot;rem&quot;</span>  <span class="ot">=</span> <span class="dt">REM</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true"></a>fromString <span class="st">&quot;*&quot;</span>    <span class="ot">=</span> <span class="dt">MUL</span></span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true"></a>fromString <span class="st">&quot;sub1&quot;</span> <span class="ot">=</span> <span class="dt">SUB1</span></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true"></a>fromString <span class="st">&quot;eq&quot;</span>   <span class="ot">=</span> <span class="dt">EQL</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true"></a>fromString <span class="st">&quot;is0&quot;</span>  <span class="ot">=</span> <span class="dt">ZEROP</span></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true"></a>fromString <span class="st">&quot;if&quot;</span>   <span class="ot">=</span> <span class="dt">IF</span></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true"></a>fromString _c     <span class="ot">=</span> <span class="fu">error</span> <span class="op">$</span> <span class="st">&quot;unknown combinator &quot;</span> <span class="op">++</span> _c</span></code></pre></div>
<p>So let’s see this in action:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a>ghci<span class="op">&gt;</span> optExpr <span class="ot">=</span> ((<span class="dt">Var</span> <span class="st">&quot;s&quot;</span> <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;*&quot;</span>) <span class="op">:@</span> <span class="dt">Var</span> <span class="st">&quot;i&quot;</span>) <span class="op">:@</span> ((<span class="dt">Var</span> <span class="st">&quot;+&quot;</span> <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">3</span>) <span class="op">:@</span> <span class="dt">Int</span> <span class="dv">2</span>)</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>ghci<span class="op">&gt;</span> graph <span class="ot">=</span> allocate optExpr</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runST <span class="op">$</span> mToString graph </span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a><span class="st">&quot;(((S :@: MUL) :@: I) :@: ((ADD :@: 3) :@: 2))&quot;</span></span></code></pre></div>
<p>I’m using the <code>mToString</code> helper function to render <code>ST s (STRef s (Graph s))</code> instances:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="ot">mToString ::</span> <span class="dt">ST</span> s (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s)) <span class="ot">-&gt;</span> <span class="dt">ST</span> s <span class="dt">String</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>mToString g <span class="ot">=</span> toString <span class="op">=&lt;&lt;</span> g     </span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a><span class="ot">toString ::</span> <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span> <span class="dt">ST</span> s <span class="dt">String</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>toString graph <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a> g <span class="ot">&lt;-</span> readSTRef graph</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a> toString&#39; g <span class="kw">where</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true"></a>   toString&#39; (<span class="dt">Comb</span> c) <span class="ot">=</span> <span class="fu">return</span> <span class="op">$</span> <span class="fu">show</span> c</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true"></a>   toString&#39; (<span class="dt">Num</span> i) <span class="ot">=</span> <span class="fu">return</span> <span class="op">$</span> <span class="fu">show</span> i</span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true"></a>   toString&#39; (lP <span class="op">:@:</span> rP) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true"></a>     lG <span class="ot">&lt;-</span> readSTRef lP</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true"></a>     rG <span class="ot">&lt;-</span> readSTRef rP</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true"></a>     lStr <span class="ot">&lt;-</span> toString&#39; lG</span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true"></a>     rStr <span class="ot">&lt;-</span> toString&#39; rG</span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true"></a>     <span class="fu">return</span> <span class="op">$</span> <span class="st">&quot;(&quot;</span> <span class="op">++</span> lStr <span class="op">++</span> <span class="st">&quot; :@: &quot;</span> <span class="op">++</span> rStr <span class="op">++</span> <span class="st">&quot;)&quot;</span> </span></code></pre></div>
<p>Now that we have allocated our expression as an <code>ST s (STRef s (Graph s))</code> the next step will be to perform graph reduction on it.</p>
<h2 id="performing-graph-reduction">Performing graph-reduction</h2>
<p>First we have to compute the stack of left ancestors - or <em>spine</em> - of a graph for an efficient reduction.</p>
<p>In the following diagram I have marked the members of this stack with <code>-&gt;</code> arrows:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ot">-&gt;</span>           <span class="op">@</span>                   </span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>            <span class="op">/</span> \              </span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>           <span class="op">/</span>   \               </span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>          <span class="op">/</span>     <span class="op">@</span>          </span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>         <span class="op">/</span>     <span class="op">/</span> \          </span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>        <span class="op">/</span>     <span class="op">@</span>   <span class="dv">2</span>         </span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a><span class="ot">-&gt;</span>     <span class="op">@</span>     <span class="op">/</span> \     </span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a>      <span class="op">/</span> \  <span class="dt">ADD</span>  <span class="dv">3</span>    </span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a><span class="ot">-&gt;</span>   <span class="op">@</span>   <span class="dt">I</span>            </span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>    <span class="op">/</span> \             </span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a><span class="ot">-&gt;</span> <span class="dt">S</span>  <span class="dt">MUL</span>   </span></code></pre></div>
<p>The following function <code>spine</code> computes this left ancestors’ stack by traversing all application nodes to the left:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">-- we simply represent the stack as a list of references to graph nodes</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">LeftAncestorsStack</span> s <span class="ot">=</span> [<span class="dt">STRef</span> s (<span class="dt">Graph</span> s)]</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a><span class="ot">spine ::</span> <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span> <span class="dt">ST</span> s (<span class="dt">LeftAncestorsStack</span> s)</span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>spine graph <span class="ot">=</span> spine&#39; graph [] </span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a><span class="ot">    spine&#39; ::</span> <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span> <span class="dt">LeftAncestorsStack</span> s <span class="ot">-&gt;</span> <span class="dt">ST</span> s (<span class="dt">LeftAncestorsStack</span> s)</span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a>    spine&#39; graph stack <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a>      g <span class="ot">&lt;-</span> readSTRef graph</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a>      <span class="kw">case</span> g <span class="kw">of</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true"></a>        (l <span class="op">:@:</span> _r) <span class="ot">-&gt;</span> spine&#39; l (graph <span class="op">:</span> stack)</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true"></a>        _          <span class="ot">-&gt;</span> <span class="fu">return</span> (graph <span class="op">:</span> stack)</span></code></pre></div>
<p>Using this <code>spine</code> function we can implement a function <code>step</code> that performs a single reduction step on a <code>Graph</code> node:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="ot">step ::</span> <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span> <span class="dt">ST</span> s ()</span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a>step graph <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a>  (top<span class="op">:</span>stack) <span class="ot">&lt;-</span> spine graph</span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a>  node <span class="ot">&lt;-</span> readSTRef top</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a>  <span class="kw">case</span> node <span class="kw">of</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a>    (<span class="dt">Comb</span> k) <span class="ot">-&gt;</span> reduce k stack</span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>    _        <span class="ot">-&gt;</span> <span class="fu">return</span> ()</span></code></pre></div>
<p>If a combinator is found in redex position, <code>reduce</code> is called to perform the actual reduction work according to the combinator specific reduction rules.</p>
<p>Let’s study this for some of the combinators, starting with the most simple one, <code>I x = x</code>:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a>        <span class="op">|</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a>p  <span class="ot">-&gt;</span>   <span class="op">@</span>   </span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>       <span class="op">/</span> \</span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a>   <span class="ot">-&gt;</span> <span class="dt">I</span>   x</span></code></pre></div>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="ot">reduce ::</span> <span class="dt">Combinator</span> <span class="ot">-&gt;</span> <span class="dt">LeftAncestorsStack</span> s <span class="ot">-&gt;</span> <span class="dt">ST</span> s ()</span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a>reduce <span class="dt">I</span> (p <span class="op">:</span> _) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a>  (_I <span class="op">:@:</span> xP) <span class="ot">&lt;-</span> readSTRef p</span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a>  xVal <span class="ot">&lt;-</span> readSTRef xP</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>  writeSTRef p xVal</span></code></pre></div>
<p>In this case a reference <code>p</code> to <code>(I :@: xP )</code> is on top of the stack. The actual value of x is read from <code>xP</code> with <code>readSTRef</code> and than <code>p</code> is made to point to this value by using <code>writeSTRef</code>.</p>
<p>The reduction of <code>S f g x = f x (g x)</code> is already a bit more involved:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a>            <span class="op">|</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a>p3 <span class="ot">-&gt;</span>       <span class="op">@</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>           <span class="op">/</span> \</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a>p2 <span class="ot">-&gt;</span>     <span class="op">@</span>   x</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a>         <span class="op">/</span> \</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true"></a>p1 <span class="ot">-&gt;</span>   <span class="op">@</span>   g</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true"></a>       <span class="op">/</span> \</span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true"></a>   <span class="ot">-&gt;</span> <span class="dt">S</span>   f</span></code></pre></div>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a>reduce <span class="dt">S</span> (p1 <span class="op">:</span> p2 <span class="op">:</span> p3 <span class="op">:</span> _) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true"></a>  (_S <span class="op">:@:</span> fP) <span class="ot">&lt;-</span> readSTRef p1</span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true"></a>  (_  <span class="op">:@:</span> gP) <span class="ot">&lt;-</span> readSTRef p2</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true"></a>  (_  <span class="op">:@:</span> xP) <span class="ot">&lt;-</span> readSTRef p3</span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true"></a>  node1 <span class="ot">&lt;-</span> newSTRef <span class="op">$</span> fP <span class="op">:@:</span> xP</span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true"></a>  node2 <span class="ot">&lt;-</span> newSTRef <span class="op">$</span> gP <span class="op">:@:</span> xP</span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true"></a>  writeSTRef p3 (node1 <span class="op">:@:</span> node2)</span></code></pre></div>
<p>In this case reference to f (<code>fP</code>), g (<code>gP</code>) and x (<code>xP</code>) are obtained. Then a new application node is created that represents <code>((f @ x) @ (g @ x))</code>. Then <code>p3</code> is made to point to this new node.</p>
<p>Binary arithmentic combinators like <code>ADD</code> and <code>MUL</code> are implemented as follows:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a>reduce <span class="dt">ADD</span> (p1 <span class="op">:</span> p2 <span class="op">:</span> _) <span class="ot">=</span> binaryMathOp (<span class="op">+</span>) p1 p2</span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a>reduce <span class="dt">MUL</span> (p1 <span class="op">:</span> p2 <span class="op">:</span> _) <span class="ot">=</span> binaryMathOp (<span class="op">*</span>) p1 p2</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a></span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a><span class="ot">binaryMathOp ::</span></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a>  (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="co">-- ^ a binary arithmetic function on Integers like (+)</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a>  <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span>               <span class="co">-- ^ first node on the spine stack</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true"></a>  <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span>               <span class="co">-- ^ second node on spine stack</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true"></a>  <span class="dt">ST</span> s ()                            </span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true"></a>binaryMathOp op p1 p2 <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true"></a>  (_ <span class="op">:@:</span> xP) <span class="ot">&lt;-</span> readSTRef p1</span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true"></a>  (_ <span class="op">:@:</span> yP) <span class="ot">&lt;-</span> readSTRef p2</span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true"></a>  (<span class="dt">Num</span> xVal) <span class="ot">&lt;-</span> (readSTRef <span class="op">&lt;=&lt;</span> normalForm) xP  <span class="co">-- reduce xP to normal form and obtain its value as xVal</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true"></a>  (<span class="dt">Num</span> yVal) <span class="ot">&lt;-</span> (readSTRef <span class="op">&lt;=&lt;</span> normalForm) yP  <span class="co">-- reduce yP to normal form and obtain its value as yVal</span></span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true"></a>  writeSTRef p2 (<span class="dt">Num</span> <span class="op">$</span> xVal <span class="ot">`op`</span> yVal)         <span class="co">-- apply op on xVal and yVal, modify p2 to point to the resulting value</span></span></code></pre></div>
<p>The interesting bit here is that the arithmetic combinators are <em>strict</em>, that is they require their arguments to be in normalform. (Please note that <code>S</code>, <code>I</code>, <code>K</code>, etc. don’t have this requirement. They are <em>non-strict</em> or <em>lazy</em>).</p>
<p><code>normalForm</code> just applies <code>step</code> in a loop while the graph has not been reduced to a combinator or an integer:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true"></a><span class="ot">normalForm ::</span> <span class="dt">STRef</span> s (<span class="dt">Graph</span> s) <span class="ot">-&gt;</span> <span class="dt">ST</span> s (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s))</span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true"></a>normalForm graph <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true"></a>  step graph</span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true"></a>  g <span class="ot">&lt;-</span> readSTRef graph</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true"></a>  <span class="kw">case</span> g <span class="kw">of</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true"></a>    _lP <span class="op">:@:</span> _rP <span class="ot">-&gt;</span> normalForm graph</span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true"></a>    <span class="dt">Comb</span> _com   <span class="ot">-&gt;</span> <span class="fu">return</span> graph</span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true"></a>    <span class="dt">Num</span> _n      <span class="ot">-&gt;</span> <span class="fu">return</span> graph</span></code></pre></div>
<p>Using a helper function <code>reduceGraph</code> that computes the normal-form of a graph while staying entirely in the <code>ST</code>-Monad, we can finally reduce our tiny toy graph:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="ot">reduceGraph ::</span> <span class="dt">ST</span> s (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s)) <span class="ot">-&gt;</span> <span class="dt">ST</span> s (<span class="dt">STRef</span> s (<span class="dt">Graph</span> s))</span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a>reduceGraph graph <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true"></a>  gP <span class="ot">&lt;-</span> graph</span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true"></a>  normalForm gP</span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true"></a></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true"></a></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runST <span class="op">$</span> mToString graph</span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true"></a><span class="st">&quot;(((S :@: MUL) :@: I) :@: ((ADD :@: 3) :@: 2))&quot;</span></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true"></a>ghci<span class="op">&gt;</span> runST <span class="op">$</span> mToString <span class="op">$</span> reduceGraph graph</span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true"></a><span class="st">&quot;25&quot;</span></span></code></pre></div>
<h2 id="recursion">Recursion</h2>
<p>λ-calculus does not directly support recursion using self-referential functions <a href="https://sookocheff.com/post/fp/recursive-lambda-functions/">(see this nice exposition)</a>. That’s why we need a fixed-point combinator to realize recursive operation. Here once again the definition of the factorial function that makes use of the <code>Y</code>-Combinator to implement recursive behaviour:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true"></a><span class="dt">Y</span>    <span class="ot">=</span> λf <span class="op">.</span> (λx <span class="op">.</span> x x)(λx <span class="op">.</span> f(x x))</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true"></a>fact <span class="ot">=</span> <span class="dt">Y</span>(\f n <span class="ot">-&gt;</span> <span class="kw">if</span> (is0 n) <span class="dv">1</span> (<span class="op">*</span> n (f (sub1 n))))</span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true"></a>main <span class="ot">=</span> fact <span class="dv">10</span></span></code></pre></div>
<p>With only a few lines of equational reasoning we can demonstrate the special property of the <code>Y</code>-combinator when applied to any function <code>g</code>:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true"></a><span class="dt">Y</span> g <span class="ot">=</span> (λf<span class="op">.</span>(λx<span class="op">.</span>x x)(λx<span class="op">.</span>f(x x))) g  <span class="co">-- (1) by definition of Y</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true"></a>    <span class="ot">=</span> (λx<span class="op">.</span>g (x x))(λx<span class="op">.</span>g (x x))    <span class="co">-- (2) by function application of λf</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true"></a>    <span class="ot">=</span> g((λx<span class="op">.</span>g (x x))(λx<span class="op">.</span>g (x x))) <span class="co">-- (3) by function application of λx.g(x x) to λx.g(x x)</span></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true"></a>    <span class="ot">=</span> g(<span class="dt">Y</span> g)                      <span class="co">-- (4) by equation (2)</span></span></code></pre></div>
<p>Applying equation <code>(4)</code> repeatedly will lead to:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="dt">Y</span> g <span class="ot">=</span> g(g(<span class="dt">Y</span> g))                    <span class="co">-- (5) by equation (4)</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a>    <span class="ot">=</span> g(<span class="op">...</span>g(<span class="dt">Y</span> g) <span class="op">...</span>)             <span class="co">-- (6) by repeatedly applying (4)</span></span></code></pre></div>
<p>In this way the <code>Y</code>-combinator achieves recursion by reproducing a (self-reproducing) copy of the function’s self-application with each application of <code>(4)</code>.</p>
<p>This self-reproducing pattern becomes even more visible when looking at the graph-structure of the reduction of <code>(Y g)</code>:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true"></a>                                            __</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true"></a>  <span class="op">@</span>    <span class="op">==&gt;</span>    <span class="op">@</span>     <span class="op">==&gt;</span>   <span class="op">@</span>    <span class="op">==&gt;</span>  <span class="op">...</span>   <span class="op">@</span>   \</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true"></a> <span class="op">/</span> \         <span class="op">/</span> \         <span class="op">/</span> \             <span class="op">/</span> \__<span class="op">/</span></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true"></a><span class="dt">Y</span>   g       g   <span class="op">@</span>       g   <span class="op">@</span>           g</span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true"></a>               <span class="op">/</span> \         <span class="op">/</span> \</span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true"></a>              <span class="dt">Y</span>   g       g   <span class="op">@</span></span>
<span id="cb35-7"><a href="#cb35-7" aria-hidden="true"></a>                             <span class="op">/</span> \</span>
<span id="cb35-8"><a href="#cb35-8" aria-hidden="true"></a>                            <span class="dt">Y</span>   g</span></code></pre></div>
<p>One can see how at each application of <code>(4)</code> another copy of (Y g) is generated and incorporated into the graph as an argument of g.</p>
<p>The last step of the diagram shows that - in the graph - self-reproduction can be achieved by simply bending the argument pointer back to the application node.</p>
<p>This realization leads us to the following implementation of the Y-combinator:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a>reduce <span class="dt">Y</span> (p1 <span class="op">:</span> _) <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a>  (_YP <span class="op">:@:</span> gP) <span class="ot">&lt;-</span> readSTRef p1</span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true"></a>  writeSTRef p1 (gP <span class="op">:@:</span> p1)</span></code></pre></div>
<p>Using this implementation of the Y-combinator instead of the source level defined version <code>Y = λf.(λx.x x)(λx.f(x x))</code> reduces the execution time for <code>fact 10000</code> by a factor of about 250.</p>
<p>The <a href="https://github.com/thma/lambda-ski/blob/main/src/LambdaToSKI.hs">sourcecode for this section can be found here</a>.</p>
<h2 id="next-steps">Next steps</h2>
<p>Here are some ideas for possible future extensions and improvements.</p>
<ul>
<li>Extending this very basic setup to a fully working pogramming environment with a REPL</li>
<li>Implement direct and mutual recursion (i.e. <code>letrec</code>) for global function definitions</li>
<li>experimemnt with different bracket abstraction algorithms to improve object code size and execution time.</li>
<li>Implement bracket abstraction from λ-expressions to <a href="https://thma.github.io/posts/2021-04-04-Lambda-Calculus-Combinatory-Logic-and-Cartesian-Closed-Categories.html">closed cartesian categories</a> and extend the graph-reduction to also cover the resulting combinators <code>apply</code> and <code>(△)</code>.</li>
<li>extend the language to include lists, maybe even provide it with a LISPKIT frontend.</li>
<li>Add support for implicit and explicit parallelism of the graph-reduction engine. (implicit parallelism for strict operations, and an explicit <code>P</code>-combinator)</li>
</ul>
]]></summary>
</entry>
<entry>
    <title>λ-Calculus, Combinatory Logic and Cartesian Closed Categories</title>
    <link href="https://thma.github.io//posts/2021-04-04-Lambda-Calculus-Combinatory-Logic-and-Cartesian-Closed-Categories.html" />
    <id>https://thma.github.io//posts/2021-04-04-Lambda-Calculus-Combinatory-Logic-and-Cartesian-Closed-Categories.html</id>
    <published>2021-04-04T00:00:00Z</published>
    <updated>2021-04-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on April  4, 2021
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<h2 id="introduction">Introduction</h2>
<p>Recently I read the very interesting <a href="http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf">Compiling to Categories</a> paper by Conal Elliot.</p>
<p>He presents the idea to compile haskell programs into expressions of cartesian closed categories by λ-elimination. These expressions can then be used for different purposes like alternative program evaluation, graphic representation of program graphs, designing hardware layouts for algorithms, etc.</p>
<p>The λ-elimination process applied reminded me a lot of the <a href="https://crypto.stanford.edu/~blynn/lambda/sk.html">bracket abstraction</a> used when compiling λ-terms to SKI-Combinators.</p>
<p>In the following I’m having a closer look at the parallels between compiling lambda to CCC and compiling lambda to SKI-combinators</p>
<h2 id="lambda-calculus">Lambda Calculus</h2>
<p>I assume at least a rough familiarity with the λ-calculus. If you need a refresher I recommend <a href="http://dev.stephendiehl.com/fun/003_lambda_calculus.html">the chapter on λ-calculus in Stephen Diels excellent Write You a Haskell</a>.</p>
<p>Instead of the classical notation of lambda terms I’ll use the equivalent Haskell notation throughout this post. So instead of writing <code>λx.x a</code> I’ll write <code>\x -&gt; x a</code>.</p>
<h2 id="bracket-abstraction-in-combinatory-logic">Bracket Abstraction in Combinatory Logic</h2>
<blockquote>
<p>The SKI combinator calculus is a combinatory logic, a computational system that may be perceived as a reduced version of the untyped lambda calculus. It can be thought of as a computer programming language […] because it is an extremely simple Turing complete language. It was introduced by Moses Schönfinkel and Haskell Curry.</p>
<p>Quoted from <a href="https://en.wikipedia.org/wiki/SKI_combinator_calculus">Wikipedia</a></p>
</blockquote>
<p>λ-terms can be converted to variable free SKI combinator terms with a process called <a href="https://en.wikipedia.org/wiki/Combinatory_logic#Completeness_of_the_S-K_basis">bracket abstraction</a>. Bracket abstraction <code>absCL</code> is defined by the following equations (given in pseudo Haskell notation, as pattern matching on functions is not possible in Haskell):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>absCL (\x <span class="ot">-&gt;</span> x)   <span class="ot">=</span> i</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>absCL (\x <span class="ot">-&gt;</span> y)   <span class="ot">=</span> k y</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>absCL (\x <span class="ot">-&gt;</span> p q) <span class="ot">=</span> s (\x <span class="ot">-&gt;</span> p) (\x <span class="ot">-&gt;</span> q)</span></code></pre></div>
<p>where the combinators <code>i</code>, <code>k</code> and <code>s</code> are defined as follows (these are valid haskell definitions):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">i ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>i x <span class="ot">=</span> x</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="ot">k ::</span> a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> a</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>k x y <span class="ot">=</span> x</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="ot">s ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>s p q x <span class="ot">=</span> p x (q x)  </span></code></pre></div>
<p>Please note that <code>i</code> is identical to <code>id</code> and <code>k</code> is identical to <code>const</code> from the Haskell Prelude.</p>
<p>Once the λ-terms are compiled to combinator terms, these terms can be interpreted quite efficiently as they don’t contain any variables and so no environment-handling is needed.</p>
<p>Combinator terms also allow to apply several more advanced interpretation techniques like graph-reduction, node-sharing, parallel reduction, etc.</p>
<p>For a very cool demo have a look at the <a href="https://crypto.stanford.edu/~blynn/lambda/sk.html">web assembly based graph reduction engine by Ben Lynn</a>.</p>
<h2 id="cartesian-closed-categories-ccc">Cartesian Closed Categories (CCC)</h2>
<p>In his famous paper <a href="http://conal.net/papers/compiling-to-categories/compiling-to-categories.pdf">Compiling to Categories</a> Conal Elliot describes a way to compile from simply typed lambda-calculus terms to cartesian closed categories(CCC).</p>
<p>At the core of his approach sits a transformation from lambda-terms to CCC expressions that are done by eliminating variables by an abstraction function <code>absCCC</code> (again in pseudo-Haskell):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>absCCC (\x <span class="ot">-&gt;</span> x)   <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>absCCC (\x <span class="ot">-&gt;</span> y)   <span class="ot">=</span> <span class="fu">const</span> y</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>absCCC (\x <span class="ot">-&gt;</span> p q) <span class="ot">=</span> apply <span class="op">.</span> ((\x <span class="ot">-&gt;</span> p) △ (\x <span class="ot">-&gt;</span> q))</span></code></pre></div>
<p>Where <code>(△)</code> is introduced by the <code>Cartesian</code> category:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Category</span> k <span class="ot">=&gt;</span> <span class="dt">Cartesian</span> k <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  (△)<span class="ot"> ::</span> (a <span class="ot">`k`</span> c) <span class="ot">-&gt;</span> (a <span class="ot">`k`</span> d) <span class="ot">-&gt;</span> (a <span class="ot">`k`</span> (c, d))</span></code></pre></div>
<p>In the <code>(-&gt;)</code> instance of <code>Cartesian</code> <code>(△)</code> is defined as:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>(△)<span class="ot">::</span> (t <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (t <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> t <span class="ot">-&gt;</span> (a, b)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>(f △ g) x <span class="ot">=</span> (f x, g x)</span></code></pre></div>
<p>And where <code>apply</code> is introduced by the <code>Closed</code> category:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Cartesian</span> k <span class="ot">=&gt;</span> <span class="dt">Closed</span> k <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">  apply ::</span> ((a <span class="ot">-&gt;</span> b), a) <span class="ot">`k`</span> b</span></code></pre></div>
<p>In the <code>(-&gt;)</code> instance of <code>Closed</code> <code>apply</code> is defined as</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">apply ::</span> (a <span class="ot">-&gt;</span> b, a) <span class="ot">-&gt;</span> b</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>apply (f, x) <span class="ot">=</span> f x</span></code></pre></div>
<p>The function <code>absCCC</code> looks surprisingly similar to the <code>absCL</code> function defined above. The first two pattern matches are obviously equivalent as <code>i</code> and <code>id</code> are identical as well as <code>k y</code> and <code>const y</code>.</p>
<p>But what about the third clause? We have:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- on the one hand: abstracting lambda-terms to combinator expresssions:</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>absCL (\x <span class="ot">-&gt;</span> p q) <span class="ot">=</span> s (\x <span class="ot">-&gt;</span> p) (\x <span class="ot">-&gt;</span> q)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a><span class="co">-- and on the other: abstracting lambda-terms to CCC expressions:</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>absCCC (\x <span class="ot">-&gt;</span> p q) <span class="ot">=</span> apply <span class="op">.</span> ((\x <span class="ot">-&gt;</span> p) △ (\x <span class="ot">-&gt;</span> q))</span></code></pre></div>
<p>Are these two definitions equal?</p>
<p>By eliminating all variables from the term <code>apply . ((\x -&gt; p) △ (\x -&gt; q))</code> we can write it as a combinator <code>s'</code> with variables <code>p, q, x</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>s&#39; p q x <span class="ot">=</span> (apply <span class="op">.</span> (p △ q)) x</span></code></pre></div>
<p>Now we can apply equational reasoning:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>s&#39; p q x <span class="ot">=</span> (apply <span class="op">.</span> (p △ q)) x   </span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>         <span class="ot">=</span> apply ((p △ q) x)     <span class="co">-- by definition of (.)</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>         <span class="ot">=</span> apply (p x, q x)      <span class="co">-- by definition of (△)</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>         <span class="ot">=</span> (p x) (q x)           <span class="co">-- by definition of apply        </span></span></code></pre></div>
<p>This equals the definition of the <code>s</code> combinator:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>s p q x <span class="ot">=</span> (p x) (q x)</span></code></pre></div>
<p>So we can conclude that the transformations from λ-calculus to SKI-combinators and CCC are equivalent.</p>
<p>For me this was a new insight. But it seems that I was not the first to discover this: P.-L. Curien presents a much more elaborate proof of this correspondence in his classic paper <a href="https://core.ac.uk/download/pdf/82017242.pdf">Categorical Combinators</a>. See also <a href="http://pauillac.inria.fr/~huet/PUBLIC/cat.pdf">Cartesian Closed Categories and Lambda-Calculus</a>.</p>
<h2 id="nexts-steps">Nexts steps</h2>
<p>In my next blog post I will have a closer look at a CCC based execution model for a subset of Haskell.</p>
]]></summary>
</entry>
<entry>
    <title>Fuzzing me wrong — How QuickCheck destroyed my favourite theory</title>
    <link href="https://thma.github.io//posts/2021-01-30-How-QuickCheck-destroyed-my-favourite-theory.html" />
    <id>https://thma.github.io//posts/2021-01-30-How-QuickCheck-destroyed-my-favourite-theory.html</id>
    <published>2021-01-30T00:00:00Z</published>
    <updated>2021-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on January 30, 2021
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<h2 id="introduction">Introduction</h2>
<p>Quite a while back I wrote a larger article on the algebraic foundation of software patterns which also covered the <a href="https://thma.github.io/posts/2018-11-24-lambda-the-ultimate-pattern-factory.html#map-reduce">MapReduce algorithm</a>.</p>
<p>During the research digged out a paper on <a href="https://pdfs.semanticscholar.org/0498/3a1c0d6343e21129aaffca2a1b3eec419523.pdf">algebraic properties of distributed big data analytics</a>, which explained that a MapReduce will always work correctly when the intermediate data structure resulting from the <code>map</code>-phase is a Monoid under the <code>reduce</code>-operation.</p>
<p>For some reason, I was not convinced that this Monoid-condition was enough, because all the typical examples like word-frequency maps are even <strong>commutative</strong> Monoids under the respective reduce operation.</p>
<p>So I came up with the following personal theory:</p>
<blockquote>
<p>Only if the intermediate data structure resulting from the <code>map</code>-phase is a <strong>commutative Monoid</strong> under the <code>reduce</code>-operation, then a parallel MapReduce will produce correct results.</p>
</blockquote>
<p>I tried to validate this property using the <a href="https://wiki.haskell.org/Introduction_to_QuickCheck2">QuickCheck test framework</a>.</p>
<p>Interestingly the QuickCheck tests failed! This finally convinced me that my theory was wrong, and after a little deeper thought, I could understand why.</p>
<p>I was impressed with the power of QuickCheck, so I thought it would be a good idea to share this lesson in falsification.</p>
<p>The code shown in this blog <a href="https://github.com/thma/CommutativeMonoid">is also available on GitHub</a></p>
<h2 id="commutative-monoids">Commutative Monoids</h2>
<p>In abstract algebra, a monoid is a <em>set</em> equipped with an <em>associative binary operation</em> and an <em>identity element</em>.</p>
<p>The simplest example for a <em>commutative Monoid</em> is <span class="math inline">\((\mathbb{N}_0, +, 0)\)</span>: the natural numbers under addition with <span class="math inline">\(0\)</span> as the identity (or neutral) element. We can use QuickCheck to verify that indeed the Monoid laws plus commutativity are maintained.</p>
<p>If we want to use <code>GHC.Natural</code> type to represent natural numbers, we first have to make <code>Natural</code> instantiate the <code>Arbitrary</code> type class which is used by QuickCheck to automatically generate test data:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Test.QuickCheck</span> (<span class="dt">Arbitrary</span>, arbitrary, <span class="dt">NonNegative</span> (..))</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">GHC.Natural</span>     (<span class="dt">Natural</span>, naturalFromInteger)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Arbitrary</span> <span class="dt">Natural</span> <span class="kw">where</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  arbitrary <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    <span class="dt">NonNegative</span> nonNegative <span class="ot">&lt;-</span> arbitrary</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    <span class="fu">return</span> <span class="op">$</span> naturalFromInteger nonNegative</span></code></pre></div>
<p>Now we can start to write our property based tests. For algebraic structures it is straightforward to come up with properties: we just write the required laws (associativity, 0 is identity element and commutativity) as properties.</p>
<p>I am using Hspec as a wrapper around QuickCheck as it provides a very nice testing DSL which makes it easy to read the code and the output of the test suite:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Test.Hspec</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>spec <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>  describe <span class="st">&quot;The Monoid &#39;Natural Numbers under Addition&#39;&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    it <span class="st">&quot;is associative&quot;</span> <span class="op">$</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>      property <span class="op">$</span> \x y z <span class="ot">-&gt;</span> ((x <span class="op">+</span> y) <span class="op">+</span> z) <span class="ot">`shouldBe`</span> ((x <span class="op">+</span> (y <span class="op">+</span> z))<span class="ot"> ::</span> <span class="dt">Natural</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>      </span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    it <span class="st">&quot;has 0 as left and right identity element&quot;</span> <span class="op">$</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>      property <span class="op">$</span> \x <span class="ot">-&gt;</span> (x <span class="op">+</span> <span class="dv">0</span> <span class="ot">`shouldBe`</span> (<span class="ot">x ::</span> <span class="dt">Natural</span>)) <span class="op">.&amp;&amp;.</span> (<span class="dv">0</span> <span class="op">+</span> x <span class="ot">`shouldBe`</span> x)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>      </span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>    it <span class="st">&quot;is commutative&quot;</span> <span class="op">$</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>      property <span class="op">$</span> \x y <span class="ot">-&gt;</span> x <span class="op">+</span> y <span class="ot">`shouldBe`</span> (y <span class="op">+</span><span class="ot"> x ::</span> <span class="dt">Natural</span>)</span></code></pre></div>
<p>The output of these tests will be as follows:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ex">Monoid</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>  <span class="ex">The</span> Monoid <span class="st">&#39;Natural Numbers under Addition&#39;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>    <span class="ex">is</span> associative</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>    <span class="ex">has</span> 0 as identity (or neutral) <span class="ex">element</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>    <span class="ex">is</span> commutative</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span></code></pre></div>
<p>So behind the scenes, QuickCheck has generated test data for 100 tests for each property under test. For all these data the test cases passed.</p>
<p>This is definitely not a proof. But it gives us some confidence that our math text-books are correct when giving Natural Numbers under addition as an example for a commutative Monoid.</p>
<p>OK, that was easy! Now let’s move to non-commutative Monoids.</p>
<h2 id="non-commutative-monoids">Non-commutative Monoids</h2>
<p>Strings (or any other Lists) under concatenation are a typical example. It’s easy to see that <code>"hello" ++ ("dear" ++ "people")</code> equals <code>"(hello" ++ "dear") ++ "people"</code>, but that <code>"hello" ++ "world"</code> differs from <code>"world" ++ "hello"</code>.</p>
<p>Now let’s try to formalize these intuitions as QuickCheck property based tests again.</p>
<p>First I’m introducing an alias for <code>(++)</code>, as it is defined on any list type, it would be required to have type signatures in all properties (as we had all those <code>:: Natural</code> signatures in the examples above). So I define an operation <code>(⊕)</code> which is only defined on <code>String</code> instances:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>(⊕)<span class="ot"> ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>(⊕) a b <span class="ot">=</span> a <span class="op">++</span> b</span></code></pre></div>
<p>Now we can extend our test suite with the following test cases:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a>  describe <span class="st">&quot;The Monoid &#39;Strings under concatenation&#39;&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    </span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    it <span class="st">&quot;is associative&quot;</span> <span class="op">$</span> </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>      property <span class="op">$</span> \x y z <span class="ot">-&gt;</span> ((x ⊕ y) ⊕ z) <span class="ot">`shouldBe`</span> (x ⊕ (y ⊕ z))</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>      </span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    it <span class="st">&quot;has \&quot;\&quot; as left and right identity element&quot;</span> <span class="op">$</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>      property <span class="op">$</span> \x <span class="ot">-&gt;</span> (x ⊕ <span class="st">&quot;&quot;</span> <span class="ot">`shouldBe`</span> x) <span class="op">.&amp;&amp;.</span> (<span class="st">&quot;&quot;</span> ⊕ x <span class="ot">`shouldBe`</span> x)</span></code></pre></div>
<p>The output looks promising:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a>  <span class="ex">The</span> Monoid <span class="st">&#39;Strings under concatenation&#39;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>    <span class="ex">is</span> associative</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>    <span class="ex">has</span> <span class="st">&quot;&quot;</span> as left and right identity element</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 100 tests.</span></code></pre></div>
<p>Now let’s try to test the non-commutativity:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>    it <span class="st">&quot;is NOT commutative&quot;</span> <span class="op">$</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>      property <span class="op">$</span> \x y <span class="ot">-&gt;</span> x ⊕ y <span class="ot">`shouldNotBe`</span> y ⊕ x</span></code></pre></div>
<p>But unfortunately the output tells us that this is not true:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a>    <span class="ex">is</span> NOT commutative FAILED [1]</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  <span class="ex">1</span>) <span class="ex">Monoid</span>, The Monoid <span class="st">&#39;Strings under concatenation&#39;</span>, is NOT commutative</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>       <span class="ex">Falsifiable</span> (after 1 test)<span class="bu">:</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>         <span class="st">&quot;&quot;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>         <span class="st">&quot;&quot;</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>       <span class="ex">not</span> expected: <span class="st">&quot;&quot;</span></span></code></pre></div>
<p>We formulated the property in the wrong way. The <code>(⊕)</code> <em>may be commutative for some</em> edge cases, e.g. when one or both of the arguments are <code>""</code>. But it is not commutative <em>in general</em> – that is for all possible arguments.</p>
<p>We could rephrase this property as <em>“There exists at least one pair of arguments <span class="math inline">\((x, y)\)</span> for which <span class="math inline">\(\oplus\)</span> is not commutative”</em>:</p>
<p><span class="math display">\[\exists (x,y) \left [  x \oplus y \neq y \oplus x \right ]\]</span></p>
<p>QuickCheck does not come with a mechanism for <em>existential quantification</em>. But as is has <code>forAll</code>, that is <em>universal quantification</em>. So we can try to make use of the following equivalence:</p>
<p><span class="math display">\[\exists (x,y) \left [  x \oplus y \neq y \oplus x \right ] 
  \equiv 
  \neg \forall (x,y) \left [ x \oplus y = y \oplus x \right ]\]</span></p>
<p>Unfortunately we can not write this simply as <code>not forAll</code>, as <code>forAll</code> returns a <code>Property</code> but <code>not</code> expects a <code>Bool</code>. But as explained in <a href="https://stackoverflow.com/questions/42764847/is-there-a-there-exists-quantifier-in-quickcheck">this discussion on Stackoverflow</a> it is still posible to implement our own <code>exists</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">exists ::</span> (<span class="dt">Show</span> a, <span class="dt">Arbitrary</span> a) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>exists <span class="ot">=</span> forSome <span class="op">$</span> resize <span class="dv">1000</span> arbitrary</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true"></a><span class="ot">forSome ::</span> (<span class="dt">Show</span> a, <span class="dt">Testable</span> prop) <span class="ot">=&gt;</span> <span class="dt">Gen</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> prop) <span class="ot">-&gt;</span> <span class="dt">Property</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true"></a>forSome gen prop <span class="ot">=</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true"></a>  mapResult (\r <span class="ot">-&gt;</span> r {P.reason <span class="ot">=</span> <span class="st">&quot;No witness found.&quot;</span>, P.callbacks <span class="ot">=</span> []}) <span class="op">$</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true"></a>    once <span class="op">$</span> disjoin <span class="op">$</span> <span class="fu">replicate</span> <span class="dv">1000</span> <span class="op">$</span> forAll gen prop</span></code></pre></div>
<p>Now we can rewrite the property <span class="math inline">\(\exists (x,y) \left [ x \oplus y \neq y \oplus x \right ]\)</span> as follows:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>    it <span class="st">&quot;is not commutative (via exists)&quot;</span> <span class="op">$</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>      exists <span class="op">$</span> \(x,y) <span class="ot">-&gt;</span> x ⊕ y <span class="op">/=</span> y ⊕ x</span></code></pre></div>
<p>I like how close the Haskell code stays to the concise mathematical formulation! The output of this test fits much better into our intuitive understanding:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>    <span class="ex">is</span> not commutative (via exists)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>      <span class="ex">+++</span> OK, passed 1 test.</span></code></pre></div>
<h2 id="sequential-mapreduce">Sequential MapReduce</h2>
<blockquote>
<p>MapReduce is a programming model and an associated implementation for processing and generating large data sets. Users specify <strong>a map function</strong> that processes a key/value pair to generate a set of intermediate key/value pairs, <strong>and a reduce function</strong> that merges all intermediate values associated with the same intermediate key.</p>
<p>[This] abstraction is inspired by the map and reduce primitives present in Lisp and many other functional languages. <a href="https://storage.googleapis.com/pub-tools-public-publication-data/pdf/16cb30b4b92fd4989b8619a61752a2387c6dd474.pdf">Quoted from Google Research</a></p>
</blockquote>
<p>I’m not going into more details here, as You’ll find detailed information on this approach and a working example <a href="https://thma.github.io/posts/2018-11-24-lambda-the-ultimate-pattern-factory.html#map-reduce">in my original article</a>.</p>
<p>Here is the definition of a sequential MapReduce:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a>simpleMapReduce </span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true"></a>simpleMapReduce mapFunc reduceFunc <span class="ot">=</span> reduceFunc <span class="op">.</span> <span class="fu">map</span> mapFunc</span></code></pre></div>
<p>We can test the sequential MapReduce algorithm with the following property based test:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>    it <span class="st">&quot;works correctly with a sequential map-reduce&quot;</span> <span class="op">$</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>      property <span class="op">$</span> \a b c d <span class="ot">-&gt;</span> (simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [a,b,c,d]) </span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>                     <span class="ot">`shouldBe`</span> (<span class="fu">reverse</span> a) ⊕ (<span class="fu">reverse</span> b) ⊕ (<span class="fu">reverse</span> c) ⊕ (<span class="fu">reverse</span> d)</span></code></pre></div>
<h3 id="excurs-foldmap">Excurs: foldMap</h3>
<p>What I have shown so far just demonstrates the general mechanism of chaining <code>map</code> and <code>reduce</code> functions without implying any parallel execution. Essentially we are chaining a <code>map</code> with a <code>fold</code> (i.e. reduction) function. In the Haskell base library there is a higher order function <code>foldMap</code> that covers exactly this pattern of chaining. Please note that <code>foldMap</code>does only a single traversal of the foldable data structure. It fuses the <code>map</code> and <code>reduce</code> phase into a single one by function composition of <code>mappend</code> and the mapping function <code>f</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="co">-- | Map each element of the structure to a monoid,</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="co">-- and combine the results.</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="fu">foldMap</span><span class="ot"> ::</span> (<span class="dt">Foldable</span> t, <span class="dt">Monoid</span> m) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> m</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="fu">foldMap</span> f <span class="ot">=</span> <span class="fu">foldr</span> (<span class="fu">mappend</span> <span class="op">.</span> f) <span class="fu">mempty</span></span></code></pre></div>
<h2 id="parallel-mapreduce">Parallel MapReduce</h2>
<p>Now we come to the tricky part that kicked off this whole discussion: parallelism.</p>
<p>As an example we consider a simple sequential MapReduce, taking an input list of <code>Int</code>s, computing their squares and computing the sum of these squares:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> simpleMapReduce (<span class="op">^</span><span class="dv">2</span>) (<span class="fu">foldr</span> (<span class="op">+</span>) <span class="dv">0</span>) [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>]</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a><span class="dv">30</span></span></code></pre></div>
<p>Let’s try to design this as a massively parallelized algorithm:</p>
<ol type="1">
<li><p>Mapping of <code>(^2)</code> over the input-list <code>[1,2,3,4]</code> would be started in parallel to the reduction of the intermediary list of squares by <code>(foldr (+) 0)</code>.</p></li>
<li><p>The mapping phase will be executed as a set of parallel computations (one for each element of the input list).</p></li>
<li><p>The reduction phase will also be executed as a set of parallel computations (one for each addition).</p></li>
</ol>
<p>Of course the reduction phase can begin only when at least one list element is squared. So in effect the mapping process would have to start first. The parallel computation of squares will result in a non-deterministic sequence of computations. In particular it is not guaranteed that all elements of the input list are processed in the original list order. So it might for example happen that <code>3</code> is squared first. Now the reduction phase would receive it’s first input <code>9</code>, and would start reduction, that is compute <code>9 + 0</code>.</p>
<p>Let’s assume the following random sequence of mapping steps: Next the first element of the input <code>1</code>, then the fourth <code>4</code> and finally the second element <code>2</code> would be squared, resulting in a reduction sequence of <code>4 + 16 + 1 + 9 + 0</code>. As this sums up to <code>30</code> everything is fine. Addition is commutative, so changing the sequence of reduction steps does not affect the overall result.</p>
<p>But now imagine we would parallelize:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [<span class="st">&quot; olleh&quot;</span>,<span class="st">&quot; ym&quot;</span>,<span class="st">&quot; raed&quot;</span>,<span class="st">&quot; sklof&quot;</span>]</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="st">&quot;hello my dear folks &quot;</span></span></code></pre></div>
<p>If we assume the same sequence as above, the third element of the input list would be reversed first, resulting in a first reduction step <code>"dear " ⊕ ""</code>. Next the first, the fourth and finally the second element would be reversed, resulting in a reduction sequence of <code>"my " ⊕ "folks " ⊕ "hello " ⊕ "dear " ⊕ "" = "my folks hello dear "</code>. As string concatenation is not commutative it does not really come as a surprise that random changes to the reduction sequence will eventually result in wrong computations.</p>
<p>So our conclusion is:</p>
<blockquote>
<p>If the MapReduce algorithm is parallelized in the way that I outlined above — which may result in random changes of the order of list elements in the reduction phase — it will only work correct if the intermediary data structure is a <em>commutative</em> Monoid under the reduce operation.</p>
</blockquote>
<p>In the following section we will implement a parallel MapReduce in Haskell in order to validate our theory with property based testing.</p>
<h2 id="parallel-mapreduce-in-haskell">Parallel MapReduce in Haskell</h2>
<p>We can define a parallel MapReduce implementation as follows (for more details see <a href="http://book.realworldhaskell.org/read/concurrent-and-multicore-programming.html">Real World Haskell, Chapter 24</a>):</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel</span> (par)</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel.Strategies</span> (using, parMap, rpar)</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>parMapReduce </span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a>parMapReduce mapFunc reduceFunc input <span class="ot">=</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a>    mapResult <span class="ot">`par`</span> reduceResult</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true"></a>    <span class="kw">where</span> mapResult    <span class="ot">=</span> parMap rpar mapFunc input</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true"></a>          reduceResult <span class="ot">=</span> reduceFunc mapResult <span class="ot">`using`</span> rpar</span></code></pre></div>
<p>This implementation will start computing <code>mapResult</code> and <code>reduceResult</code> in parallel and finally return <code>reduceResult</code>. The <code>mapResult</code> is computed with a parallelized <code>map</code> function <code>parMap</code>. The <code>reduceResult</code> is computed by applying a parallel reduction strategy <code>rpar</code>.</p>
<p>Next we will write a property based test to valdate our theory:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>    it <span class="st">&quot;has some cases where parallel reduction deviates from sequential reduction&quot;</span> <span class="op">$</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>      exists <span class="op">$</span> \text <span class="ot">-&gt;</span> parMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) text</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>                <span class="op">/=</span> simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) text</span></code></pre></div>
<p>But it turns out that QuickCheck does not find any evidence for this assumption:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a>    <span class="ex">has</span> some cases where parallel reduction deviates from sequential reduction FAILED [1]</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a><span class="ex">Failures</span>:</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>  <span class="bu">test</span>\MonoidSpec.hs:69:5: </span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>  <span class="ex">1</span>) <span class="ex">Monoid</span>, The Monoid <span class="st">&#39;Strings under concatenation&#39;</span>, has some cases where parallel reduction deviates from sequential reduction</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>       <span class="ex">***</span> Failed! No witness found. (after 1 test)<span class="bu">:</span></span></code></pre></div>
<p>After seeing this result I had to deal with some growing cognitive dissonance, much like <a href="https://www.youtube.com/watch?v=EBtx1MDi5tY">a flat earther confronted with experimental evidence…</a></p>
<p>I began verifying my setup. I made sure that the <code>package.yaml</code> contains the right GHC options to provide parallel execution of the test suite:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="at">    </span><span class="fu">ghc-options</span><span class="kw">:</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -O2</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -threaded</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -rtsopts</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -eventlog</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true"></a><span class="at">    </span><span class="kw">-</span><span class="at"> -with-rtsopts=-N</span></span></code></pre></div>
<p>I also made sure that all cores of my CPU were actually running at 100% utilization during the parallel tests.</p>
<p>I also inspected the runtime behaviour with the amazing <a href="https://wiki.haskell.org/ThreadScope">ThreadScope tool</a> (A ThreadScope eventlog can be produced by adding the runtime flags <code>+RTS -ls -N</code> when executing an application).</p>
<p>I also increased the number of test executions to give better chances to hit any rare cases.</p>
<p>But to no avail.</p>
<p>Since QuickCheck kept telling me, “You’re wrong,” I finally started to admit, “Well, maybe I am <em>indeed</em> wrong and should take a closer look at the problem.”</p>
<h2 id="rethinking-parallel-evaluation-in-haskell">Rethinking parallel evaluation in Haskell</h2>
<p>Taking a closer look at the definition of the parallel MapReduce will allow us to better understand what’s actually going on:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel</span> (par)</span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Control.Parallel.Strategies</span> (using, parMap, rpar)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>parMapReduce </span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a><span class="ot">  ::</span> (a <span class="ot">-&gt;</span> b)   <span class="co">-- map function</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>  <span class="ot">-&gt;</span> ([b] <span class="ot">-&gt;</span> c) <span class="co">-- reduce function</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a>  <span class="ot">-&gt;</span> [a]        <span class="co">-- list to map over</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true"></a>  <span class="ot">-&gt;</span> c          <span class="co">-- result</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true"></a>parMapReduce mapFunc reduceFunc input <span class="ot">=</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true"></a>    mapResult <span class="ot">`par`</span> reduceResult</span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true"></a>    <span class="kw">where</span> mapResult    <span class="ot">=</span> parMap rpar mapFunc input</span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true"></a>          reduceResult <span class="ot">=</span> reduceFunc mapResult <span class="ot">`using`</span> rpar</span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true"></a></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true"></a><span class="co">-- and now an actual example usage:</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true"></a>x <span class="ot">=</span> parMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [<span class="st">&quot; olleh&quot;</span>,<span class="st">&quot; ym&quot;</span>,<span class="st">&quot; raed&quot;</span>,<span class="st">&quot; sklof&quot;</span>]     </span></code></pre></div>
<p>In this concrete example <code>mapResult</code> will be:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a>mapResult    <span class="ot">=</span> parMap rpar <span class="fu">reverse</span> [<span class="st">&quot; olleh&quot;</span>,<span class="st">&quot; ym&quot;</span>,<span class="st">&quot; raed&quot;</span>,<span class="st">&quot; sklof&quot;</span>]</span></code></pre></div>
<p>parMap is defined as follows:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="ot">parMap ::</span> <span class="dt">Strategy</span> b <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a>parMap strat f <span class="ot">=</span> (<span class="ot">`using`</span> parList strat) <span class="op">.</span> <span class="fu">map</span> f</span></code></pre></div>
<p>The <code>parMap</code> evaluation strategy will spark a parallel evaluation for each element of the <code>input</code> list. Nevertheless the actual order of elements will not be changed as internally the classical sequential <code>map</code> function is used which will not change the order of elements. So the reduce phase will never receive a changed order of elements from the map phase, even if <code>map</code>-computations for the individual list elements might be executed in random order!</p>
<p><code>mapResult</code> will always be <code>["hello", "my ", "dear ", "folks"]</code>.</p>
<p>Thus <code>reduceResult</code> will be:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a>reduceResult <span class="ot">=</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) [<span class="st">&quot;hello&quot;</span>, <span class="st">&quot;my &quot;</span>, <span class="st">&quot;dear &quot;</span>, <span class="st">&quot;folks&quot;</span>] <span class="ot">`using`</span> rpar</span></code></pre></div>
<p>Again the traditional semantics of <code>foldr</code> is maintained — in particular the order of arguments of all <code>(⊕)</code> operations, only we allow for parallel evaluation of those <code>(⊕)</code> operations during the reduction phase.</p>
<p>So the final output will always be <code>"hello my dear folks"</code>. The parallelism introduced by the <code>Control.Parallel</code> package does not in any way change the semantics of pure functional programs as our example. This is exactly what the failed test cased kept telling me:</p>
<blockquote>
<p>There do not exist any cases where sequential and parallel MapReduce result in deviating results!</p>
</blockquote>
<p>We can again evaluate our improved theory with a QuickCheck test:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a>    it <span class="st">&quot;parallel reduction always equals sequential reduction&quot;</span> <span class="op">$</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a>      property <span class="op">$</span> \l <span class="ot">-&gt;</span> simpleMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) l</span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a>                     <span class="ot">`shouldBe`</span> parMapReduce <span class="fu">reverse</span> (<span class="fu">foldr</span> (⊕) <span class="st">&quot;&quot;</span>) l</span></code></pre></div>
<p>And — not so surprisingly — this test succeeds!</p>
<p>If you want to know more about parallel evaluation in Haskell I highly recommend the exellent <a href="https://www.oreilly.com/library/view/parallel-and-concurrent/9781449335939/ch02.html">Parallel and Concurrent Programming in Haskell by Simon Marlow</a>.</p>
<h2 id="conclusions">Conclusions</h2>
<ol type="1">
<li><p>The parallelism as provided by the Haskell <code>Control.Parallel</code> package maintains the semantics of pure functional code and thus a parallel MapReduce maintains the same properties as its sequential counterpart. So a parallel MapReduce will still work correctly if the intermediate data structure resulting from the <code>map</code>-phase is just a <strong>Monoid</strong> — not necessarily a <em>commutative</em> Monoid.</p></li>
<li><p>Nevertheless there may be implementations that do not strictly maintain the original order of the input data during the <code>map</code>- and <code>reduce</code>-phases. With such implementations the intermediate data structure resulting from the <code>map</code>-phase must be a <strong>commutative Monoid</strong> under the <code>reduce</code>-operation to produce correct results.</p></li>
<li><p>Property based testing with QuickCheck is a powerful tool to verify assumptions about a given code-base. I really like using it as intended by <a href="https://en.wikipedia.org/wiki/Falsifiability">Karl Poppers Theory of Falsifiability</a>:</p>
<ul>
<li>Derive hypotheses from your theory which can be experimentally tested.</li>
<li>Perform experiments (property based tests) that test your hypotheses</li>
<li>If the experimental results contradict the hypotheses, the theory must be false.</li>
</ul></li>
</ol>
]]></summary>
</entry>
<entry>
    <title>What's awesome about functional programming</title>
    <link href="https://thma.github.io//posts/2021-01-17-Whats-awesome-about-functional-programming.html" />
    <id>https://thma.github.io//posts/2021-01-17-Whats-awesome-about-functional-programming.html</id>
    <published>2021-01-17T00:00:00Z</published>
    <updated>2021-01-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on January 17, 2021
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>Some weeks ago I gave an introductory talk on functional programming at an in-house mini-conference where I tried to explain basic concepts of functional programming to a crowd of developers with their backgrounds mostly in imperative and OO languages.</p>
<p>Initially I had planned to present the contents of my <a href="https://thma.github.io/posts/2020-04-01-why-haskell-matters.html">Why Haskell Matters article</a> but that turned out impractical because of the time constraints of my talk.</p>
<p>So I prepared a condensed slide deck focussing on the more elementary sections, which worked quite well.</p>
<p>Recently I stumbled across <a href="https://github.com/gibiansky/IHaskell">IHaskell</a>, a Haskell kernel for the Jupyter Notebook platform. As I like the interactive approach of Jupyter notebooks quite a lot I transferred my presentation into the Jupyter notebook format.</p>
<p>As I’m quite happy with the result I’d like to make it available to a wider audience. I have prepared three different versions:</p>
<ol type="1">
<li><p>The notebook as rendered by <a href="https://nbviewer.jupyter.org/github/thma/IHaskellExperiments/blob/main/WhatsAwesomeAboutFunctionalProgramming.ipynb">nbviewer.jupyter.org</a>. Unfortunately it’s not interactive. But you won’t need a local Jupyter installation.</p></li>
<li><p>A <a href="/static/WhatsAwesomeAboutFunctionalProgramming.slides.html">reveal.js presentation</a> which I generated from the notebook. This version just needs a web-browser.</p></li>
<li><p>An Interactive version of the reveal.js slides hosted on Binder: <a href="https://mybinder.org/v2/gh/thma/IHaskellExperiments/HEAD?filepath=ihaskell_examples/WhatsAwesomeAboutFunctionalProgramming.ipynb"><img src="https://mybinder.org/badge_logo.svg" alt="Binder" /></a> (Press ALT-r to start the presentation.) This version uses <a href="https://rise.readthedocs.io/en/stable/">RISE</a> to allow interactive notebook cells while still being in presentation mode. This version is based on a <a href="https://github.com/thma/IHaskellExperiments/blob/main/Dockerfile">Dockerfile</a> that adds the RISE extension to an <a href="https://hub.docker.com/r/crosscompass/ihaskell-notebook">ihaskell-notebook</a> docker image. This Dockerfile is then built and served by <a href="https://mybinder.org/">Binder</a>.</p></li>
</ol>
<p>If you intend to use IHaskell notebooks locally <a href="https://github.com/gibiansky/IHaskell#installation">Please follow this installation guide</a>.</p>
<p>Sourcecode of my IHaskell notebook and the dockerfile are hosted in <a href="https://github.com/thma/IHaskellExperiments">this github repo</a>.</p>
]]></summary>
</entry>
<entry>
    <title>Reconciling concepts from FP and OOP</title>
    <link href="https://thma.github.io//posts/2020-12-20-reconciling-fp-and-oop-concepts.html" />
    <id>https://thma.github.io//posts/2020-12-20-reconciling-fp-and-oop-concepts.html</id>
    <published>2020-12-20T00:00:00Z</published>
    <updated>2020-12-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on December 20, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>This post is part of the <a href="https://adventofhaskell.com/">Advent of Haskell 2020 series</a>. Hence, I tried to keep the content easy and enjoyable but still present some food for thought!</p>
<p>Some time ago I came across an interesting post on the Clean-Coder-Blog, which kept me busy for weeks until I finally decided to write this article.</p>
<p>In his blog-post Uncle Bob tries to reconcile concepts from both Functional Programming and Object Oriented Programming by explaining that both approaches are not mutually exclusive but both provide useful principles that go very well together and in fact are complementary:</p>
<blockquote>
<p>In this blog I will make the case that while OO and FP are orthogonal, they are not mutually exclusive. That a good functional program can (and should) be object oriented. And that a good object oriented program can (and should) be functional.</p>
<p><a href="https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html">quoted from Uncle Bob’s Clean Coder Blog</a></p>
</blockquote>
<p>He begins his argument by reducing FP and OOP each to a single central guiding principle in order to contrast the essential features of these two approaches as clearly as possible:</p>
<h2 id="oop-condensed">OOP condensed</h2>
<p>He gives the following characterisation of OOP:</p>
<blockquote>
<p>The technique of using dynamic polymorphism to call functions without the source code of the caller depending upon the source code of the callee.</p>
</blockquote>
<p>With this short statement Uncle Bob points to the core of object orientation since its first incarnation in the Smalltalk language:</p>
<p>In an OO language a call of methods on a target object is dispatched based on the target object’s type, its <code>class</code>. So a method call <code>shape.draw()</code> may invoke different code based on the <code>class</code> of the actual shape object:</p>
<p>The code of the <code>draw</code> method of class <code>Rectangle</code> may be different from the code in <code>Circle.draw()</code>.</p>
<p>Client code will just call <code>shape.draw()</code>, not even knowing which actual <code>Shape</code> sub-class it’s working on. This kind of polymorphism provides a very useful decoupling of clients from the target objects by using the methods of the baseclass <code>Shape</code> as the API for all Objects inheriting <code>Shape</code>.</p>
<p>This mechanism allows to build elegant design like the <a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller">Model-View-Controller (MVC)</a> pattern which is at the core of Smalltalks GUI and which influenced many similar designs in other OO-languages.</p>
<blockquote>
<p>MVC is the seminal insight of the whole field of graphical user interfaces. I believe the MVC work was the first to <strong>describe</strong> and implement <strong>software constructs in terms of their responsibilities.</strong> I also believe that MVC was the first significant <strong>use of protocols to define components</strong> instead of using concrete implementations — each controller class had a certain set of messages it had to respond to, as did each view class, but otherwise there were no constraints on what they did and how they did it.</p>
<p><a href="http://wiki.c2.com/?ModelViewControllerHistory">quoted from the C2 Wiki</a></p>
</blockquote>
<p>This quote conveys two major achievements of OOP:</p>
<ol type="1">
<li>Decomposing software into separate components with distinct responsibilities</li>
<li>Using protocols - APIs or interfaces in todays lingo - to decouple those components and allow for varying implementations.</li>
</ol>
<p>It’s interesting to note that Uncle Bob does not consider Inheritance or Encapsulation to be the most important and central concepts in OOP.</p>
<h2 id="fp-boiled-down">FP boiled down</h2>
<p>Next he gives a very brief characterization of functional programming:</p>
<blockquote>
<p>Referential Transparency – no reassignment of values.</p>
<p><a href="https://blog.cleancoder.com/uncle-bob/2018/04/13/FPvsOO.html">quoted from Uncle Bob’s Clean Coder Blog</a></p>
</blockquote>
<p>Referential transparency is implying <strong>purity</strong> as explained in the following definition from Wikipedia:</p>
<blockquote>
<p>An expression is called <strong>referentially transparent if it can be replaced with its corresponding value</strong> (and vice-versa) without changing the program’s behavior. This <strong>requires that the expression be pure</strong>, that is to say <strong>the expression value must be the same for the same inputs</strong> and its <strong>evaluation must have no side effects</strong>.</p>
<p><a href="https://en.wikipedia.org/wiki/Referential_transparency">quoted from Wikipedia</a></p>
</blockquote>
<p>The second part of Uncle Bob’s statement may be implied by this definition, but I prefer to see it as separate yet closely related principle, namely <strong>immutability</strong>:</p>
<blockquote>
<p>In object-oriented and functional programming, an immutable object (unchangeable object) is an object whose <strong>state cannot be modified after it is created</strong>. […]</p>
<p><a href="https://en.wikipedia.org/wiki/Immutable_object">Quoted from Wikipedia</a></p>
</blockquote>
<h2 id="there-is-no-fp-vs-oop">There is no FP vs OOP</h2>
<p>After this dense characterization of the two programming paradigms Uncle Bob continues his arguments like follows:</p>
<p>The concepts of Polymorphism and Referential Transparency are orthogonal. You can have Polymorphism without Referential Transparency – and vice versa.</p>
<p>But orthogonality does not imply that both concepts are mutually exclusive. It is possible to have languages that support both Dynamic Polymorphism and Referential Transparency. It is not only possible, but even desirable to combine both concepts:</p>
<ol type="1">
<li><p>Dynamic Polymorphism is desirable as it allows building strongly decoupled designs:</p>
<blockquote>
<p>Dependencies can be inverted across architectural boundaries. They are testable using Mocks and Fakes and other kinds of Test Doubles. Modules can be modified without forcing changes to other modules. This makes such systems much easier to change and improve.</p>
<p>Uncle Bob</p>
</blockquote></li>
<li><p>Referential Transparency is desirable as it allows designs that are much easier to understand, to reason about, to change and to improve. It also allows designs that are much better suited for scalability and concurrency as the chances of race conditions etc. are drastically reduced.</p></li>
</ol>
<p>Uncle Bob concludes that Dynamic Polymorphism and Referential Transparency are both desirable as part of software systems:</p>
<blockquote>
<p>A system that is built on both OO and FP principles will <strong>maximize flexibility, maintainability, testability, simplicity, and robustness</strong>.</p>
<p>Uncle Bob</p>
</blockquote>
<p>In the following sections I will have a look at the Haskell language to see how the principles of Ad-hoc Polymorphism and Referential Transparency are covered in our favourite language.</p>
<h2 id="ad-hoc-polymorphism-and-referential-transparency-in-haskell">Ad-hoc Polymorphism and Referential Transparency in Haskell</h2>
<ol type="1">
<li><p><strong>Referential Transparency</strong></p>
<p>Haskell is one of the rare incarnations of a purely functional language. So it goes without saying that Referential Transparency, Purity and Immutability are a given in Haskell. Yes, there are things like <code>unsafePerformIO</code> or <code>IORef</code> but overall it’s very easy to write clean code in Haskell due to the strict separation of pure and impure code by making side effects directly visibly in functions type signatures.</p>
<p>Referential Transparency in Haskell is so much a given that it’s quite possible to apply equational reasoning to proof certain properties of Haskell programs. See for example the following <a href="https://thma.github.io/LambdaBlog/posts/2020-04-17-maybe-functor-law-proof.html">Proof of Functor laws for the Maybe type</a>. What’s remarkable here is that you can use the same language to write your code and to reason about it. This is not possible in languages that do not provide Referential Transparency and Immutability. To reason about programs in such languages you have to use external models like an abstract stack + register machine.</p></li>
<li><p><strong>Ad-hoc Polymorphism</strong></p>
<p>Being able to overload functions and operators with different implementations depending on the type of its arguments is called Ad-hoc Polymorphism. For example, the <code>+</code> operator does something entirely different when applied to floating-point values as compared to when applied to integers. In Haskell, this kind of polymorphism is achieved with type classes and class instances.</p>
<p>Haskell’s type classes are quite different from the classes in OOP languages. They have more in common with interfaces in that they specify a set of functions with their respective type signatures to be implemented by instance declarations.</p></li>
</ol>
<h2 id="a-short-case-study">A short case study</h2>
<p>In this section I’m showcasing how these two concepts are supported in Haskell and how they can be combined without sacrificing FP principles.</p>
<p>Let’s have a look at a simple example that is frequently used in introductions to OOP: a class hierarchy representing geometrical shapes. In a typical OO language, we would have an abstract base class <code>Shape</code> which specifies a set of methods, and concrete classes <code>Rect</code>, <code>Circle</code>, <code>Triangle</code>, etc. which would implement specific behaviour.</p>
<p>This simple class hierarchy is shown in the following UML diagram:</p>
<figure>
<img src="/img/classes.png" alt="" /><figcaption>Shape class hierarchy</figcaption>
</figure>
<p>In Haskell there is no inheritance between types. But with type classes we can specify an <em>interface</em> which must be implemented by concrete types that wish to instantiate the type class. So we start with a <code>Shape</code> type class:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- | The Shape type class. It defines four functions that all concrete Shape types must implement.</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Shape</span> a <span class="kw">where</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>  <span class="co">-- | render a Shape</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ot">  draw   ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>  <span class="co">-- | move a Shape by an x and y amount</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="ot">  move   ::</span> (<span class="dt">Double</span>,<span class="dt">Double</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>  <span class="co">-- | compute the area of a Shape</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="ot">  area   ::</span> a <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>  <span class="co">-- | compute the circumference of a Shape</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="ot">  circum ::</span> a <span class="ot">-&gt;</span> <span class="dt">Double</span></span></code></pre></div>
<p>Any concrete type <code>a</code> instantiating <code>Shape</code> must implement the four functions <code>draw</code>, <code>move</code>, <code>area</code> and <code>circum</code>.</p>
<p>We start with a <code>Circle</code> type:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">-- | a circle defined by the centre point and a radius</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Circle</span> <span class="ot">=</span> <span class="dt">Circle</span> <span class="dt">Point</span> <span class="dt">Double</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="co">-- | a point in the two-dimensional plane</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Point</span> <span class="ot">=</span> <span class="dt">Point</span> <span class="dt">Double</span> <span class="dt">Double</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co">-- | making Circle an instance of Shape</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">Circle</span> <span class="kw">where</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>  draw       (<span class="dt">Circle</span> centre radius) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Circle [&quot;</span> <span class="op">++</span> <span class="fu">show</span> centre <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> radius <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>  move (x,y) (<span class="dt">Circle</span> centre radius) <span class="ot">=</span> <span class="dt">Circle</span> (movePoint x y centre) radius</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>  area   (<span class="dt">Circle</span> _ r) <span class="ot">=</span> r <span class="op">^</span> <span class="dv">2</span> <span class="op">*</span> <span class="fu">pi</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a>  circum (<span class="dt">Circle</span> _ r) <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> r <span class="op">*</span> <span class="fu">pi</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="co">-- | move a Point by an x and y amount</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a><span class="ot">movePoint ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>movePoint x y (<span class="dt">Point</span> x_a y_a) <span class="ot">=</span> <span class="dt">Point</span> (x_a <span class="op">+</span> x) (y_a <span class="op">+</span> y)</span></code></pre></div>
<p>As you can see, I’m not going to implement any real graphical rendering in <code>draw</code> but simply printing out the coordinates of the centre point and the radius. But at least <code>area</code> and <code>circum</code> implement the well-known geometrical properties of a circle.</p>
<p>Following this approach it’s straightforward to implement data types <code>Rect</code> and <code>Triangle</code>. Let’s start with <code>Rect</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | a rectangle defined by to points (bottom left and top right corners) </span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Rect</span> <span class="ot">=</span> <span class="dt">Rect</span> <span class="dt">Point</span> <span class="dt">Point</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">-- | making Rect an instance of Shape</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">Rect</span> <span class="kw">where</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>  draw       (<span class="dt">Rect</span> a b) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Rectangle [&quot;</span> <span class="op">++</span> <span class="fu">show</span> a <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> b <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>  move (x,y) (<span class="dt">Rect</span> a b) <span class="ot">=</span> <span class="dt">Rect</span> a&#39; b&#39;</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>      a&#39; <span class="ot">=</span> movePoint x y a</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>      b&#39; <span class="ot">=</span> movePoint x y b</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>  area rect   <span class="ot">=</span> width <span class="op">*</span> height</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>      (width, height) <span class="ot">=</span> widthAndHeight rect</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>  circum rect <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> (width <span class="op">+</span> height)</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>      (width, height) <span class="ot">=</span> widthAndHeight rect</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a><span class="co">-- | computes the width and height of a rectangle, returns them as a tuple</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a><span class="ot">widthAndHeight ::</span> <span class="dt">Rect</span> <span class="ot">-&gt;</span> (<span class="dt">Double</span>, <span class="dt">Double</span>)</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a>widthAndHeight (<span class="dt">Rect</span> (<span class="dt">Point</span> x_a y_a) (<span class="dt">Point</span> x_b y_b)) <span class="ot">=</span> (<span class="fu">abs</span> (x_b <span class="op">-</span> x_a), <span class="fu">abs</span> (y_b <span class="op">-</span> y_a))</span></code></pre></div>
<p>There is nothing special here, we are just implementing the functions specified by the <code>Shape</code> type class in a most simple way.</p>
<p>On to <code>Triangle</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">-- | a triangle defined by three points</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Triangle</span> <span class="ot">=</span> <span class="dt">Triangle</span> <span class="dt">Point</span> <span class="dt">Point</span> <span class="dt">Point</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="co">-- | making Triangle an instance of Shape</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">Triangle</span> <span class="kw">where</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>  draw       (<span class="dt">Triangle</span> a b c) <span class="ot">=</span> <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Triangle [&quot;</span> <span class="op">++</span> <span class="fu">show</span> a <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> b <span class="op">++</span> <span class="st">&quot;, &quot;</span> <span class="op">++</span> <span class="fu">show</span> c <span class="op">++</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>  move (x,y) (<span class="dt">Triangle</span> a b c) <span class="ot">=</span> <span class="dt">Triangle</span> a&#39; b&#39; c&#39;</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>      a&#39; <span class="ot">=</span> movePoint x y a</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>      b&#39; <span class="ot">=</span> movePoint x y b</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>      c&#39; <span class="ot">=</span> movePoint x y c</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>  area   triangle <span class="ot">=</span> <span class="fu">sqrt</span> (s <span class="op">*</span> (s <span class="op">-</span> a) <span class="op">*</span> (s <span class="op">-</span> b) <span class="op">*</span> (s <span class="op">-</span> c)) <span class="co">-- using Heron&#39;s formula</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>      s <span class="ot">=</span> <span class="fl">0.5</span> <span class="op">*</span> (a <span class="op">+</span> b <span class="op">+</span> c)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>      (a, b, c) <span class="ot">=</span> sides triangle</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true"></a>  circum triangle <span class="ot">=</span> a <span class="op">+</span> b <span class="op">+</span> c</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true"></a>      (a, b, c) <span class="ot">=</span> sides triangle</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true"></a></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true"></a><span class="co">-- | computing the length of all sides of a triangle, returns them as a triple</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true"></a><span class="ot">sides ::</span> <span class="dt">Triangle</span> <span class="ot">-&gt;</span> (<span class="dt">Double</span>, <span class="dt">Double</span>, <span class="dt">Double</span>)</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true"></a>sides (<span class="dt">Triangle</span> x y z) <span class="ot">=</span> (distance x y, distance y z, distance x z)</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true"></a></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true"></a><span class="co">-- | compute the distance between two points</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true"></a><span class="ot">distance ::</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Point</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true"></a>distance (<span class="dt">Point</span> x_a y_a) (<span class="dt">Point</span> x_b y_b) <span class="ot">=</span> <span class="fu">sqrt</span> ((x_b <span class="op">-</span> x_a) <span class="op">^</span> <span class="dv">2</span> <span class="op">+</span> (y_b <span class="op">-</span> y_a) <span class="op">^</span> <span class="dv">2</span>)</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true"></a></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true"></a><span class="co">-- | provide a more dense representation of a point</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">Point</span> <span class="kw">where</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true"></a>  <span class="fu">show</span> (<span class="dt">Point</span> x y) <span class="ot">=</span> <span class="st">&quot;(&quot;</span> <span class="op">++</span> <span class="fu">show</span> x <span class="op">++</span> <span class="st">&quot;,&quot;</span> <span class="op">++</span> <span class="fu">show</span> y <span class="op">++</span> <span class="st">&quot;)&quot;</span></span></code></pre></div>
<p>Let’s create three sample instances:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">rect ::</span> <span class="dt">Rect</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>rect <span class="ot">=</span> <span class="dt">Rect</span> (<span class="dt">Point</span> <span class="dv">0</span> <span class="dv">0</span>) (<span class="dt">Point</span> <span class="dv">5</span> <span class="dv">4</span>)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="ot">circle ::</span> <span class="dt">Circle</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>circle <span class="ot">=</span> <span class="dt">Circle</span> (<span class="dt">Point</span> <span class="dv">4</span> <span class="dv">5</span>) <span class="dv">4</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a><span class="ot">triangle ::</span> <span class="dt">Triangle</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>triangle <span class="ot">=</span> <span class="dt">Triangle</span> (<span class="dt">Point</span> <span class="dv">0</span> <span class="dv">0</span>) (<span class="dt">Point</span> <span class="dv">4</span> <span class="dv">0</span>) (<span class="dt">Point</span> <span class="dv">4</span> <span class="dv">3</span>)</span></code></pre></div>
<p>Now we have all ingredients at hand for a little demo.</p>
<p>The type class <code>Shape</code> specifies a function <code>draw :: Shape a =&gt; a -&gt; IO ()</code>. This function is polymorphic in its argument: it will take an argument of any type <code>a</code> instantiating <code>Shape</code> and will perform an <code>IO ()</code> action, rendering the shape to the console in our case.</p>
<p>Let’s try it in GHCi:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="op">&gt;</span> draw circle</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a><span class="op">&gt;</span> draw rect</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">5.0</span>,<span class="fl">4.0</span>)]</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a><span class="op">&gt;</span> draw triangle</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a><span class="dt">Triangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">3.0</span>)]</span></code></pre></div>
<p>This code makes use of Haskell’s Ad-hoc polymorphism and elegantly fulfils the requirements given for Dynamic Polymorphism in Uncle Bob’s blog post: <em>“call functions without the source code of the caller depending upon the source code of the callee”</em>. On the call site, we just rely on the function <code>draw :: (Shape a) =&gt; a -&gt; IO ()</code>. This type signature assures us that it will work on any concrete type <code>a</code> that instantiates the <code>Shape</code> type class.</p>
<p>By making use of the reversed application operator <code>(&amp;)</code> we can create a more OOP look-and-feel to our code. Depending on the context it may be more convenient to write and read code using <code>(&amp;)</code> even when you are not after an OOP look-and-feel.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">Data.Function</span> ((&amp;))</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="op">&gt;</span> circle <span class="op">&amp;</span> draw</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span></code></pre></div>
<p>We can use the <code>(&amp;)</code> operator to even work in a <strong>fluent api</strong> style:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>  rect</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="op">&amp;</span> move (<span class="dv">4</span>,<span class="dv">2</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>  </span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a>  rect</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a>  circle</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>    <span class="op">&amp;</span> move (<span class="dv">4</span>,<span class="dv">2</span>)</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>  circle</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a>    <span class="op">&amp;</span> draw</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a><span class="op">&gt;</span> main</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">4.0</span>,<span class="fl">2.0</span>), (<span class="fl">9.0</span>,<span class="fl">6.0</span>)]</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">5.0</span>,<span class="fl">4.0</span>)]</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">8.0</span>,<span class="fl">7.0</span>), <span class="fl">4.0</span>]</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span></code></pre></div>
<p>In Haskell all values are immutable: printing the original shapes a second time demonstrates that operations like <code>move</code> are not destructive.</p>
<p>With this little setup we have shown that Haskell allows us to have both: Referential Transparency plus ad-hoc polymorphism. That is, we can use the essential elements of OOP and FP in one language. And: we are doing it all the time, as it’s quite <a href="https://www.haskell.org/tutorial/classes.html">common to use class types in this way.</a></p>
<h2 id="heterogeneous-collections">Heterogeneous collections</h2>
<p>In Haskell, container types like lists are polymorphic, but it is <strong>not</strong> possible to define a list like this:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">shapes ::</span> [<span class="dt">Shape</span>]</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a>shapes <span class="ot">=</span> [circle,rect,triangle]</span></code></pre></div>
<p>because <strong>type classes are</strong> not types, but <strong>constraints on types</strong>.</p>
<p>So in haskell a list like <code>[circle,rect,triangle]</code> is considered to be heterogeneous, as the concrete types of all the elements differ.</p>
<p>There are <a href="https://wiki.haskell.org/Heterogenous_collections">several ways to have heterogeneous collections in Haskell</a>. I will demonstrate just one of them, which is based on <em>existential types</em>. (I have chosen this approach as it keeps the code easier to read and allows to add more <code>Shape</code> types whenever needed.</p>
<p>There is also a recent blog post on <a href="https://blog.sumtypeofway.com/posts/existential-haskell.html">Existential Haskell</a> which demonstrates some interesting use cases for existential types.</p>
<p>However, the <a href="https://github.com/thma/FPvsOO/blob/master/src/Lib.hs">sourcecode for this example</a> also demonstrates a solution based on a simple sum type.)</p>
<p>Once we activate the <code>ExistentialQuantification</code> language extension, we can define a data type <code>ShapeType</code> with a single constructor <code>MkShape</code> that will take any instance of a concrete type instantiating the <code>Shape</code> type class:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE ExistentialQuantification #-}</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">ShapeType</span> <span class="ot">=</span> <span class="kw">forall</span> a <span class="op">.</span> (<span class="dt">Show</span> a, <span class="dt">Shape</span> a) <span class="ot">=&gt;</span> <span class="dt">MkShape</span> a</span></code></pre></div>
<p>Now we can make <code>ShapeType</code> an instance of <code>Shape</code> which will delegate all function calls to the wrapped types:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Shape</span> <span class="dt">ShapeType</span> <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>  area     (<span class="dt">MkShape</span> s) <span class="ot">=</span> area s</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>  circum   (<span class="dt">MkShape</span> s) <span class="ot">=</span> circum s</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>  draw     (<span class="dt">MkShape</span> s) <span class="ot">=</span> draw s</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>  move vec (<span class="dt">MkShape</span> s) <span class="ot">=</span> <span class="dt">MkShape</span> (move vec s)</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true"></a><span class="co">-- we also have to manually derive a Show instance as auto deriving is not possible on the existential type</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">ShapeType</span> <span class="kw">where</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true"></a>  <span class="fu">show</span> (<span class="dt">MkShape</span> s) <span class="ot">=</span> <span class="fu">show</span> s</span></code></pre></div>
<p>With this setup we can define a list of shapes as follows:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="ot">shapes ::</span> [<span class="dt">ShapeType</span>]</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>shapes <span class="ot">=</span> [<span class="dt">MkShape</span> rect, <span class="dt">MkShape</span> circle, <span class="dt">MkShape</span> triangle]</span></code></pre></div>
<p>Finally, we are able to use this list just as any other:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> area shapes</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> circum shapes</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>  <span class="fu">print</span> <span class="op">$</span> <span class="fu">map</span> (move (<span class="dv">4</span>,<span class="dv">10</span>)) shapes</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="st">&quot;&quot;</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>  <span class="fu">mapM_</span> draw shapes</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a><span class="op">&gt;</span> main</span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a>[<span class="fl">20.0</span>,<span class="fl">50.26548245743669</span>,<span class="fl">6.0</span>]</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a>[<span class="fl">18.0</span>,<span class="fl">25.132741228718345</span>,<span class="fl">12.0</span>]</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a>[<span class="dt">Rect</span> (<span class="fl">4.0</span>,<span class="fl">10.0</span>) (<span class="fl">9.0</span>,<span class="fl">14.0</span>),<span class="dt">Circle</span> (<span class="fl">8.0</span>,<span class="fl">15.0</span>) <span class="fl">4.0</span>,<span class="dt">Triangle</span> (<span class="fl">4.0</span>,<span class="fl">10.0</span>) (<span class="fl">8.0</span>,<span class="fl">10.0</span>) (<span class="fl">8.0</span>,<span class="fl">13.0</span>)]</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a><span class="dt">Rectangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">5.0</span>,<span class="fl">4.0</span>)]</span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a><span class="dt">Circle</span> [(<span class="fl">4.0</span>,<span class="fl">5.0</span>), <span class="fl">4.0</span>]</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true"></a><span class="dt">Triangle</span> [(<span class="fl">0.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">0.0</span>), (<span class="fl">4.0</span>,<span class="fl">3.0</span>)]</span></code></pre></div>
<h2 id="conclusion">Conclusion</h2>
<p>In our short Demo we have seen that Haskell supports both Referential Transparency and Polymorphism. We have also seen that the reversed application operator <code>(&amp;)</code> allows us to structure code in a way that even has some kind of OOP look-and-feel while remaining purely functional.</p>
<p>If we follow Uncle Bob’s argumentation to view Polymorphism to be the central concept of OOP (and in consequence regard other important OO features like Inheritance or Encapsulation as not so distinctive), we can conclude that Haskell is already well prepared to implement programs in the hybrid way proposed by him.</p>
<p>In fact, the benefits associated with this approach (flexibility, maintainability, testability, simplicity, and robustness) are typical key features of systems implemented in Haskell.</p>
<hr />
<h2 id="acknowledgements">Acknowledgements</h2>
<p>Thanks to <a href="https://github.com/treeowl">David Feuer</a> for helping me with a stupid error in the existential type code!</p>
<p>Thanks to the <a href="https://adventofhaskell.com/">Advent Of Haskell 2020 team</a> for having this blog post in their advents calendar!</p>
]]></summary>
</entry>
<entry>
    <title>Using Hakyll with GitHub Pages has become even easier!</title>
    <link href="https://thma.github.io//posts/2020-11-15-using-hakyll-with-github-pages.html" />
    <id>https://thma.github.io//posts/2020-11-15-using-hakyll-with-github-pages.html</id>
    <published>2020-11-15T00:00:00Z</published>
    <updated>2020-11-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on November 15, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>Over the weekend I’ve set up a <a href="https://jaspervdj.be/hakyll/">hakyll</a> powered blog on github pages (actually the one you are reading right now).</p>
<p>I’d like to share my findings, as I found an easier way to integrate Hakyll with GitHub Pages.</p>
<h2 id="the-documented-way">The documented way</h2>
<p>I followed the tutorial <a href="https://jaspervdj.be/hakyll/tutorials/github-pages-tutorial.html">Using Hakyll with GitHub Pages</a>. This tutorial assumes that the GitHub pages must always be served from the root folder of a github repository.</p>
<p>It then describes a way to achieve this by using a <code>develop</code> branch to do all the Hakyll work and finally writing the contents to the default <code>_site</code> folder. This folder is excluded from version control by entries in the <code>.gitignore</code> file both in the <code>develop</code> and <code>master</code> branches.</p>
<p>So to finally publish the generated site you’ll have to switch to the <code>master</code> branch and copy the contents of the <code>_site</code> folder to the root folder of your project.</p>
<p>I tried this approach and it works nicely.</p>
<p>But then I found out that GitHub pages also allows to use a <code>docs</code> folder as the document root of your GitHub Pages site.</p>
<p>This makes things significantly easier, as you can do all the necessary hakyll tasks and the final publishing on the same <code>master</code> branch.</p>
<h2 id="the-easier-way">The easier way</h2>
<h3 id="github-setup">GitHub setup</h3>
<ol type="1">
<li>If required, create a new GitHub repository for your blog.</li>
<li>If required, create a master branch.</li>
<li>in the Settings of your GitHub project define that the <code>/docs</code> folder from the <code>master</code> branch should be used as document-root of your site. Please refer to the <a href="https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#choosing-a-publishing-source">documentation</a> in case of problems.</li>
<li>Create a .gitignore file with at a minimum, the following entries:</li>
</ol>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="ex">_cache/</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ex">.stack-work/</span></span></code></pre></div>
<h3 id="local-setup">Local setup</h3>
<p>If required, create a new Hakyll project. If you’re a stack user, there is a Hakyll template available that makes this step easy:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ex">stack</span> new myblog hakyll-template</span></code></pre></div>
<p>Create a .gitignore file in your blog’s directory with at a minimum, the same directories listed as in the GitHub repository. Use the following git commands to setup your local repository:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">git</span> init</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co"># track all the source files for our blog.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="fu">git</span> add .</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co"># make our first commit</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="fu">git</span> commit -m <span class="st">&quot;initial commit.&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="co"># and add the GitHub repository as a remote.</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="fu">git</span> remote add origin <span class="op">&lt;</span>URL to your GitHub pages repository<span class="op">&gt;</span></span></code></pre></div>
<h3 id="modify-site.hs">Modify site.hs</h3>
<p>In order to make Hakyll generate the site into the <code>docs</code> folder we have to edit the Hakyll Main module (<code>site.hs</code> if you use the stack template) slightly:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="ot">config ::</span> <span class="dt">Configuration</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>config <span class="ot">=</span> defaultConfiguration</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>  { destinationDirectory <span class="ot">=</span> <span class="st">&quot;docs&quot;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>  }</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>  hakyllWith config <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>  <span class="op">...</span></span></code></pre></div>
<h3 id="deployment">Deployment</h3>
<p>So everything’s all setup, and we’re ready to deploy.</p>
<p>We need to be able to run the executable that generates the website, so we need to compile it first. If you are using stack, this can be done using:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ex">stack</span> build</span></code></pre></div>
<p>Next we get a clean build of our site:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ex">stack</span> exec myblog clean</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ex">stack</span> exec myblog build</span></code></pre></div>
<p>After this step you should see a folder <code>docs</code> under your projects root folder, which contains the generated Hakyll site.</p>
<p>Now we commit our changes:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="fu">git</span> add -A</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a><span class="fu">git</span> commit -m <span class="st">&quot;Publish.&quot;</span></span></code></pre></div>
<p>And send them to GitHub:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">git</span> push origin master:master</span></code></pre></div>
<p>That’s all.</p>
<p>Now your Hakyll site should be visible under your GitHub Pages URL!</p>
<h2 id="view-the-source">View the source</h2>
<p>The source code for this blog post lies under my <a href="https://github.com/thma/thma.github.io">thma.github.io</a> GitHub project. I’ve adopted the composeconference css from <a href="http://katychuang.com/hakyll-cssgarden/gallery/">Katy Chuangs great Hakyll CSS Garden</a> and tweaked it a little bit to look more like GitHub markdown style and to provide some basic responsive design.</p>
<h2 id="update-nov.-24th-2020">Update Nov. 24th 2020</h2>
<p>The Hakyll project has just accepted my pull request for the Using Hakyll with GitHub Pages tutorial, which updates the text according to the findings presented in this post.</p>
<p>The amended version will thus be online shortly, rendering this blog entry kind of obsolete…</p>
]]></summary>
</entry>
<entry>
    <title>Implementing Clean Architecture with Haskell and Polysemy</title>
    <link href="https://thma.github.io//posts/2020-05-29-polysemy-clean-architecture.html" />
    <id>https://thma.github.io//posts/2020-05-29-polysemy-clean-architecture.html</id>
    <published>2020-05-29T00:00:00Z</published>
    <updated>2020-05-29T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on May 29, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p><a href="https://github.com/thma/PolysemyCleanArchitecture/actions"><img src="https://github.com/thma/PolysemyCleanArchitecture/workflows/Haskell%20CI/badge.svg" alt="Actions Status" /></a></p>
<h2 id="tldr">tl;dr</h2>
<p>This article shows how algebraic effect systems can be used to maintain a clear separation of concerns between different parts of software systems. From a practical programming perspective this improves composability and testability of software components.</p>
<p>I’m demonstrating this idea by using the Polysemy library to implement a multi-layered REST application conforming to the guidelines of the Clean Architecture model.</p>
<h2 id="motivation">Motivation</h2>
<p>While writing <a href="https://github.com/thma/WhyHaskellMatters#readme">Why Haskell Matters</a> I prepared a little demo application that was meant to showcase a cleanly designed REST application in Haskell. In particular, I wanted to demonstrate how the clear separation of <em>pure</em> and <em>impure</em> code helps to provide strict separation of concerns and state-of-the-art testability of all application layers.</p>
<p><strong>I failed!</strong></p>
<p>I was able to write the domain logic in <em>pure</em> code consisting only of <em>total</em> functions. It was a great pleasure to write unit tests for them!</p>
<p>However, as soon as I started writing controllers that coordinate access to the domain logic as well as to a persistence layer to retrieve and store data, I was stuck in the IO Monad. That is, in test cases I was not able to test the controllers independently of the concrete backend.</p>
<p>Then I tried to apply the <em>final tagless</em> pattern for the persistence layer. This allowed abstracting out the concrete persistence layer and writing controller tests with a mocked persistence backend. But when it came to testing the REST API handlers (written with Servant) I was again stuck in the IO Monad as the Handler type is defined as <code>newtype Handler a = Handler { runHandler' :: ExceptT ServerError IO a }</code>. Maybe it’s not a principle issue but just my brain being too small…</p>
<p>I was desperately looking for something that allowed me to combine different types of effects (like persistence, logging, configuration, http handlers, error handling, etc.) in controllers and handlers but still to be able to write tests that allow using mocks or stubs to test components in isolation.</p>
<p>As I reached a dead end, I had a look at some of the <em>algebraic effect systems</em> available in Haskell, like eff, extensible-effects, fused-effects, freer-simple and Polysemy.</p>
<p>In algebraic effect systems, effectful programs are split into two separate parts: the specification of the effects to be performed, and the interpretation (or semantics) given to them.</p>
<p>So my idea was to provide special effect interpretations that would allow building mocked effects for my test suite.</p>
<p>After seeing a <a href="https://youtu.be/kIwd1D9m1gE">presentation on maintainable software architecture with Polysemy</a> which answered many of my questions I rewrote my application based on Polysemy powered algebraic effects.</p>
<p>I’m pretty satisfied with the result, and of course I’m eager to share my approach with you!</p>
<h2 id="the-challenge">The Challenge</h2>
<p>A very small boutique restaurant (serving excellent vietnamese food) is looking for a reservation system that allows managing reservations. The restaurant has only twenty seats, they also take only a maximum of twenty reservations per day. (So guests can stay the whole evening and don’t have to leave after some time.) (I adopted this scenario from a inspiring <a href="https://youtu.be/US8QG9I1XW0">talk by Mark Seemann</a>)</p>
<p>They have asked us to write the REST backend for their reservation system.</p>
<p>The chef insists on a scrupulously clean kitchen and is also a lover of clean code. He has read about clean architecture and wants his new software to be a perfect example!</p>
<p>So we cannot just hack away but first have to understand what is expected from us when we are to deliver a clean architecture.</p>
<h2 id="what-makes-a-clean-architecture">What makes a Clean Architecture ?</h2>
<p>I’m following the introduction to clean architecture by Robert C. Martin on his <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Code blog</a>. He states that his concept builds up on several earlier approaches like <a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">hexagonal architecture</a>, <a href="https://en.wikipedia.org/wiki/Hexagonal_architecture_(software)">ports and adapters</a> or <a href="https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/">Onion Architecture</a>.</p>
<p>According to him all these approaches share a similar objective: achieve separation of concerns by dividing a software system into different layers. All approaches result in system designs that share a common set of features:</p>
<ol type="1">
<li><p>The architecture does not depend on any specific software libraries or frameworks. This allows to freely choose such tools according to the actual needs. This avoids “vendor lock in”.</p></li>
<li><p>High testability. The business logic can be tested without any external element like UI, DB, Web Server, etc.</p></li>
<li><p>The UI is loosely coupled to the core system. So it can be easily changed or replaced without affecting the rest of the system.</p></li>
<li><p>The Database is also “external” to the core system. It can be easily changed (even from an RDBMS to NonSQL DB) without affecting the business logic.</p></li>
<li><p>The Business logic is agnostic of the outside world. It has no dependencies to any external systems like DB, ESB, etc.</p></li>
</ol>
<h3 id="layers-with-clearly-separated-responsibilities">Layers with clearly separated responsibilities</h3>
<p>The architecture consists of four layers, each of which contains components with a specific scope and a limited set of responsibilities.</p>
<ol type="1">
<li><p>At the centre sits the <strong>Domain</strong> layer consisting of entities and core business logic.</p></li>
<li><p>Next comes the <strong>Use Cases</strong> layer where all resources are coordinated that are required to fulfill a given use case. In particular, it uses entities and logic from the domain layer to implement use cases. But typically it must also interface to a persistent storage to retrieve and store entities.</p></li>
<li><p>The <strong>Interface Adapters</strong> layer holds code for UI controllers and presenters as well as adapters to external resources like databases, message queues, configuration, Logging, etc.</p></li>
<li><p>The <strong>External Interfaces</strong> layer contains the technical implementation of external interfaces. For example, a concrete REST service assembly, Web and UI infrastructure, databases, etc.</p></li>
</ol>
<h3 id="the-dependency-rule">The Dependency Rule</h3>
<blockquote>
<p>The overriding rule that makes this architecture work is The Dependency Rule. This rule says that source code dependencies can only point inwards. Nothing in an inner circle can know anything at all about something in an outer circle. In particular, the name of something declared in an outer circle must not be mentioned by the code in the an inner circle. That includes, functions, classes. variables, or any other named software entity.</p>
<p>Quoted from <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>This dependency rule leads to a very interesting consequence: If a use case interactor needs to access a component from an outer circle, e.g. retrieve data from a database, this must be done in a specific way in order to avoid breaking the dependency rule: In the use case layer we don’t have any knowledge about the components of the outer circles. <strong>If we require access to a database (or any other external resources), the call interface, as well as the data transfer protocol must be specified in the use case layer.</strong></p>
<p>The components in the outer circles will then implement this interface. Using this kind of interfaces, it is possible to communicate accross the layer boundaries, but still maintain a strict separation of concerns.</p>
<p>If you want to dive deeper into clean architecture I recommend the <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a> as an entry point. Robert C. Martin later also published a whole book <a href="https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164">Clean Architecture: A Craftsman’s Guide to Software Structure and Design</a> on this concept.</p>
<p>In the following sections I’ll explain how the clean architecture guidelines can be implemented in a Haskell REST API application by making use of the algebraic effect library <a href="https://github.com/polysemy-research/polysemy#readme">Polysemy</a>.</p>
<h2 id="the-domain-layer">The Domain layer</h2>
<p>The <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/Domain/ReservationDomain.hs">ReservationDomain</a> module implements the business logic for seat reservations in a very small boutique restaurant. The restaurant has only one big table with 20 seats. Each day the restaurants accepts only 20 reservations. (There is no limited time-slot for each guest.)</p>
<p>Please note: - all functions in this module are <strong>pure</strong> (they don’t do any IO) and <strong>total</strong> (they produce defined results for all possible input values).</p>
<ul>
<li>The definitions in this module do not have dependencies to anything from the outer circles.</li>
</ul>
<p>At the core of our Domain lies the <code>Reservation</code> data type:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- | a data type representing a reservation</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Reservation</span> <span class="ot">=</span> <span class="dt">Reservation</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    {<span class="ot"> date     ::</span> <span class="dt">Day</span>     <span class="co">-- ^ the date of the reservation</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>    ,<span class="ot"> name     ::</span> <span class="dt">String</span>  <span class="co">-- ^ the name of the guest placing the reservation</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    ,<span class="ot"> email    ::</span> <span class="dt">String</span>  <span class="co">-- ^ the email address of the guest</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>    ,<span class="ot"> quantity ::</span> <span class="dt">Natural</span> <span class="co">-- ^ how many seats are requested</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    }</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Generic</span>, <span class="dt">Read</span>, <span class="dt">Show</span>)</span></code></pre></div>
<p>This type can be used to express facts like <em>Mr. Miller reserved two seats on 2020-06-01, he can be reached via his email address: manfred@miller.com</em>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>reservation <span class="ot">=</span> <span class="dt">Reservation</span> {name <span class="ot">=</span> <span class="st">&quot;Mr. Miller&quot;</span>, quantity <span class="ot">=</span> <span class="dv">2</span>, date <span class="ot">=</span> <span class="fu">read</span> <span class="st">&quot;2020-06-01&quot;</span>, email <span class="ot">=</span> <span class="st">&quot;manfred@miller.com&quot;</span>}</span></code></pre></div>
<p>All reservations of a specific day are represented as a list of reservations: <code>[Reservation]</code>.</p>
<p>A <code>ReservationMap</code> is a map from <code>Day</code> to <code>[Reservation]</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="co">-- | a key value map holding a list of reservations for any given day</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">ReservationMap</span> <span class="ot">=</span> <span class="dt">Map</span> <span class="dt">Day</span> [<span class="dt">Reservation</span>]</span></code></pre></div>
<p>That is, we can keep track of all reservations by maintaining them in such a map:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>fromList </span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>  [</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>    (</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>      <span class="dv">2020</span><span class="op">-</span><span class="dv">06</span><span class="op">-</span><span class="dv">01</span>,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>        [</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>          <span class="dt">Reservation</span> {date <span class="ot">=</span> <span class="dv">2020</span><span class="op">-</span><span class="dv">06</span><span class="op">-</span><span class="dv">01</span>, name <span class="ot">=</span> <span class="st">&quot;Mr. Miller&quot;</span>, email <span class="ot">=</span> <span class="st">&quot;manfred@miller.com&quot;</span>, quantity <span class="ot">=</span> <span class="dv">2</span>}, </span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>          <span class="dt">Reservation</span> {date <span class="ot">=</span> <span class="dv">2020</span><span class="op">-</span><span class="dv">06</span><span class="op">-</span><span class="dv">01</span>, name <span class="ot">=</span> <span class="st">&quot;Andrew M. Jones&quot;</span>, email <span class="ot">=</span> <span class="st">&quot;amjones@example.com&quot;</span>, quantity <span class="ot">=</span> <span class="dv">4</span>}</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>        ]</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    )</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>  ]</span></code></pre></div>
<p>Based on these data types we can define domain logic like computing the used capacity of a list of reservations:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">-- | computes the number of reserved seats for a list of reservations</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a><span class="ot">usedCapacity ::</span> [<span class="dt">Reservation</span>] <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>usedCapacity [] <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>usedCapacity (<span class="dt">Reservation</span> _ _ _ quantity <span class="op">:</span> rest) <span class="ot">=</span> quantity <span class="op">+</span> usedCapacity rest</span></code></pre></div>
<p>Based on this we can compute the number of available seats (given a maximum capacity and a list of reservations):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="co">-- | computes the number of available seats from a maximum capacity and a list of reservations.</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="ot">availableSeats ::</span> <span class="dt">Natural</span><span class="ot">-&gt;</span> [<span class="dt">Reservation</span>] <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>availableSeats maxCapacity reservations <span class="ot">=</span> maxCapacity <span class="op">-</span> usedCapacity reservations</span></code></pre></div>
<p>The <code>Reservation</code> data type and some of the domain logic functions are depicted in the in the following diagram:</p>
<figure>
<img src="/img/domain.png" alt="" /><figcaption>The Domain layer</figcaption>
</figure>
<h3 id="testing">Testing</h3>
<p>As already mentioned: this layer has no knowledge of the world and it’s all pure code. Testing domain logic in isolation therefore is straight forward, as you can see from the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/test/DomainSpec.hs">DomainSpec</a> code.</p>
<p>The data types and functions of the domain layer can be used directly, without any mocking of components:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a>day <span class="ot">=</span> fromGregorian <span class="dv">2020</span> <span class="dv">1</span> <span class="dv">29</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>res1 <span class="ot">=</span> <span class="dt">Reservation</span> day <span class="st">&quot;Andrew M. Jones&quot;</span> <span class="st">&quot;amjones@example.com&quot;</span> <span class="dv">4</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>res2 <span class="ot">=</span> <span class="dt">Reservation</span> day <span class="st">&quot;Thomas Miller&quot;</span> <span class="st">&quot;tm@example.com&quot;</span> <span class="dv">3</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>reservations <span class="ot">=</span> [res1, res2]</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>totalCapacity <span class="ot">=</span> <span class="dv">20</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true"></a>  describe <span class="st">&quot;Domain Logic&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true"></a>    it <span class="st">&quot;computes the used capacity for an empty list of reservations&quot;</span> <span class="op">$</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true"></a>      usedCapacity [] <span class="ot">`shouldBe`</span> <span class="dv">0</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true"></a>    it <span class="st">&quot;computes the used capacity for a list of reservations&quot;</span> <span class="op">$</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true"></a>      usedCapacity [res1, res2] <span class="ot">`shouldBe`</span> <span class="dv">7</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true"></a>      </span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true"></a>    it <span class="st">&quot;computes the available seats for a list of reservations&quot;</span> <span class="op">$</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true"></a>      availableSeats totalCapacity [res1, res2] <span class="ot">`shouldBe`</span> <span class="dv">13</span></span></code></pre></div>
<h2 id="the-use-case-layer">The Use Case layer</h2>
<blockquote>
<p>The software in this layer contains application specific business rules. It encapsulates and implements all of the use cases of the system. These <strong>use cases orchestrate the flow of data to and from the entities, and direct those entities to use their enterprise wide business rules to achieve the goals of the use case.</strong></p>
<p>Quoted from the <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>The module <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/UseCases/ReservationUseCase.hs">ReservationUseCase</a> specifies the available use cases for the reservation system. It coordinates access to Effects and the actual domain logic. The module exposes service functions that will be used by the REST API in the ExternalInterfaces layer.</p>
<p>Implemented Use Cases:</p>
<ol type="1">
<li><p>Display the number of available seats for a given day</p></li>
<li><p>Enter a reservation for a given day and keep it persistent. If the reservation can not be served as all seats are occupies provide a functional error message stating the issue.</p></li>
<li><p>Display the list of reservations for a given day.</p></li>
<li><p>Delete a given reservation from the system in case of a cancellation. NO functional error is required if the reservation is not present in the system.</p></li>
<li><p>Display a List of all reservation in the system.</p></li>
</ol>
<p>In the Use Case layer we have left the garden Eden of <em>world agnostic</em> code:</p>
<p>In order to compute the number of available seats for a given day, we will have to first look up the actual reservations for that day from a persistent storage, and only then can we call the domain function <code>availableSeats</code>. In addition we also will have to write a Log message when calling the functions to provide an audit trail.</p>
<p><strong>However, the dependency rule of clean architecture bans all direct access to a database or a logging-infrastructure from the use case layer!</strong></p>
<h3 id="how-can-we-define-such-a-use-case-without-violating-the-dependency-rule">How can we define such a use case without violating the dependency rule?</h3>
<p>Algebraic Effect systems offer a consistent answer: 1. We <strong>declare effects</strong> in the use case layer by defining them as an abstract interface.</p>
<ol start="2" type="1">
<li><p>We also specify the actual <strong>usage of effects</strong> in the use case layer by having calls against the abstract interface.</p></li>
<li><p>We provide an <strong>interpretation</strong> of these effects only in the outer layers. This also allows us to provide different implementations. So we can easily swap backends, e.g. migrating from MySQL to PostgreSQL, and it can be used to provide mock implementations for testing purposes.</p></li>
</ol>
<p>Let’s see how all this looks like when using Polysemy.</p>
<h3 id="usage-of-effects">Usage of effects</h3>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- | compute the number of available seats for a given day. the result must be a natural number, incl. 0</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">availableSeats ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r <span class="dt">Natural</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>availableSeats day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;compute available seats for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>  todaysReservations <span class="ot">&lt;-</span> fetch day</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> Dom.availableSeats maxCapacity todaysReservations</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true"></a><span class="co">-- | fetch the list of reservations for a given day from the key value store.</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true"></a><span class="co">--   If no match is found, an empty list is returned.</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true"></a><span class="ot">fetch ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r [<span class="dt">Dom.Reservation</span>]</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true"></a>fetch day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;fetch reservations for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true"></a>  maybeList <span class="ot">&lt;-</span> getKvs day</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> fromMaybe [] maybeList</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true"></a></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true"></a><span class="co">-- | the maximum capacity of the restaurant.</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true"></a><span class="ot">maxCapacity ::</span> <span class="dt">Natural</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true"></a>maxCapacity <span class="ot">=</span> <span class="dv">20</span></span></code></pre></div>
<p>The type signature of <code>availableSeats</code> contains two constraints on the <em>effect stack</em> type <code>r</code>: <code>(Member Persistence r, Member Trace r)</code> This means that the function may perform two different effects: persistence via the <code>Persistence</code> effect and Logging via the <code>Trace</code> effect.</p>
<p>The type signature also specifies that we need an input of type <code>Day</code> and will return the <code>Natural</code> result wrapped in the <code>Sem r</code> monad.</p>
<p>The <code>Sem</code> monad handles computations of arbitrary extensible effects. A value of type <code>Sem r</code> describes a program with the capabilities of the effect stack <code>r</code>.</p>
<p>The first step of the function body of <code>availableSeats</code> specifies a Log action based on the (Polysemy built-in) <code>Trace</code> effect:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;compute available seats for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span></code></pre></div>
<p>I repeat: <code>trace</code> does not directly do any logging. The actual logging action - the effect interpretation - will be defined in the application assembly or in a test setup.</p>
<p>The next line specifies a lookup of the reservation list for <code>day</code> from the persistence layer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>  todaysReservations <span class="ot">&lt;-</span> fetch day</span></code></pre></div>
<p>where fetch is defined as:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="ot">fetch ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r [<span class="dt">Dom.Reservation</span>]</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>fetch day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;fetch reservations for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>  maybeList <span class="ot">&lt;-</span> getKvs day</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> fromMaybe [] maybeList</span></code></pre></div>
<h3 id="declaration-of-effects">Declaration of effects</h3>
<p>To understand the <code>fetch</code> function, in particular the expression <code>maybeList &lt;- getKvs day</code> we first have to know the definition of the <code>Persistence</code> effect:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Persistence</span> <span class="ot">=</span> <span class="dt">KVS</span> <span class="dt">Day</span> [<span class="dt">Dom.Reservation</span>]</span></code></pre></div>
<p>Where KVS (standing for Key/Value Store) is a type that is also defined in the use case layer (<a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/UseCases/KVS.hs">KVS.hs</a>):</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="co">-- | a key value store specified as a GADT</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">KVS</span> k v m a <span class="kw">where</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="dt">ListAllKvs</span><span class="ot"> ::</span> <span class="dt">KVS</span> k v m [(k, v)]</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="dt">GetKvs</span><span class="ot">     ::</span> k <span class="ot">-&gt;</span> <span class="dt">KVS</span> k v m (<span class="dt">Maybe</span> v)</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>  <span class="dt">InsertKvs</span><span class="ot">  ::</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">KVS</span> k v m ()</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>  <span class="dt">DeleteKvs</span><span class="ot">  ::</span> k <span class="ot">-&gt;</span> <span class="dt">KVS</span> k v m ()</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>makeSem &#39;<span class="dt">&#39;KVS</span></span></code></pre></div>
<p>The four operations of the key value store are defined in the GADT as type constructors. <code>makeSem ''KVS</code> then uses TemplateHaskell to generate effect functions (or smart Constructors) from the GADT definition. This call results in the definition of the following four functions that represent the specific operations of the key value store:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">listAllKvs ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> <span class="dt">Sem</span> r [(k, v)]</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a><span class="ot">getKvs     ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">Maybe</span> v)</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a><span class="ot">insertKvs  ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a><span class="ot">deleteKvs  ::</span> <span class="dt">Member</span> (<span class="dt">KVS</span> k v) r <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span></code></pre></div>
<p>These functions can be used in the <code>Sem</code> Monad. So now we understand much better what is going on in <code>fetch</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">fetch ::</span> (<span class="dt">Member</span> <span class="dt">Persistence</span> r, <span class="dt">Member</span> <span class="dt">Trace</span> r) <span class="ot">=&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r [<span class="dt">Dom.Reservation</span>]</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>fetch day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;fetch reservations for &quot;</span> <span class="op">++</span> <span class="fu">show</span> day</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>  maybeList <span class="ot">&lt;-</span> getKvs day</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>  <span class="fu">return</span> <span class="op">$</span> fromMaybe [] maybeList</span></code></pre></div>
<p>As <code>fetch</code> operates in the <code>Sem</code> monad, <code>maybeList</code> is bound to a <code>Maybe [Dom.Reservation]</code> value, which results from the <code>getKVs day</code> action. The function finally uses <code>fromMaybe</code> to return a list of reservations that were retrieved (or <code>[]</code> in case <code>Nothing</code> was found for <code>day</code>).</p>
<p>Then, back in <code>availableSeats</code> we call the domain logic function <code>Dom.availableSeats</code> to compute the number of available seats. The resulting <code>Natural</code> value is lifted into the <code>Sem r</code> monad, thus matching the signature of the return type <code>Sem r Natural</code>.</p>
<p>In the next diagram I’m depicting the layers Use Cases and Domain. The arrow from Use Cases to Domain represents the dependency rule: use case code may only reference domain logic but the domain logic may not reference anything from the use case layer.</p>
<p>On the left side of the diagram we see the use case controllers (aka <em>use case interactors</em>) like <code>availableSeats</code> that coordinate all activities and resources to fulfill a specific use case.</p>
<p>On the right we see the gateway (or interface) code like the <code>KVS</code> abstraction of a key-value store or the <code>fetch</code> operation that wraps the access to the key-value store.</p>
<figure>
<img src="/img/use-cases.png" alt="" /><figcaption>Use Cases layer</figcaption>
</figure>
<h3 id="interpretation-of-effects-testing">Interpretation of effects / Testing</h3>
<p>The key value store functions like <code>getKvs</code> don’t perform any concrete operation. They just <code>declare</code> access to an abstract key-value store interface.</p>
<p>The concrete interpretation of these calls will be specified in the application assembly (typically in <code>Main.hs</code>) or in the setup code of test cases. If we provide a <em>pure</em> interpretation then the resulting code will also be pure. This allows writing tests in the same pure way as for the domain logic.</p>
<p>As an example, in <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/test/UseCasePureSpec.hs">UseCasePureSpec</a> I’m providing pure interpretations for all effects.</p>
<p>The <code>runPure</code> function takes a program with effects and handles each effect till it gets reduced to <code>Either ReservationError (ReservationMap‚ a)</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="ot">runPure ::</span> <span class="dt">ReservationMap</span> </span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">Sem</span> &#39;[<span class="dt">UC.Persistence</span>, <span class="dt">State</span> <span class="dt">ReservationMap</span>, <span class="dt">Error</span> <span class="dt">UC.ReservationError</span>, <span class="dt">Trace</span>] a </span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a>        <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">UC.ReservationError</span> (<span class="dt">ReservationMap</span>, a)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a>runPure kvsMap program <span class="ot">=</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>  program</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>     <span class="op">&amp;</span> runKvsPure kvsMap              <span class="co">-- run the key-value store on a simple ReservationMap</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a>     <span class="op">&amp;</span> runError <span class="op">@</span><span class="dt">UC.ReservationError</span>  <span class="co">-- run error handling to produce an Either UC.ReservationError (ReservationMap, a)</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>     <span class="op">&amp;</span> ignoreTrace                    <span class="co">-- run Trace by simply ignoring all messages </span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>     <span class="op">&amp;</span> run                            <span class="co">-- run a &#39;Sem&#39; containing no effects as a pure value</span></span></code></pre></div>
<p>In addition to that I’m providing wrapping functions like <code>runAvailableSeats</code> that use <code>runPure</code> to interprete the effects of the use case functions (eg. <code>UC.availableSeats</code>) and extract the actual result from the <code>[Either UC.ReservationError (ReservationMap, a)]</code> return value:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="ot">runAvailableSeats ::</span> <span class="dt">ReservationMap</span> <span class="ot">-&gt;</span> <span class="dt">Day</span> <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>runAvailableSeats kvsMap day <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>  <span class="kw">case</span> runPure kvsMap (UC.availableSeats day) <span class="kw">of</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>    <span class="dt">Right</span> (_, numSeats) <span class="ot">-&gt;</span> numSeats</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    <span class="dt">Left</span> err            <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;availableSeats failed&quot;</span></span></code></pre></div>
<p>This is all that it takes to abstract away persistence layer, logging facility and exception handling. We can now write tests in pure code:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="co">-- setting up test fixtures</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a><span class="ot">initReservations ::</span> <span class="dt">ReservationMap</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a>initReservations <span class="ot">=</span> M.singleton day res</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>day <span class="ot">=</span> <span class="fu">read</span> <span class="st">&quot;2020-05-02&quot;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a>res <span class="ot">=</span> [<span class="dt">Reservation</span> day <span class="st">&quot;Andrew M. Jones&quot;</span> <span class="st">&quot;amjones@example.com&quot;</span> <span class="dv">4</span>]</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a>  describe <span class="st">&quot;Reservation Use Case (only pure code)&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true"></a>  </span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true"></a>    it <span class="st">&quot;computes the number of available seats for a given day&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true"></a>      (runAvailableSeats initReservations day) <span class="ot">`shouldBe`</span> <span class="dv">16</span></span></code></pre></div>
<h2 id="the-interface-adapters-layer">The Interface Adapters layer</h2>
<p>This layer holds code for adapters to external resources like databases, message queues, configuration, Logging, etc.</p>
<p>The Logging effect <code>Trace</code> ships with Polysemy, so we don’t have to implement anything here. (Of course we could overzealously implement our own Graylog adapter here, Hingegen hat unser <code>reservationServer</code> eine Typensignatur but I leave this as an exercise for the reader… )</p>
<p>However, as the <code>KVS</code> type is our own invention we’ll have to provide our own implementations. (We could have used the <code>KVStore</code> type from <a href="https://hackage.haskell.org/package/polysemy-zoo-0.7.0.0/docs/Polysemy-KVStore.html">polysemy-zoo</a>, but for didactic purposes we will roll our own.)</p>
<p>The following code is the in-memory implementation from the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/InterfaceAdapters/KVSInMemory.hs">KVSInMemory</a> module. It defines a key-value store in terms of <code>State (Map k v)</code> that is a <code>Map k v</code> in a <code>State</code> effect context:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="ot">runKvsOnMapState ::</span> ( <span class="dt">Member</span> (<span class="dt">State</span> (<span class="dt">M.Map</span> k v)) r, <span class="dt">Ord</span> k) </span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true"></a>                 <span class="ot">=&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> r) a </span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true"></a>                 <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true"></a>runKvsOnMapState <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true"></a>  <span class="dt">ListAllKvs</span>    <span class="ot">-&gt;</span> <span class="fu">fmap</span> M.toList get</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true"></a>  <span class="dt">GetKvs</span> k      <span class="ot">-&gt;</span> <span class="fu">fmap</span> (M.lookup k) get</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true"></a>  <span class="dt">InsertKvs</span> k v <span class="ot">-&gt;</span> modify <span class="op">$</span> M.insert k v</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true"></a>  <span class="dt">DeleteKvs</span> k   <span class="ot">-&gt;</span> modify <span class="op">$</span> M.delete k</span></code></pre></div>
<p>So whenever the <code>interpret</code> functions detects a <code>GetKvs k</code> value, that was constructed by a call to <code>getKvs k</code> in the use case layer, it pattern-matches it to a <code>Map</code> lookup of <code>k</code> that is executed against state retrieved by <code>get</code>.</p>
<p>Interestingly <code>get</code> is a smart constructor of the <code>State</code> effect. This means that by interpreting the <code>KVS</code> we have created new effects that in turn have to be interpreted.</p>
<p>The <code>runKvsPure</code> functions (which we already have seen in the use case testing) chains interpretation of the effects <code>KVS</code> and <code>State</code> and thus allows us to work with pure Maps as mocks for a key-value store:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="ot">runKvsPure ::</span> <span class="dt">Ord</span> k </span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>           <span class="ot">=&gt;</span> <span class="dt">M.Map</span> k v</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>           <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> <span class="dt">State</span> (<span class="dt">M.Map</span> k v) <span class="op">:</span> r) a </span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>           <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">M.Map</span> k v, a)</span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>runKvsPure <span class="fu">map</span> <span class="ot">=</span> runState <span class="fu">map</span> <span class="op">.</span> runKvsOnMapState</span></code></pre></div>
<h3 id="a-key-value-store-with-a-sqlite-backend.">A key-value store with a SQLite backend.</h3>
<p>As we are in the interface adapters layer, we are allowed to get our hands dirty with <em>real world code</em>, like database access. As an example I have provided a SQLite based interpretation of the <code>KVS</code> effect in <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/InterfaceAdapters/KVSSqlite.hs">KVSSqllite.hs</a>.</p>
<p>The effect interpreting function is <code>runKvsAsSQLite</code>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="co">-- | Run a KVStore effect against a SQLite backend. Requires a Config object as input.</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a><span class="ot">runKvsAsSQLite ::</span> (<span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r, <span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r, <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Show</span> k, <span class="dt">Read</span> k, <span class="dt">ToJSON</span> v, <span class="dt">FromJSON</span> v)</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>                   <span class="ot">=&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> r) a</span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>                   <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true"></a>runKvsAsSQLite <span class="ot">=</span> interpret <span class="op">$</span> \<span class="kw">case</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true"></a>  <span class="dt">GetKvs</span> k      <span class="ot">-&gt;</span> getAction k</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true"></a>  <span class="dt">ListAllKvs</span>    <span class="ot">-&gt;</span> listAction</span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true"></a>  <span class="dt">InsertKvs</span> k v <span class="ot">-&gt;</span> insertAction k v</span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true"></a>  <span class="dt">DeleteKvs</span> k   <span class="ot">-&gt;</span> deleteAction k</span></code></pre></div>
<p>The function’s type signature introduces a two more constraints on the effect stack type <code>r</code>: <code>Member (Embed IO) r</code> and <code>Member (Input Config) r</code>. <code>(Embed IO)</code> is needed as accessing SQLite will require IO, which can be lifted into the <code>Sem r</code> monad with <code>Embed IO</code>.</p>
<p>SQLite always needs a file name to create a database connection. As we want to be able to keep this name configurable, we use the <code>(Input Config)</code> effect. <code>Config</code> is a data type that I created to represent global application configuration, including the database file name. <code>Input</code> is a Polysemy built-in effect which can provide input to an application, quite similar to a <code>Reader</code> monad.</p>
<p>These effects are introduced by the actual implementations of the <code>KVS</code> constructors, like <code>getAction k</code>, which retrieves a value from the database by looking up the key <code>k</code>:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ot">getAction ::</span> (<span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r, <span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r, <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Show</span> k, <span class="dt">Read</span> k, <span class="dt">ToJSON</span> v, <span class="dt">FromJSON</span> v) <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">Maybe</span> v)</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a>getAction key <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a>  conn <span class="ot">&lt;-</span> connectionFrom input</span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true"></a>  rows <span class="ot">&lt;-</span> embed (SQL.queryNamed conn</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true"></a>                      <span class="st">&quot;SELECT key, value FROM store WHERE key = :key&quot;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true"></a>                      [<span class="st">&quot;:key&quot;</span> <span class="op">:=</span> <span class="fu">show</span> key]<span class="ot"> ::</span> <span class="dt">IO</span> [<span class="dt">KeyValueRow</span>])</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true"></a>  trace <span class="op">$</span> <span class="st">&quot;get: &quot;</span> <span class="op">++</span> <span class="fu">show</span> rows</span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true"></a>  <span class="kw">case</span> rows <span class="kw">of</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true"></a>    []                          <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="dt">Nothing</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true"></a>    (<span class="dt">KeyValueRow</span> _key value)<span class="op">:</span>xs <span class="ot">-&gt;</span> <span class="fu">return</span> <span class="op">$</span> (decode <span class="op">.</span> encodeUtf8) value</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true"></a></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true"></a><span class="co">-- | create a connection based on configuration data, make sure table &quot;store&quot; exists.</span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true"></a><span class="ot">connectionFrom ::</span> (<span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r) <span class="ot">=&gt;</span> <span class="dt">Sem</span> r <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r <span class="dt">SQL.Connection</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true"></a>connectionFrom c <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true"></a>  config <span class="ot">&lt;-</span> c</span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true"></a>  embed (getConnection (dbPath config))</span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true"></a>    <span class="kw">where</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true"></a><span class="ot">      getConnection ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">SQL.Connection</span></span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true"></a>      getConnection dbFile <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true"></a>        conn <span class="ot">&lt;-</span> SQL.open dbFile</span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true"></a>        SQL.execute_ conn <span class="st">&quot;CREATE TABLE IF NOT EXISTS store (key TEXT PRIMARY KEY, value TEXT)&quot;</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true"></a>        <span class="fu">return</span> conn</span></code></pre></div>
<p>Let’s have a closer look at what is going on in <code>getAction</code>:</p>
<p>First <code>connectionFrom input</code> is used to create a database connection based on the <code>Config</code> object obtained by <code>input</code> (the smart Constructor of the <code>Input</code> effect). The <code>Config</code> type contains a field <code>dbPath</code> which is read and used to create the connection with <code>getConnection</code>. As this is an IO operation we have to use <code>embed</code> to lift it into the <code>Sem r</code> monad.</p>
<p>In the second step <code>SQL.queryNamed</code> is used to perform the actual select statement against the db connection. Again <code>embed</code> must be used to lift this IO operation.</p>
<p>Finally the resulting <code>[KeyValueRow]</code> list is pattern matched: if the list is empty <code>Nothing</code> is returned. Otherwise <code>Aeson.decode</code> is called to unmarshal a result value from the JSON data retrieved from the database.</p>
<p>The JSON encoding and decoding to and from the DB is the reason for the <code>ToJSON v, FromJSON v</code> constraints on the value type <code>v</code>.</p>
<p>This implementation is inspired by key-value store of <a href="https://haskell-explained.gitlab.io/blog/posts/2019/07/31/polysemy-is-cool-part-2/index.html">a password manager in Polysemy</a>.</p>
<h3 id="declaring-the-rest-api">Declaring the REST API</h3>
<p>Our task was to build the backend for the reservation system. We will have to implement a REST API to allow access to the business logic that we defined in the use case layer.</p>
<p>The overall idea is to provide a REST route for all exposed functions of the <code>ReservationUseCase</code>. The following table shows the mapping of those functions to the REST routes that we want to achieve:</p>
<pre><code>listAll        GET    /reservations
fetch          GET    /reservations/YYYY-MM-DD
tryReservation POST   /reservations
cancel         DELETE /reservations
availableSeats GET    /seats/YYYY-MM-DD</code></pre>
<p>I’m using <a href="http://www.servant.dev/">Servant</a> to define our REST API. The great thing about Servant is that it allows us to define REST APIs in a typesafe manner by using a type level DSL.</p>
<p>Here comes the declaration of our API (please note that we declare our routes to accept and emit data in JSON format):</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="co">-- | in order to allow JSON serialization for the Dom.Reservation type, it must instantiate FromJSON and ToJSON.</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">Dom.Reservation</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Dom.Reservation</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a><span class="co">-- | Declaring the routes of the REST API for Restaurant Reservations</span></span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">ReservationAPI</span> <span class="ot">=</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a>       <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;retrieve a map of all reservations (Day -&gt; [Reservation])&quot;</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Get</span>     &#39;[ <span class="dt">JSON</span>] <span class="dt">Dom.ReservationMap</span> <span class="co">-- GET    /reservations</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;retrieve list of reservations for a given day&quot;</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;day&quot;</span> <span class="dt">Day</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Get</span>     &#39;[ <span class="dt">JSON</span>] [<span class="dt">Dom.Reservation</span>]  <span class="co">-- GET    /reservations/YYYY-MM-DD</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;place a new reservation&quot;</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[ <span class="dt">JSON</span>] <span class="dt">Dom.Reservation</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Post</span>    &#39;[ <span class="dt">JSON</span>] ()                 <span class="co">-- POST   /reservations</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true"></a></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;reservations&quot;</span> <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;cancel a reservation&quot;</span></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[ <span class="dt">JSON</span>] <span class="dt">Dom.Reservation</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Delete</span>  &#39;[ <span class="dt">JSON</span>] ()                 <span class="co">-- DELETE /reservations</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true"></a>                      </span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span> <span class="st">&quot;seats&quot;</span>        <span class="op">:&gt;</span> <span class="dt">Summary</span> <span class="st">&quot;retrieve number of free seats for a given day&quot;</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;day&quot;</span> <span class="dt">Day</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true"></a>                      <span class="op">:&gt;</span> <span class="dt">Get</span>     &#39;[ <span class="dt">JSON</span>] <span class="dt">Natural</span>                <span class="co">-- GET    /seats/YYYY-MM-DD</span></span></code></pre></div>
<p>Next we have to create the connection between the declared routes and the actual business logic. This will be our REST service implementation. In our case we simply delegate to the use case controller functions. Off course, we might also implement additional functionality here like validation:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">UseCases.ReservationUseCase</span> <span class="kw">as</span> <span class="dt">UC</span> </span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a><span class="co">-- | implements the ReservationAPI</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a><span class="ot">reservationServer ::</span> (<span class="dt">Member</span> <span class="dt">UC.Persistence</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">UC.ReservationError</span>) r, </span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a>                      <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r) <span class="ot">=&gt;</span> <span class="dt">ServerT</span> <span class="dt">ReservationAPI</span> (<span class="dt">Sem</span> r)</span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true"></a>reservationServer <span class="ot">=</span></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true"></a>        UC.listAll        <span class="co">-- GET    /reservations</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.fetch          <span class="co">-- GET    /reservations/YYYY-MM-DD</span></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.tryReservation <span class="co">-- POST   /reservations</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.cancel         <span class="co">-- DELETE /reservations</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true"></a>  <span class="op">:&lt;|&gt;</span>  UC.availableSeats <span class="co">-- GET    /seats/YYYY-MM-DD</span></span></code></pre></div>
<p>I really love how <strong>declarative</strong> this code is. <strong>We don’t have to tell how</strong> to exchange data between the REST server and the use case controllers.</p>
<p>We <strong>just tell what we want</strong>: a mapping from the routes to the controller functions. That’s all!</p>
<p>In the following diagram, we now see the third layer. Again, the arrow symbolises the dependency rule, which prohibits access from domain or use case layer to the interface adapters layer. To the right we see the <code>ReservationAPI</code> and its <code>reservationServer</code> implementation, which we just explored. They interact with the use case controller functions like <code>availableSeats</code>, <code>listAll</code>, etc.</p>
<p>To the left we see the interpretations of the <code>KVS</code> effect (which was defined in the use case layer): <code>KVSInMemory</code>, <code>KVSSqlite</code> (and a third one <code>KVSFileServer</code>, a file based implementation which you could <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/InterfaceAdapters/KVSFileServer.hs">explore on your own</a>).</p>
<figure>
<img src="/img/interface-adapters.png" alt="" /><figcaption>Interface Adapters layer</figcaption>
</figure>
<h3 id="testing-the-kvs-implementations">Testing the KVS implementations</h3>
<p>We’ll have a closer look at the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/test/InterfaceAdaptersKVSSQLiteSpec.hs">test of the SQLite implementation</a> of the <code>KVS</code> effect.</p>
<p>As Polysemy effects are involded we will need to provide an interpretation to actually perform the SQLLite operation.</p>
<p>The test setup looks quite similar to the tests in the use case layer.</p>
<p>We want our test to evaluate the KVS implementation independently of the domain logic and the use case layer. Therefore, we first define an example use case, featuring a data type <code>Memo</code> and a set of typical CRUD operations. The CRUD operations are using the <code>KVS</code> smart constructors and thus exhibit the typical Polysemy effect signatures:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="co">-- | a key value table mapping Natural to a list of Strings</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">KeyValueTable</span> <span class="ot">=</span> <span class="dt">KVS</span> <span class="dt">Int</span> [<span class="dt">String</span>]</span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true"></a></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Memo</span> <span class="ot">=</span> <span class="dt">Memo</span> <span class="dt">Int</span> [<span class="dt">String</span>]</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true"></a>    <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true"></a></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true"></a><span class="ot">persistMemo ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r)  <span class="ot">=&gt;</span> <span class="dt">Memo</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true"></a>persistMemo (<span class="dt">Memo</span> <span class="fu">id</span> <span class="fu">lines</span> ) <span class="ot">=</span> insertKvs <span class="fu">id</span> <span class="fu">lines</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true"></a></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true"></a><span class="ot">fetchMemo ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r) <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r (<span class="dt">Maybe</span> [<span class="dt">String</span>])</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true"></a>fetchMemo <span class="ot">=</span> getKvs</span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true"></a></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true"></a><span class="ot">fetchAll ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r) <span class="ot">=&gt;</span> <span class="dt">Sem</span> r (<span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">String</span>])</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true"></a>fetchAll <span class="ot">=</span> <span class="fu">fmap</span> M.fromList listAllKvs</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true"></a></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true"></a><span class="ot">deleteMemo ::</span> (<span class="dt">Member</span> <span class="dt">KeyValueTable</span> r)  <span class="ot">=&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> r ()</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true"></a>deleteMemo <span class="ot">=</span> deleteKvs</span></code></pre></div>
<p>Next we define a set of helper functions that allow us to execute the CRUD operations as ordinary <code>IO ()</code> actions, which we can use in our test code:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="co">-- Helper functions for interpreting all effects in IO</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a><span class="ot">runPersist ::</span> <span class="dt">Memo</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true"></a>runPersist memo <span class="ot">=</span> runAllEffects (persistMemo memo)</span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true"></a></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true"></a><span class="ot">runFetch ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> [<span class="dt">String</span>])</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true"></a>runFetch k <span class="ot">=</span> runAllEffects (fetchMemo k)</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true"></a></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true"></a><span class="ot">runFetchAll ::</span> <span class="dt">IO</span> (<span class="dt">M.Map</span> <span class="dt">Int</span> [<span class="dt">String</span>])</span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true"></a>runFetchAll <span class="ot">=</span> runAllEffects fetchAll</span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true"></a><span class="ot">runDelete ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true"></a>runDelete k <span class="ot">=</span> runAllEffects (deleteMemo k)</span></code></pre></div>
<p>These wrapper function make use of the <code>runAllEffects</code> function that takes a program with effects and handles each effect till it gets reduced to <code>IO a</code>:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a><span class="ot">runAllEffects ::</span> <span class="dt">Sem</span> &#39;[<span class="dt">KeyValueTable</span>, <span class="dt">Input</span> <span class="dt">Config</span>, <span class="dt">Trace</span>, <span class="dt">Embed</span> <span class="dt">IO</span>] a <span class="ot">-&gt;</span> <span class="dt">IO</span> a </span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true"></a>runAllEffects program <span class="ot">=</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true"></a>  program</span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true"></a>    <span class="op">&amp;</span> runKvsAsSQLite       <span class="co">-- use SQLite based interpretation of the (KVS Int [String]) effect</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true"></a>    <span class="op">&amp;</span> runInputConst config <span class="co">-- use the variable config as source for (Input Config) effect</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true"></a>    <span class="op">&amp;</span> ignoreTrace          <span class="co">-- ignore all traces</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true"></a>    <span class="op">&amp;</span> runM                 <span class="co">-- reduce Sem r (Embed IO a) to IO a</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true"></a>  <span class="kw">where</span> config <span class="ot">=</span> <span class="dt">Config</span> {port <span class="ot">=</span> <span class="dv">8080</span>, dbPath <span class="ot">=</span> <span class="st">&quot;kvs-test.db&quot;</span>, backend <span class="ot">=</span> <span class="dt">SQLite</span>, verbose <span class="ot">=</span> <span class="dt">False</span>}</span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true"></a></span>
<span id="cb28-10"><a href="#cb28-10" aria-hidden="true"></a><span class="co">-- errors are rethrown as Runtime errors, which can be verified by HSpec.</span></span>
<span id="cb28-11"><a href="#cb28-11" aria-hidden="true"></a><span class="ot">handleErrors ::</span> <span class="dt">IO</span> (<span class="dt">Either</span> err a) <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb28-12"><a href="#cb28-12" aria-hidden="true"></a>handleErrors e <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb28-13"><a href="#cb28-13" aria-hidden="true"></a>  <span class="fu">either</span> <span class="ot">&lt;-</span> e</span>
<span id="cb28-14"><a href="#cb28-14" aria-hidden="true"></a>  <span class="kw">case</span> <span class="fu">either</span> <span class="kw">of</span></span>
<span id="cb28-15"><a href="#cb28-15" aria-hidden="true"></a>    <span class="dt">Right</span> v <span class="ot">-&gt;</span> <span class="fu">return</span> v</span>
<span id="cb28-16"><a href="#cb28-16" aria-hidden="true"></a>    <span class="dt">Left</span> _  <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;something bad happend&quot;</span></span></code></pre></div>
<p>With these preliminaries at hand we can now write our test cases:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a>key <span class="ot">=</span> <span class="dv">4711</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true"></a>text <span class="ot">=</span> [<span class="st">&quot;In the morning&quot;</span>, <span class="st">&quot;I don&#39;t drink coffee&quot;</span>, <span class="st">&quot;But lots of curcuma chai.&quot;</span>]</span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true"></a>memo <span class="ot">=</span> <span class="dt">Memo</span> key text</span>
<span id="cb29-4"><a href="#cb29-4" aria-hidden="true"></a></span>
<span id="cb29-5"><a href="#cb29-5" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb29-6"><a href="#cb29-6" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb29-7"><a href="#cb29-7" aria-hidden="true"></a>  describe <span class="st">&quot;The KV Store SQLite Implementation&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-8"><a href="#cb29-8" aria-hidden="true"></a>    it <span class="st">&quot;returns Nothing if nothing can be found for a given id&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-9"><a href="#cb29-9" aria-hidden="true"></a>      maybeMatch <span class="ot">&lt;-</span> runFetch key</span>
<span id="cb29-10"><a href="#cb29-10" aria-hidden="true"></a>      maybeMatch <span class="ot">`shouldBe`</span> <span class="dt">Nothing</span></span>
<span id="cb29-11"><a href="#cb29-11" aria-hidden="true"></a></span>
<span id="cb29-12"><a href="#cb29-12" aria-hidden="true"></a>    it <span class="st">&quot;persists a key-value pair to the SQLite database&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-13"><a href="#cb29-13" aria-hidden="true"></a>      runPersist memo</span>
<span id="cb29-14"><a href="#cb29-14" aria-hidden="true"></a>      maybeMatch <span class="ot">&lt;-</span> runFetch key</span>
<span id="cb29-15"><a href="#cb29-15" aria-hidden="true"></a>      maybeMatch <span class="ot">`shouldBe`</span> <span class="dt">Just</span> text</span>
<span id="cb29-16"><a href="#cb29-16" aria-hidden="true"></a></span>
<span id="cb29-17"><a href="#cb29-17" aria-hidden="true"></a>    it <span class="st">&quot;fetches a Map of all key-value entries from the KV store&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-18"><a href="#cb29-18" aria-hidden="true"></a>      <span class="fu">map</span> <span class="ot">&lt;-</span> runFetchAll</span>
<span id="cb29-19"><a href="#cb29-19" aria-hidden="true"></a>      M.size <span class="fu">map</span> <span class="ot">`shouldBe`</span> <span class="dv">1</span></span>
<span id="cb29-20"><a href="#cb29-20" aria-hidden="true"></a></span>
<span id="cb29-21"><a href="#cb29-21" aria-hidden="true"></a>    it <span class="st">&quot;deletes an entry from the key value store&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb29-22"><a href="#cb29-22" aria-hidden="true"></a>      runDelete key</span>
<span id="cb29-23"><a href="#cb29-23" aria-hidden="true"></a>      maybeMatch <span class="ot">&lt;-</span> runFetch key</span>
<span id="cb29-24"><a href="#cb29-24" aria-hidden="true"></a>      maybeMatch <span class="ot">`shouldBe`</span> <span class="dt">Nothing</span></span></code></pre></div>
<h3 id="testing-the-rest-api">Testing the REST API</h3>
<p>The actual code for testing the REST API looks pretty straightforward. We create a <a href="https://hackage.haskell.org/package/wai">WAI</a> <code>Application</code> instance with <code>createApp</code> and execute REST operations like <code>get</code> and <code>postJSON</code> against it:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true"></a><span class="ot">reservationData ::</span> <span class="dt">LB.ByteString</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true"></a>reservationData <span class="ot">=</span> <span class="st">&quot;{\&quot;email\&quot;:\&quot;amjones@example.com\&quot;,\&quot;quantity\&quot;:10,\&quot;date\&quot;:\&quot;2020-05-02\&quot;,\&quot;name\&quot;:\&quot;Amelia Jones\&quot;}&quot;</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true"></a></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true"></a>postJSON   path <span class="ot">=</span> request methodPost   path [(hContentType, <span class="st">&quot;application/json&quot;</span>)]</span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true"></a>deleteJSON path <span class="ot">=</span> request methodDelete path [(hContentType, <span class="st">&quot;application/json&quot;</span>)]</span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true"></a></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true"></a>  with (createApp) <span class="op">$</span></span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true"></a>    describe <span class="st">&quot;Rest Service&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a call GET /reservations &quot;</span> <span class="op">$</span></span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true"></a>        get <span class="st">&quot;/reservations&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;{\&quot;2020-05-02\&quot;:[{\&quot;email\&quot;:\&quot;amjones@example.com\&quot;,\&quot;quantity\&quot;:4,\&quot;date\&quot;:\&quot;2020-05-02\&quot;,\&quot;name\&quot;:\&quot;Andrew M. Jones\&quot;}]}&quot;</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid POST /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb30-14"><a href="#cb30-14" aria-hidden="true"></a>        postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span>
<span id="cb30-15"><a href="#cb30-15" aria-hidden="true"></a>      it <span class="st">&quot;responds with 412 if a reservation can not be done on a given day&quot;</span> <span class="op">$</span></span>
<span id="cb30-16"><a href="#cb30-16" aria-hidden="true"></a>        (postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="op">&gt;&gt;</span> postJSON <span class="st">&quot;/reservations&quot;</span> reservationData) <span class="ot">`shouldRespondWith`</span> <span class="dv">412</span></span>
<span id="cb30-17"><a href="#cb30-17" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid DELETE /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb30-18"><a href="#cb30-18" aria-hidden="true"></a>        deleteJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span></code></pre></div>
<p>Please note that these tests don’t need a deployment of the WAI application to a web server. ALl testing can be done within a single process. We stick to the dependency rule not to use anything from a more outward layer.</p>
<p>The interesting part is the creation of the <code>Application</code> instance.</p>
<p>If we had a simple implementation <code>myServer</code> of a REST API <code>myApi</code>, not using any Polysemy effects, we could create an <code>Application</code> instance like so:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="ot">createSimpleApp ::</span> <span class="dt">Application</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a>createSimpleApp <span class="op">::=</span> serve myApi myServer</span></code></pre></div>
<p>In contrast, our <code>reservationServer</code> has a type signature that contains Polysemy effects:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true"></a><span class="ot">reservationServer ::</span> (<span class="dt">Member</span> <span class="dt">UC.Persistence</span> r, <span class="dt">Member</span> (<span class="dt">Error</span> <span class="dt">UC.ReservationError</span>) r, </span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true"></a>                      <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r) <span class="ot">=&gt;</span> <span class="dt">ServerT</span> <span class="dt">ReservationAPI</span> (<span class="dt">Sem</span> r)</span></code></pre></div>
<p>Instead of building the <code>Application</code> instance directly, as in the simple example, we use <code>liftServer</code> to lift <code>reservationServer</code> into the required <code>ServerT ReservationAPI Handler</code> type by running all effects and by lifting the business logic exception <code>ReservationNotPossible</code> into a Servant <code>ServerError</code>. This time we also use the SQLite based interpretation of the <code>KVS</code> effect:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true"></a><span class="ot">createApp ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Application</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true"></a>createApp config <span class="ot">=</span> <span class="fu">return</span> <span class="op">$</span> serve reservationAPI (liftServer config)</span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true"></a></span>
<span id="cb33-4"><a href="#cb33-4" aria-hidden="true"></a><span class="ot">liftServer ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">ServerT</span> <span class="dt">ReservationAPI</span> <span class="dt">Handler</span></span>
<span id="cb33-5"><a href="#cb33-5" aria-hidden="true"></a>liftServer config <span class="ot">=</span> hoistServer reservationAPI (interpretServer config) reservationServer</span>
<span id="cb33-6"><a href="#cb33-6" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb33-7"><a href="#cb33-7" aria-hidden="true"></a>    interpretServer config sem <span class="ot">=</span></span>
<span id="cb33-8"><a href="#cb33-8" aria-hidden="true"></a>      sem</span>
<span id="cb33-9"><a href="#cb33-9" aria-hidden="true"></a>        <span class="op">&amp;</span> runKvsAsSQLite</span>
<span id="cb33-10"><a href="#cb33-10" aria-hidden="true"></a>        <span class="op">&amp;</span> runInputConst config</span>
<span id="cb33-11"><a href="#cb33-11" aria-hidden="true"></a>        <span class="op">&amp;</span> runError <span class="op">@</span><span class="dt">ReservationError</span></span>
<span id="cb33-12"><a href="#cb33-12" aria-hidden="true"></a>        <span class="op">&amp;</span> ignoreTrace</span>
<span id="cb33-13"><a href="#cb33-13" aria-hidden="true"></a>        <span class="op">&amp;</span> runM</span>
<span id="cb33-14"><a href="#cb33-14" aria-hidden="true"></a>        <span class="op">&amp;</span> liftToHandler</span>
<span id="cb33-15"><a href="#cb33-15" aria-hidden="true"></a>    liftToHandler <span class="ot">=</span> <span class="dt">Handler</span> <span class="op">.</span> <span class="dt">ExceptT</span> <span class="op">.</span> (<span class="fu">fmap</span> handleErrors)</span>
<span id="cb33-16"><a href="#cb33-16" aria-hidden="true"></a>    handleErrors (<span class="dt">Left</span> (<span class="dt">ReservationNotPossible</span> msg)) <span class="ot">=</span> <span class="dt">Left</span> err412 {errBody <span class="ot">=</span> <span class="fu">pack</span> msg}</span>
<span id="cb33-17"><a href="#cb33-17" aria-hidden="true"></a>    handleErrors (<span class="dt">Right</span> value) <span class="ot">=</span> <span class="dt">Right</span> value</span></code></pre></div>
<h2 id="the-external-interfaces-layer">The External Interfaces layer</h2>
<blockquote>
<p>The outermost layer is generally composed of frameworks and tools such as the Database, the Web Framework, etc. Generally you don’t write much code in this layer other than glue code that communicates to the next circle inwards.</p>
<p>This layer is where all the details go. The Web is a detail. The database is a detail. We keep these things on the outside where they can do little harm.</p>
<p>Quoted from <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>For the database we are already finished as the <a href="https://hackage.haskell.org/package/sqlite-simple">SQlite-Simple</a> library includes the SQLLite C runtime library and is thus self-contained.</p>
<p>We will use <a href="http://www.aosabook.org/en/posa/warp.html">WARP</a> as our Web Server, which can be used as a library within our <code>Main</code> program. What we still have to do though, is to assemble a Servant web <code>Application</code> so that it can be executed on the warp server.</p>
<p>We have done this step already for the testing of the REST service. The <code>createApp</code> function that we define in the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/src/ExternalInterfaces/ApplicationAssembly.hs">ApplicationAssembly module</a> will look quite familiar, it just provides some more bells and whistles to integrate all the features that we have developed so far.</p>
<ul>
<li><code>createApp</code> accepts a <code>Config</code> parameter which is used to configure application settings.</li>
<li><code>selectKvsBackend</code> selects the concrete <code>KVS</code> interpretation.</li>
<li><code>selectTraceVerbosity</code> selects the <code>Trace</code> interpretation:</li>
</ul>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="co">-- | creates the WAI Application that can be executed by Warp.run.</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a><span class="ot">createApp ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Application</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true"></a>createApp config <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true"></a>  <span class="fu">return</span> (serve reservationAPI <span class="op">$</span> hoistServer reservationAPI (interpretServer config) reservationServer)</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb34-6"><a href="#cb34-6" aria-hidden="true"></a>    interpretServer config sem  <span class="ot">=</span>  sem</span>
<span id="cb34-7"><a href="#cb34-7" aria-hidden="true"></a>      <span class="op">&amp;</span> selectKvsBackend config</span>
<span id="cb34-8"><a href="#cb34-8" aria-hidden="true"></a>      <span class="op">&amp;</span> runInputConst config</span>
<span id="cb34-9"><a href="#cb34-9" aria-hidden="true"></a>      <span class="op">&amp;</span> runError <span class="op">@</span><span class="dt">ReservationError</span></span>
<span id="cb34-10"><a href="#cb34-10" aria-hidden="true"></a>      <span class="op">&amp;</span> selectTraceVerbosity config</span>
<span id="cb34-11"><a href="#cb34-11" aria-hidden="true"></a>      <span class="op">&amp;</span> runM</span>
<span id="cb34-12"><a href="#cb34-12" aria-hidden="true"></a>      <span class="op">&amp;</span> liftToHandler</span>
<span id="cb34-13"><a href="#cb34-13" aria-hidden="true"></a>    liftToHandler <span class="ot">=</span> <span class="dt">Handler</span> <span class="op">.</span> <span class="dt">ExceptT</span> <span class="op">.</span> (<span class="fu">fmap</span> handleErrors)</span>
<span id="cb34-14"><a href="#cb34-14" aria-hidden="true"></a>    handleErrors (<span class="dt">Left</span> (<span class="dt">ReservationNotPossible</span> msg)) <span class="ot">=</span> <span class="dt">Left</span> err412 { errBody <span class="ot">=</span> <span class="fu">pack</span> msg}</span>
<span id="cb34-15"><a href="#cb34-15" aria-hidden="true"></a>    handleErrors (<span class="dt">Right</span> value) <span class="ot">=</span> <span class="dt">Right</span> value</span>
<span id="cb34-16"><a href="#cb34-16" aria-hidden="true"></a></span>
<span id="cb34-17"><a href="#cb34-17" aria-hidden="true"></a><span class="co">-- | can select between SQLite or FileServer persistence backends.</span></span>
<span id="cb34-18"><a href="#cb34-18" aria-hidden="true"></a><span class="ot">selectKvsBackend ::</span> (<span class="dt">Member</span> (<span class="dt">Input</span> <span class="dt">Config</span>) r, <span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r, <span class="dt">Member</span> <span class="dt">Trace</span> r, <span class="dt">Show</span> k, <span class="dt">Read</span> k, <span class="dt">ToJSON</span> v, <span class="dt">FromJSON</span> v)</span>
<span id="cb34-19"><a href="#cb34-19" aria-hidden="true"></a>                 <span class="ot">=&gt;</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">Sem</span> (<span class="dt">KVS</span> k v <span class="op">:</span> r) a <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a</span>
<span id="cb34-20"><a href="#cb34-20" aria-hidden="true"></a>selectKvsBackend config <span class="ot">=</span> <span class="kw">case</span> backend config <span class="kw">of</span></span>
<span id="cb34-21"><a href="#cb34-21" aria-hidden="true"></a>  <span class="dt">SQLite</span>     <span class="ot">-&gt;</span> runKvsAsSQLite</span>
<span id="cb34-22"><a href="#cb34-22" aria-hidden="true"></a>  <span class="dt">FileServer</span> <span class="ot">-&gt;</span> runKvsAsFileServer</span>
<span id="cb34-23"><a href="#cb34-23" aria-hidden="true"></a>  <span class="dt">InMemory</span>   <span class="ot">-&gt;</span> <span class="fu">error</span> <span class="st">&quot;not supported&quot;</span></span>
<span id="cb34-24"><a href="#cb34-24" aria-hidden="true"></a></span>
<span id="cb34-25"><a href="#cb34-25" aria-hidden="true"></a><span class="co">-- | if the config flag verbose is set to True, trace to Console, else ignore all trace messages</span></span>
<span id="cb34-26"><a href="#cb34-26" aria-hidden="true"></a><span class="ot">selectTraceVerbosity ::</span> (<span class="dt">Member</span> (<span class="dt">Embed</span> <span class="dt">IO</span>) r) <span class="ot">=&gt;</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> (<span class="dt">Sem</span> (<span class="dt">Trace</span> <span class="op">:</span> r) a <span class="ot">-&gt;</span> <span class="dt">Sem</span> r a)</span>
<span id="cb34-27"><a href="#cb34-27" aria-hidden="true"></a>selectTraceVerbosity config <span class="ot">=</span></span>
<span id="cb34-28"><a href="#cb34-28" aria-hidden="true"></a>  <span class="kw">if</span> verbose config</span>
<span id="cb34-29"><a href="#cb34-29" aria-hidden="true"></a>    <span class="kw">then</span> traceToIO</span>
<span id="cb34-30"><a href="#cb34-30" aria-hidden="true"></a>    <span class="kw">else</span> ignoreTrace</span></code></pre></div>
<p>The application assembly also features a function to load a <code>Config</code> instance. Typically, this would involve loading a configuration file or reading command line arguments. We take a shortcut here and just provide a static instance:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true"></a><span class="co">-- | load application config. In real life, this would load a config file or read commandline args.</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true"></a><span class="ot">loadConfig ::</span> <span class="dt">IO</span> <span class="dt">Config</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true"></a>loadConfig <span class="ot">=</span> <span class="fu">return</span> <span class="dt">Config</span> {port <span class="ot">=</span> <span class="dv">8080</span>, backend <span class="ot">=</span> <span class="dt">SQLite</span>, dbPath <span class="ot">=</span> <span class="st">&quot;kvs.db&quot;</span>, verbose <span class="ot">=</span> <span class="dt">True</span>}</span></code></pre></div>
<p>With the whole application assembly written as library code, there is not much left to do in the <code>Main</code> module:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">ExternalInterfaces.ApplicationAssembly</span> (createApp, loadConfig)</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">InterfaceAdapters.Config</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true"></a><span class="kw">import</span>           <span class="dt">Network.Wai.Handler.Warp</span>               (run)</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true"></a></span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true"></a>  config <span class="ot">&lt;-</span> loadConfig</span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true"></a>  app    <span class="ot">&lt;-</span> createApp config</span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true"></a>  <span class="fu">putStrLn</span> <span class="op">$</span> <span class="st">&quot;Starting server on port &quot;</span> <span class="op">++</span> <span class="fu">show</span> (port config)</span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true"></a>  run (port config) app</span></code></pre></div>
<p>The following diagram shows the elements added by the External Interface layer: - On the left we have application assembly code like <code>createApp</code> used by the <code>Warp</code> server or some of the different <code>runPure</code> functions that we used in HSpec tests. - On the right we have the SQLite runtime library that provides access to the SQLite database and the Haskell runtime in general, which provides access to the filesystem and the OS in general.</p>
<figure>
<img src="/img/clean-architecture.png" alt="" /><figcaption>External Interfaces layer</figcaption>
</figure>
<h3 id="testing-1">Testing</h3>
<p>Testing the application assembly is quite straightforward and resembles the testing of the REST service:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true"></a><span class="ot">loadConfig ::</span> <span class="dt">IO</span> <span class="dt">Config</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true"></a>loadConfig <span class="ot">=</span> <span class="fu">return</span> <span class="dt">Config</span> {port <span class="ot">=</span> <span class="dv">8080</span>, backend <span class="ot">=</span> <span class="dt">SQLite</span>, dbPath <span class="ot">=</span> <span class="st">&quot;kvs-assembly.db&quot;</span>, verbose <span class="ot">=</span> <span class="dt">False</span>}</span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true"></a></span>
<span id="cb37-4"><a href="#cb37-4" aria-hidden="true"></a><span class="ot">spec ::</span> <span class="dt">Spec</span></span>
<span id="cb37-5"><a href="#cb37-5" aria-hidden="true"></a>spec <span class="ot">=</span></span>
<span id="cb37-6"><a href="#cb37-6" aria-hidden="true"></a>  with (loadConfig <span class="op">&gt;&gt;=</span> createApp) <span class="op">$</span></span>
<span id="cb37-7"><a href="#cb37-7" aria-hidden="true"></a>    describe <span class="st">&quot;Rest Service&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb37-8"><a href="#cb37-8" aria-hidden="true"></a></span>
<span id="cb37-9"><a href="#cb37-9" aria-hidden="true"></a>      it <span class="st">&quot;responds with 20 for a first call to GET /seats/YYYY-MM-DD&quot;</span> <span class="op">$</span></span>
<span id="cb37-10"><a href="#cb37-10" aria-hidden="true"></a>        get <span class="st">&quot;/seats/2020-05-02&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;20&quot;</span></span>
<span id="cb37-11"><a href="#cb37-11" aria-hidden="true"></a></span>
<span id="cb37-12"><a href="#cb37-12" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid POST /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb37-13"><a href="#cb37-13" aria-hidden="true"></a>        postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span>
<span id="cb37-14"><a href="#cb37-14" aria-hidden="true"></a></span>
<span id="cb37-15"><a href="#cb37-15" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a call GET /reservations &quot;</span> <span class="op">$</span></span>
<span id="cb37-16"><a href="#cb37-16" aria-hidden="true"></a>        get <span class="st">&quot;/reservations&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;{\&quot;2020-05-02\&quot;:[{\&quot;email\&quot;:\&quot;amjones@example.com\&quot;,\&quot;quantity\&quot;:12,\&quot;date\&quot;:\&quot;2020-05-02\&quot;,\&quot;name\&quot;:\&quot;Amelia Jones\&quot;}]}&quot;</span></span>
<span id="cb37-17"><a href="#cb37-17" aria-hidden="true"></a></span>
<span id="cb37-18"><a href="#cb37-18" aria-hidden="true"></a>      it <span class="st">&quot;responds with 412 if a reservation can not be done on a given day&quot;</span> <span class="op">$</span></span>
<span id="cb37-19"><a href="#cb37-19" aria-hidden="true"></a>        (postJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="op">&gt;&gt;</span> postJSON <span class="st">&quot;/reservations&quot;</span> reservationData) <span class="ot">`shouldRespondWith`</span> <span class="dv">412</span></span>
<span id="cb37-20"><a href="#cb37-20" aria-hidden="true"></a></span>
<span id="cb37-21"><a href="#cb37-21" aria-hidden="true"></a>      it <span class="st">&quot;responds with 20 for a first call to GET /seats/YYYY-MM-DD&quot;</span> <span class="op">$</span></span>
<span id="cb37-22"><a href="#cb37-22" aria-hidden="true"></a>        get <span class="st">&quot;/seats/2020-05-02&quot;</span> <span class="ot">`shouldRespondWith`</span> <span class="st">&quot;8&quot;</span></span>
<span id="cb37-23"><a href="#cb37-23" aria-hidden="true"></a></span>
<span id="cb37-24"><a href="#cb37-24" aria-hidden="true"></a>      it <span class="st">&quot;responds with 200 for a valid DELETE /reservations&quot;</span> <span class="op">$</span></span>
<span id="cb37-25"><a href="#cb37-25" aria-hidden="true"></a>        deleteJSON <span class="st">&quot;/reservations&quot;</span> reservationData <span class="ot">`shouldRespondWith`</span> <span class="dv">200</span></span></code></pre></div>
<h2 id="swagger-documentation">Swagger Documentation</h2>
<p>For all those who have been patient enough to stay with me until here, I now have a little bonus.</p>
<p>There is a <a href="https://github.com/haskell-servant/servant-swagger-ui">servant-swagger-ui addon</a> available which allows to serve a <a href="https://swagger.io/tools/swagger-ui/">SwaggerDoc UI</a> for any Servant API. This UI renders an automatically generated documentation of our Reservation API and even allows to test all API operations directly.</p>
<p>You can launch it by executing <code>stack build --exec PolysemyCleanArchitecture</code> in the root folder of the project.</p>
<p>This will launch the REST service and open up the Swagger UI in your Web browser:</p>
<figure>
<img src="/img/swaggerUI.png" alt="" /><figcaption>Swagger UI</figcaption>
</figure>
<p>The code for this goody can be found in the <a href="https://github.com/thma/PolysemyCleanArchitecture/tree/master/app/SwaggerUI.hs">SwaggerUI</a> module.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Robert C. Martin concludes his blog post with a brief summary:</p>
<blockquote>
<p>Conforming to these simple rules is not hard, and will save you a lot of headaches going forward. By separating the software into layers, and conforming to The Dependency Rule, you will create a system that is <strong>intrinsically testable</strong>, with all the benefits that implies. When any of the external parts of the system become obsolete, like the database, or the web framework, you can <strong>replace those obsolete elements with a minimum of fuss</strong>.</p>
<p>Quoted from the <a href="https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture blog post</a></p>
</blockquote>
<p>I have emphasized the testability aspect quite a lot in this article. However, this approach allows switching freely between alternative backends in production environments as well.</p>
<p>As we have seen Polysemy — or algebraic effect systems in general — make this possible by the separation of effect <em>declaration</em>, effect <em>usage</em> and effect <em>interpretation</em>.</p>
<p>Furthermore, Polysemy also allows you to freely combine several effects. This is a huge gain in software composability.</p>
]]></summary>
</entry>
<entry>
    <title>Proof of functor laws for Maybe</title>
    <link href="https://thma.github.io//posts/2020-04-17-maybe-functor-law-proof.html" />
    <id>https://thma.github.io//posts/2020-04-17-maybe-functor-law-proof.html</id>
    <published>2020-04-17T00:00:00Z</published>
    <updated>2020-04-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on April 17, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p>In this post I want to give a short example of how equational reasoning can be used to proof certain properties of a given piece of code in Haskell.</p>
<p>So without further ado let’s begin:</p>
<h2 id="known-facts">Known facts</h2>
<p>The <code>Functor</code> instance declaration of the type <code>Maybe</code> is defined as:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">instance</span>  <span class="dt">Functor</span> <span class="dt">Maybe</span>  <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="fu">fmap</span> _ <span class="dt">Nothing</span>       <span class="ot">=</span> <span class="dt">Nothing</span>       <span class="co">-- (1)</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    <span class="fu">fmap</span> f (<span class="dt">Just</span> a)      <span class="ot">=</span> <span class="dt">Just</span> (f a)    <span class="co">-- (2)</span></span></code></pre></div>
<p>The composition operator <code>(.)</code> is defined as:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>f <span class="op">.</span> g x <span class="ot">=</span> f (g x)                        <span class="co">-- (3)</span></span></code></pre></div>
<p>The Identity function <code>id</code> is defined as:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="fu">id</span><span class="ot"> ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="fu">id</span> x <span class="ot">=</span>  x                                <span class="co">-- (4)</span></span></code></pre></div>
<h2 id="claim">Claim</h2>
<p>The claim is that <code>Maybe</code> fulfils the two functor laws:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="dv">1</span><span class="op">.:</span> <span class="fu">fmap</span> <span class="fu">id</span> <span class="ot">=</span> <span class="fu">id</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="dv">2</span><span class="op">.:</span> <span class="fu">fmap</span> (f <span class="op">.</span> g) <span class="ot">=</span> (<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g)</span></code></pre></div>
<h2 id="proof-of-the-first-law">Proof of the first law</h2>
<p><strong>Claim:</strong> <code>fmap id m = id m</code>, for any <code>m</code> of type <code>Maybe a</code>.</p>
<p><strong>Proof.</strong> On cases of <code>m</code>.</p>
<p><em>Case 1:</em> <code>m = Nothing</code>.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="fu">fmap</span> <span class="fu">id</span> m <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">id</span> <span class="dt">Nothing</span> <span class="co">-- by expansion of m</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>          <span class="ot">=</span> <span class="dt">Nothing</span>         <span class="co">-- by applying equation (1)</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>          <span class="ot">=</span> <span class="fu">id</span> m            <span class="co">-- by definition m, by applying equation (4)</span></span></code></pre></div>
<p><em>Case 2:</em> <code>m = Just a</code>.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="fu">fmap</span> <span class="fu">id</span> m <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">id</span> (<span class="dt">Just</span> a) <span class="co">-- by expansion of m</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>          <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">id</span> a)      <span class="co">-- by applying equation (2)</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>          <span class="ot">=</span> <span class="dt">Just</span> a           <span class="co">-- by expansion of id (equation (4))</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>          <span class="ot">=</span> m                <span class="co">-- by definition of m</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>          <span class="ot">=</span> <span class="fu">id</span> m             <span class="co">-- by applying equation (4)</span></span></code></pre></div>
<p>Therefore, <code>fmap id m = id m</code> in all cases.∎</p>
<h2 id="proof-of-the-second-law">Proof of the second law</h2>
<p><strong>Claim:</strong> <code>fmap (f . g) m = (fmap f . fmap g) m</code>, for any <code>m</code> of type <code>Maybe a</code>.</p>
<p><strong>Proof.</strong> On cases of <code>m</code>.</p>
<p><em>Case 1:</em> <code>m = Nothing</code>.</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) m      <span class="ot">=</span> <span class="fu">fmap</span> (f <span class="op">.</span> g) <span class="dt">Nothing</span>    <span class="co">-- by expansion of m</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Nothing</span>                 <span class="co">-- by applying equation (1)</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>(<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g) m <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="fu">fmap</span> g <span class="dt">Nothing</span>) <span class="co">-- by applying equation (4) and expanding m</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="fu">fmap</span> f <span class="dt">Nothing</span>          <span class="co">-- by applying equation (1)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Nothing</span>                 <span class="co">-- by applying equation (1)</span></span></code></pre></div>
<p><em>Case 2:</em> <code>m = Just a</code>.</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="fu">fmap</span> (f <span class="op">.</span> g) m      <span class="ot">=</span> <span class="fu">fmap</span> (f <span class="op">.</span> g) (<span class="dt">Just</span> a)    <span class="co">-- by expansion of m</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Just</span> ((f <span class="op">.</span> g) a)         <span class="co">-- by applying equation (2)</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>(<span class="fu">fmap</span> f <span class="op">.</span> <span class="fu">fmap</span> g) m <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="fu">fmap</span> g (<span class="dt">Just</span> a)) <span class="co">-- by applying equation (4) and expanding m</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="fu">fmap</span> f (<span class="dt">Just</span> (g a))      <span class="co">-- by applying equation (2)</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Just</span> (f (g a)            <span class="co">-- by applying equation (2)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true"></a>                    <span class="ot">=</span> <span class="dt">Just</span> ((f <span class="op">.</span> g) a)         <span class="co">-- by applying equation (3)</span></span></code></pre></div>
<p>Therefore, <code>fmap (f . g) m = (fmap f . fmap g) m</code> in all cases. ∎</p>
<h2 id="conclusion">Conclusion</h2>
<p>You’ll see this kind of reasoning quite a lot in Haskell documentation and online discussions. The simple reason is: if you can prove something you don’t have to test it.</p>
]]></summary>
</entry>
<entry>
    <title>Why Haskell Matters</title>
    <link href="https://thma.github.io//posts/2020-04-01-why-haskell-matters.html" />
    <id>https://thma.github.io//posts/2020-04-01-why-haskell-matters.html</id>
    <published>2020-04-01T00:00:00Z</published>
    <updated>2020-04-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on April  1, 2020
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<h2 id="abstract">Abstract</h2>
<blockquote>
<p>With Haskell, you don’t solve different problems. But you solve them differently.</p>
</blockquote>
<p>In this article I try to explain why Haskell keeps being such an important language by presenting some of its most important and distinguishing features and detailing them with working code examples.</p>
<p>The presentation aims to be self-contained and does not require any previous knowledge of the language.</p>
<p>The target audience are Haskell freshmen and developers with a background in non-functional languages who are eager to learn about concepts of functional programming and Haskell in particular.</p>
<h2 id="table-of-contents">Table of contents</h2>
<ul>
<li><a href="#introduction">Introduction</a></li>
<li><a href="#functions-are-first-class">Functions are first class</a>
<ul>
<li><a href="#functions-can-be-assigned-to-variables-exactly-as-any-other-values">Functions can be assigned to variables exactly as any other values</a></li>
<li><a href="#support-for-anonymous-functions">Support for anonymous functions</a></li>
<li><a href="#functions-can-be-returned-as-values-from-other-functions">Functions can be returned as values from other functions</a>
<ul>
<li><a href="#function-composition">Function composition</a></li>
<li><a href="#currying-and-Partial-Application">Currying and Partial Application</a></li>
</ul></li>
<li><a href="#functions-can-be-passed-as-arguments-to-other-functions">Functions can be passed as arguments to other functions</a></li>
</ul></li>
<li><a href="#pattern-matching">Pattern matching</a></li>
<li><a href="#algebraic-data-types">Algebraic Data Types</a></li>
<li><a href="#polymorphic-data-types">Polymorphic Data Types</a>
<ul>
<li><a href="#lists">Lists</a>
<ul>
<li><a href="#arithmetic-sequences">Arithmetic sequences</a></li>
</ul></li>
</ul></li>
<li><a href="#immutability">Immutability</a></li>
<li><a href="#declarative-programming">Declarative programming</a>
<ul>
<li><a href="#mapping">Mapping</a></li>
<li><a href="#folding">Folding</a></li>
</ul></li>
<li><a href="#non-strict-evaluation">Non-strict Evaluation</a>
<ul>
<li><a href="#avoid-endless-loops">Avoid endless loops</a></li>
<li><a href="#define-potentially-infinite-data-structures">Define potentially infinite data structures</a></li>
<li><a href="#list-comprehension">List comprehension</a></li>
<li><a href="#define-control-flow-structures-as-abstractions">Define control flow structures as abstractions</a></li>
</ul></li>
<li><a href="#type-classes">Type Classes</a>
<ul>
<li><a href="#read-and-show">Read and Show</a></li>
<li><a href="#functor-and-foldable">Functor and Foldable</a>
<ul>
<li><a href="#functor">Functor</a></li>
<li><a href="#foldable">Foldable</a></li>
</ul></li>
<li><a href="#the-maybe-monad">The Maybe Monad</a>
<ul>
<li><a href="#total-functions">Total Functions</a></li>
<li><a href="#composition-of-maybe-operations">Composition of Maybe operations</a></li>
</ul></li>
<li><a href="#purity">Purity</a><br />
</li>
<li><a href="#explicit-side-effects-with-the-io-monad">Explicit side effects with the IO Monad</a></li>
</ul></li>
<li><a href="#conclusion">Conclusion</a></li>
</ul>
<h2 id="introduction">Introduction</h2>
<p>Exactly thirty years ago, on April 1st 1990, a small group of researchers in the field of non-strict functional programming published the original Haskell language report.</p>
<p>Haskell never became one of the most popular languages in the software industry or part of the mainstream, but it has been and still is quite influential in the software development community.</p>
<p>In this article I try to explain why Haskell keeps being such an important language by presenting some of its most distinguishing features and detailing them with working code examples.</p>
<p>The presentation aims to be self-contained and does not require any previous knowledge of the language. I will also try to keep the learning curve moderate and to limit the scope of the presentation; nevertheless this article is by no means a complete introduction to the language.</p>
<p>(If you are looking for thorough tutorials have a look at <a href="https://en.wikibooks.org/wiki/Haskell">Haskell Wikibook</a> or <a href="http://www.learnyouahaskell.com/.">Learn You a Haskell</a></p>
<p>Before diving directly into the technical details I’d like to first have a closer look on the reception of Haskell in the software developers community:</p>
<h3 id="a-strange-development-over-time">A strange development over time</h3>
<p>In a talk in 2017 on <a href="https://www.youtube.com/watch?v=re96UgMk6GQ">the Haskell journey</a> since its beginnings in the 1980ies Simon Peyton Jones speaks about the rather unusual life story of Haskell.</p>
<p>First he talks about the typical life cycle of research languages. They are often created by a single researcher (who is also the single user), and most of them will be abandoned after just a few years.</p>
<p>A more successful research language might gain some interest in a larger community but will still not escape the ivory tower and typically will be given up within ten years.</p>
<p>On the other hand we have all those popular programming languages that are quickly adopted by large numbers of developers and thus reach “the threshold of immortality”. That is the base of existing code will grow so large that the language will be in use for decades.</p>
<p>A little jokingly he then depicts the sad fate of languages designed by committees by flat line through zero: They simply never take off.</p>
<p>Finally, he presents a chart showing the Haskell timeline:</p>
<figure>
<img src="/img/language-5.png" alt="" /><figcaption>the haskell timeline</figcaption>
</figure>
<p>The development shown in this chart seems rather unexpected: Haskell started as a research language and was even designed by a committee; so in all probability it should have been abandoned long before the millennium!</p>
<p>Instead, it gained some momentum in its early years followed by a rather quiet phase during the decade of OO hype (Java being released in 1995). And then again we see a continuous growth of interest since about 2005. I’m writing this in early 2020, and we still see this trend!</p>
<h3 id="being-used-versus-being-discussed">Being used versus being discussed</h3>
<p>Then Simon Peyton Jones points out another interesting characteristic of the reception of Haskell in recent years: In statistics that rank programming languages by actual usage Haskell is typically not under the 30 most active languages. But in statistics that instead rank languages by the volume of discussions on the internet Haskell typically scores much better (often in the top ten).</p>
<h3 id="so-why-does-haskell-keep-being-a-hot-topic-in-the-software-development-community">So why does Haskell keep being a hot topic in the software development community?</h3>
<p>A very <em>short answer</em> might be: Haskell has a number of features that are clearly different from those of most other programming languages. Many of these features have proven to be powerful tools to solve basic problems of software development elegantly.</p>
<p>Therefore, over time other programming languages have adopted parts of these concepts (e.g. pattern matching or type classes). In discussions about such concepts the Haskell heritage is mentioned and differences between the original Haskell concepts and those of other languages are discussed. Sometimes people feel encouraged to have a closer look at the source of these concepts to get a deeper understanding of their original intentions. That’s why we see a growing number of developers working in Python, Typescript, Scala, Rust, C++, C# or Java starting to dive into Haskell.</p>
<p>A further essential point is that Haskell is still an experimental laboratory for research in areas such as compiler construction, programming language design, theorem-provers, type systems etc. So inevitably Haskell will be a topic in the discussion about these approaches.</p>
<p>In the following sections we will try to find the <em>longer answer</em> by studying some of the most distinguishing features of Haskell.</p>
<h2 id="functions-are-first-class">Functions are First-class</h2>
<blockquote>
<p>In computer science, a programming language is said to have first-class functions if it treats functions as first-class citizens. This means the language supports <strong>passing functions as arguments to other functions</strong>, <strong>returning them as the values from other functions</strong>, and <strong>assigning them to variables or storing them in data structures.</strong>[1] Some programming language theorists require <strong>support for anonymous functions</strong> (function literals) as well.[2] In languages with first-class functions, the names of functions do not have any special status; they are treated like ordinary variables with a function type.</p>
<p>quoted from <a href="https://en.wikipedia.org/wiki/First-class_function">Wikipedia</a></p>
</blockquote>
<p>We’ll go through this one by one:</p>
<h3 id="functions-can-be-assigned-to-variables-exactly-as-any-other-values">Functions can be assigned to variables exactly as any other values</h3>
<p>Let’s have a look how this looks like in Haskell. First we define some simple values:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co">-- define constant `aNumber` with a value of 42. </span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="ot">aNumber ::</span> <span class="dt">Integer</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>aNumber <span class="ot">=</span> <span class="dv">42</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="co">-- define constant `aString` with a value of &quot;hello world&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="ot">aString ::</span> <span class="dt">String</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>aString <span class="ot">=</span> <span class="st">&quot;Hello World&quot;</span></span></code></pre></div>
<p>In the first line we see a type signature that defines the constant <code>aNumber</code> to be of type <code>Integer</code>. In the second line we define the value of <code>aNumber</code> to be <code>42</code>. In the same way we define the constant <code>aString</code> to be of type <code>String</code>.</p>
<p>Haskell is a statically typed language: all type checks happen at compile time. Static typing has the advantage that type errors don’t happen at runtime. This is especially useful if a function signature is changed and this change affects many dependent parts of a project: the compiler will detect the breaking changes at all affected places.</p>
<p>The Haskell Compiler also provides <em>type inference</em>, which allows the compiler to deduce the concrete data type of an expression from the context. Thus, it is usually not required to provide type declarations. Nevertheless, using explicit type signatures is considered good style as they are an important element of a comprehensive documentation.</p>
<p>Next we define a function <code>square</code> that takes an integer argument and returns the square value of the argument:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="ot">square ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>square x <span class="ot">=</span> x <span class="op">*</span> x</span></code></pre></div>
<p>Definition of a function works exactly in the same way as the definition of any other value. The only thing special is that we declare the type to be a <strong>function type</strong> by using the <code>-&gt;</code> notation. So <code>:: Integer -&gt; Integer</code> represents a function from <code>Integer</code> to <code>Integer</code>. In the second line we define function <code>square</code> to compute <code>x * x</code> for any <code>Integer</code> argument <code>x</code>.</p>
<p>Ok, seems not too difficult, so let’s define another function <code>double</code> that doubles its input value:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">double ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>double n <span class="ot">=</span> <span class="dv">2</span> <span class="op">*</span> n</span></code></pre></div>
<h3 id="support-for-anonymous-functions">Support for anonymous functions</h3>
<p>Anonymous functions, also known as lambda expressions, can be defined in Haskell like this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a>\x <span class="ot">-&gt;</span> x <span class="op">*</span> x</span></code></pre></div>
<p>This expression denotes an anonymous function that takes a single argument x and returns the square of that argument. The backslash is read as λ (the greek letter lambda).</p>
<p>You can use such as expressions everywhere where you would use any other function. For example you could apply the anonymous function <code>\x -&gt; x * x</code> to a number just like the named function <code>square</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="co">-- use named function:</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>result <span class="ot">=</span> square <span class="dv">5</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="co">-- use anonymous function:</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>result&#39; <span class="ot">=</span> (\x <span class="ot">-&gt;</span> x <span class="op">*</span> x) <span class="dv">5</span></span></code></pre></div>
<p>We will see more useful applications of anonymous functions in the following section.</p>
<h3 id="functions-can-be-returned-as-values-from-other-functions">Functions can be returned as values from other functions</h3>
<h4 id="function-composition">Function composition</h4>
<p>Do you remember <em>function composition</em> from your high-school math classes? Function composition is an operation that takes two functions <code>f</code> and <code>g</code> and produces a function <code>h</code> such that <code>h(x) = g(f(x))</code> The resulting composite function is denoted <code>h = g ∘ f</code> where <code>(g ∘ f )(x) = g(f(x))</code>. Intuitively, composing functions is a chaining process in which the output of function <code>f</code> is used as input of function <code>g</code>.</p>
<p>So looking from a programmers perspective the <code>∘</code> operator is a function that takes two functions as arguments and returns a new composite function.</p>
<p>In Haskell this operator is represented as the dot operator <code>.</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">(.) ::</span> (b <span class="ot">-&gt;</span> c) <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> c</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>(<span class="op">.</span>) f g x <span class="ot">=</span> f (g x)</span></code></pre></div>
<p>The brackets around the dot are required as we want to use a non-alphabetical symbol as an identifier. In Haskell such identifiers can be used as infix operators (as we will see below). Otherwise <code>(.)</code> is defined as any other function. Please also note how close the syntax is to the original mathematical definition.</p>
<p>Using this operator we can easily create a composite function that first doubles a number and then computes the square of that doubled number:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">squareAfterDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>squareAfterDouble <span class="ot">=</span> square <span class="op">.</span> double</span></code></pre></div>
<h4 id="currying-and-partial-application">Currying and Partial Application</h4>
<p>In this section we look at another interesting example of functions producing other functions as return values. We start by defining a function <code>add</code> that takes two <code>Integer</code> arguments and computes their sum:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- function adding two numbers </span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a><span class="ot">add ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span></code></pre></div>
<p>This look quite straightforward. But still there is one interesting detail to note: the type signature of <code>add</code> is not something like</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="ot">add ::</span> (<span class="dt">Integer</span>, <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span></span></code></pre></div>
<p>Instead it is:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a><span class="ot">add ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span></code></pre></div>
<p>What does this signature actually mean? It can be read as “A function taking an Integer argument and returning a function of type <code>Integer -&gt; Integer</code>”. Sounds weird? But that’s exactly what Haskell does internally. So if we call <code>add 2 3</code> first <code>add</code> is applied to <code>2</code> which return a new function of type <code>Integer -&gt; Integer</code> which is then applied to <code>3</code>.</p>
<p>This technique is called <a href="https://wiki.haskell.org/Currying"><strong>Currying</strong></a></p>
<p>Currying is widely used in Haskell as it allows another cool thing: <strong>partial application</strong>.</p>
<p>In the next code snippet we define a function <code>add5</code> by partially applying the function <code>add</code> to only one argument:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a><span class="co">-- partial application: applying add to 5 returns a function of type Integer -&gt; Integer</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a><span class="ot">add5 ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>add5 <span class="ot">=</span> add <span class="dv">5</span></span></code></pre></div>
<p>The trick is as follows: <code>add 5</code> returns a function of type <code>Integer -&gt; Integer</code> which will add <code>5</code> to any Integer argument.</p>
<p>Partial application thus allows us to write functions that return functions as result values. This technique is frequently used to <a href="https://github.com/thma/LtuPatternFactory#dependency-injection--parameter-binding-partial-application">provide functions with configuration data</a>.</p>
<h3 id="functions-can-be-passed-as-arguments-to-other-functions">Functions can be passed as arguments to other functions</h3>
<p>I could keep this section short by telling you that we have already seen an example for this: the function composition operator <code>(.)</code>. It <strong>accepts two functions as arguments</strong> and returns a new one as in:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="ot">squareAfterDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true"></a>squareAfterDouble <span class="ot">=</span> square <span class="op">.</span> double</span></code></pre></div>
<p>But I have another instructive example at hand.</p>
<p>Let’s imagine we have to implement a function that doubles any odd Integer:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a><span class="ot">ifOddDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>ifOddDouble n <span class="ot">=</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">odd</span> n</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>    <span class="kw">then</span> double n</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>The Haskell code is straightforward: new ingredients are the <code>if ... then ... else ...</code> and the odd <code>odd</code> which is a predicate from the Haskell standard library that returns <code>True</code> if an integral number is odd.</p>
<p>Now let’s assume that we also need another function that computes the square for any odd number:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="ot">ifOddSquare ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true"></a>ifOddSquare n <span class="ot">=</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">odd</span> n</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true"></a>    <span class="kw">then</span> square n</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>As vigilant developers we immediately detect a violation of the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">Don’t repeat yourself principle</a> as both functions only vary in the usage of a different growth functions <code>double</code> versus <code>square</code>.</p>
<p>So we are looking for a way to refactor this code by a solution that keeps the original structure but allows to vary the used growth function.</p>
<p>What we need is a function that takes a growth function (of type <code>(Integer -&gt; Integer)</code>) as first argument, an <code>Integer</code> as second argument and returns an <code>Integer</code>. The specified growth function will be applied in the <code>then</code> clause:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a><span class="ot">ifOdd ::</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>ifOdd growthFunction n <span class="ot">=</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>  <span class="kw">if</span> <span class="fu">odd</span> n</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>    <span class="kw">then</span> growthFunction n</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>With this approach we can refactor <code>ifOddDouble</code> and <code>ifOddSquare</code> as follows:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="ot">ifOddDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a>ifOddDouble n <span class="ot">=</span> ifOdd double n</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a><span class="ot">ifOddSquare ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>ifOddSquare n <span class="ot">=</span> ifOdd square n</span></code></pre></div>
<p>Now imagine that we have to implement new function <code>ifEvenDouble</code> and <code>ifEvenSquare</code>, that will work only on even numbers. Instead of repeating ourselves we come up with a function <code>ifPredGrow</code> that takes a predicate function of type <code>(Integer -&gt; Bool)</code> as first argument, a growth function of type <code>(Integer -&gt; Integer)</code> as second argument and an Integer as third argument, returning an <code>Integer</code>.</p>
<p>The predicate function will be used to determine whether the growth function has to be applied:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a><span class="ot">ifPredGrow ::</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> (<span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span>) <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>ifPredGrow predicate growthFunction n <span class="ot">=</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>  <span class="kw">if</span> predicate n</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>    <span class="kw">then</span> growthFunction n</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>    <span class="kw">else</span> n</span></code></pre></div>
<p>Using this <a href="https://en.wikipedia.org/wiki/Higher-order_function">higher order function</a> that even takes two functions as arguments we can write the two new functions and further refactor the existing ones without breaking the DRY principle:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a><span class="ot">ifEvenDouble ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true"></a>ifEvenDouble n <span class="ot">=</span> ifPredGrow <span class="fu">even</span> double n</span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true"></a></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true"></a><span class="ot">ifEvenSquare ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true"></a>ifEvenSquare n <span class="ot">=</span> ifPredGrow <span class="fu">even</span> square n</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true"></a><span class="ot">ifOddDouble&#39;&#39; ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true"></a>ifOddDouble&#39;&#39; n <span class="ot">=</span> ifPredGrow <span class="fu">odd</span> double n</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true"></a></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true"></a><span class="ot">ifOddSquare&#39;&#39; ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true"></a>ifOddSquare&#39;&#39; n <span class="ot">=</span> ifPredGrow <span class="fu">odd</span> square n</span></code></pre></div>
<h2 id="pattern-matching">Pattern matching</h2>
<p>With the things that we have learnt so far, we can now start to implement some more interesting functions. So what about implementing the recursive <a href="https://en.wikipedia.org/wiki/Factorial">factorial function</a>?</p>
<p>The factorial function can be defined as follows:</p>
<blockquote>
<p>For all n ∈ ℕ<sub>0</sub>:</p>
<pre><code>0! = 1
n! = n * (n-1)!</code></pre>
</blockquote>
<p>With our current knowledge of Haskell we can implement this as follows:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="ot">factorial ::</span> <span class="dt">Natural</span> <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>factorial n <span class="ot">=</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>  <span class="kw">if</span> n <span class="op">==</span> <span class="dv">0</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true"></a>    <span class="kw">then</span> <span class="dv">1</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true"></a>    <span class="kw">else</span> n <span class="op">*</span> factorial (n <span class="op">-</span> <span class="dv">1</span>)</span></code></pre></div>
<p>We are using the Haskell data type <code>Natural</code> to denote the set of non-negative integers ℕ<sub>0</sub>. Using the literal <code>factorial</code> within the definition of the function <code>factorial</code> works as expected and denotes a recursive function call.</p>
<p>As these kind of recursive definition of functions are typical for functional programming, the language designers have added a useful feature called <em>pattern matching</em> that allows to define functions by a set of equations:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a><span class="ot">fac ::</span> <span class="dt">Natural</span> <span class="ot">-&gt;</span> <span class="dt">Natural</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>fac <span class="dv">0</span> <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>fac n <span class="ot">=</span> n <span class="op">*</span> fac (n <span class="op">-</span> <span class="dv">1</span>)</span></code></pre></div>
<p>This style comes much closer to the mathematical definition and is typically more readable, as it helps to avoid nested <code>if ... then ... else ...</code> constructs.</p>
<p>Pattern matching can not only be used for numeric values but for any other data types. We’ll see some more examples shortly.</p>
<h2 id="algebraic-data-types">Algebraic Data Types</h2>
<p>Haskell supports user-defined data types by making use of a well thought out concept. Let’s start with a simple example:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span> <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span></span></code></pre></div>
<p>This declares a data type <code>Status</code> which has exactly three different instances. For each instance a <em>data constructor</em> is defined that allows to create a new instance of the data type.</p>
<p>Each of those data constructors is a function (in this simple case a constant) that returns a <code>Status</code> instance.</p>
<p>The type <code>Status</code> is a so called <em>sum type</em> as it is represents the set defined by the sum of all three instances <code>Green</code>, <code>Yellow</code>, <code>Red</code>. In Java this corresponds to Enumerations.</p>
<p>Let’s assume we have to create a converter that maps our <code>Status</code> values to <code>Severity</code> values representing severity levels in some other system. This converter can be written using the pattern matching syntax that we already have seen above:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">-- another sum type representing severity:</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span> <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>)</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a><span class="ot">severity ::</span> <span class="dt">Status</span> <span class="ot">-&gt;</span> <span class="dt">Severity</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>severity <span class="dt">Green</span>  <span class="ot">=</span> <span class="dt">Low</span></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>severity <span class="dt">Yellow</span> <span class="ot">=</span> <span class="dt">Middle</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a>severity <span class="dt">Red</span>    <span class="ot">=</span> <span class="dt">High</span></span></code></pre></div>
<p>The compiler will tell us when we did not cover all instances of the <code>Status</code> type (by making use of the <code>-fwarn-incomplete-patterns</code> pragma).</p>
<p>Now we look at data types that combine multiple different elements, like pairs n-tuples, etc. Let’s start with a <code>PairStatusSeverity</code> type that combines two different elements:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">P</span> <span class="dt">Status</span> <span class="dt">Severity</span></span></code></pre></div>
<p>This can be understood as: data type <code>PairStatusSeverity</code> can be constructed from a data constructor <code>P</code> that takes a value of type <code>Status</code> and a value of type <code>Severity</code> and returns a <code>Pair</code> instance.</p>
<p>So for example <code>P Green High</code> returns a <code>PairStatusSeverity</code> instance (the data constructor <code>P</code> has the signature <code>P :: Status -&gt; Severity -&gt; PairStatusSeverity</code>).</p>
<p>The type <code>PairStatusSeverity</code> can be interpreted as the set of all possible ordered pairs of Status and Severity values, that is the <em>cartesian product</em> of <code>Status</code> and <code>Severity</code>.</p>
<p>That’s why such a data type is called <em>product type</em>.</p>
<p>Haskell allows you to create arbitrary data types by combining <em>sum types</em> and <em>product types</em>. The complete range of data types that can be constructed in this way is called <a href="https://en.wikipedia.org/wiki/Algebraic_data_type"><em>algebraic data types</em></a> or ADT in short.</p>
<p>Using algebraic data types has several advantages:</p>
<ul>
<li>Pattern matching can be used to analyze any concrete instance to select different behaviour based on input data. as in the example that maps <code>Status</code> to <code>Severity</code> there is no need to use <code>if..then..else..</code> constructs.</li>
<li>The compiler can detect incomplete patterns matching or other flaws.</li>
<li>The compiler can derive many complex functionality automatically for ADTs as they are constructed in such a regular way.</li>
</ul>
<p>We will cover the interesting combination of ADTs and pattern matching in the following sections.</p>
<h2 id="polymorphic-data-types">Polymorphic Data Types</h2>
<p>Forming pairs or more generally n-tuples is a very common task in programming. Therefore it would be inconvenient and repetitive if we were forced to create new Pair or Tuple types for each concrete usage. consider the following example:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">P</span> <span class="dt">Status</span> <span class="dt">Severity</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusString</span>   <span class="ot">=</span> <span class="dt">P&#39;</span> <span class="dt">Status</span> <span class="dt">String</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true"></a></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairSeverityStatus</span> <span class="ot">=</span> <span class="dt">P&#39;&#39;</span> <span class="dt">Severity</span> <span class="dt">Status</span></span></code></pre></div>
<p>Luckily data type declarations allow to use type variables to avoid this kind of cluttered code. So we can define a generic data type <code>Pair</code> that allows us to freely combine different kinds of arguments:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="co">-- a simple polymorphic type</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Pair</span> a b <span class="ot">=</span> <span class="dt">P</span> a b</span></code></pre></div>
<p>This can be understood as: data type <code>Pair</code> uses two elements of (potentially) different types <code>a</code> and <code>b</code>; the data constructor <code>P</code> takes a value of type <code>a</code> and a value of type <code>b</code> and returns a <code>Pair a b</code> instance (the data constructor <code>P</code> has the signature <code>P :: a -&gt; b -&gt; Pair a b</code>). The type <code>Pair</code> can now be used to create many different concrete data types it is thus called a <em>polymorphic</em> data type. As the Polymorphism is defined by type variables, i.e. parameters to the type declarations, this mechanism is called <em>parametric polymorphism</em>.</p>
<p>As pairs and n-tuples are so frequently used, the Haskell language designers have added some syntactic sugar to work effortlessly with them.</p>
<p>So you can simply write tuples like this:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="ot">tuple ::</span> (<span class="dt">Status</span>, <span class="dt">Severity</span>, <span class="dt">String</span>)</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true"></a>tuple <span class="ot">=</span> (<span class="dt">Green</span>, <span class="dt">Low</span>, <span class="st">&quot;All green&quot;</span>)</span></code></pre></div>
<h3 id="lists">Lists</h3>
<p>Another very useful polymorphic type is the <code>List</code>.</p>
<p>A list can either be the empty list (denoted by the data constructor <code>[]</code>) or some element of a data type <code>a</code> followed by a list with elements of type <code>a</code>, denoted by <code>[a]</code>.</p>
<p>This intuition is reflected in the following data type definition:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true"></a><span class="kw">data</span> [a] <span class="ot">=</span> [] <span class="op">|</span> a <span class="op">:</span> [a]</span></code></pre></div>
<p>The cons operator <code>(:)</code> (which is an infix operator like <code>(.)</code> from the previous section) is declared as a <em>data constructor</em> to construct a list from a single element of type <code>a</code> and a list of type <code>[a]</code>.</p>
<p>So a list containing only a single element <code>1</code> is constructed by:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true"></a><span class="dv">1</span> <span class="op">:</span> []</span></code></pre></div>
<p>A list containing the three numbers 1, 2, 3 is constructed like this:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true"></a><span class="dv">1</span> <span class="op">:</span> <span class="dv">2</span> <span class="op">:</span> <span class="dv">3</span> <span class="op">:</span> []</span></code></pre></div>
<p>Luckily the Haskell language designers have been so kind to offer some syntactic sugar for this. So the first list can simply be written as <code>[1]</code> and the second as <code>[1,2,3]</code>.</p>
<p>Polymorphic type expressions describe <em>families of types</em>. For example, <code>(forall a)[a]</code> is the family of types consisting of, for every type <code>a</code>, the type of lists of <code>a</code>. Lists of integers (e.g. <code>[1,2,3]</code>), lists of characters (<code>['a','b','c']</code>), even lists of lists of integers, etc., are all members of this family.</p>
<p>Function that work on lists can use pattern matching to select behaviour for the <code>[]</code> and the <code>a:[a]</code> case.</p>
<p>Take for instance the definition of the function <code>length</code> that computes the length of a list:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true"></a><span class="fu">length</span><span class="ot"> ::</span> [a] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true"></a><span class="fu">length</span> []     <span class="ot">=</span>  <span class="dv">0</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true"></a><span class="fu">length</span> (x<span class="op">:</span>xs) <span class="ot">=</span>  <span class="dv">1</span> <span class="op">+</span> <span class="fu">length</span> xs</span></code></pre></div>
<p>We can read these equations as: The length of the empty list is 0, and the length of a list whose first element is x and remainder is xs is 1 plus the length of xs.</p>
<p>In our next example we want to work with a of some random integers:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true"></a><span class="ot">someNumbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true"></a>someNumbers <span class="ot">=</span> [<span class="dv">49</span>,<span class="dv">64</span>,<span class="dv">97</span>,<span class="dv">54</span>,<span class="dv">19</span>,<span class="dv">90</span>,<span class="dv">934</span>,<span class="dv">22</span>,<span class="dv">215</span>,<span class="dv">6</span>,<span class="dv">68</span>,<span class="dv">325</span>,<span class="dv">720</span>,<span class="dv">8082</span>,<span class="dv">1</span>,<span class="dv">33</span>,<span class="dv">31</span>]</span></code></pre></div>
<p>Now we want to select all even or all odd numbers from this list. We are looking for a function <code>filter</code> that takes two arguments: first a predicate function that will be used to check each element and second the actual list of elements. The function will return a list with all matching elements. And of course our solution should work not only for Integers but for any other types as well. Here is the type signature of such a filter function:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true"></a><span class="fu">filter</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span></code></pre></div>
<p>In the implementation we will use pattern matching to provide different behaviour for the <code>[]</code> and the <code>(x:xs)</code> case:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true"></a><span class="fu">filter</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [a]</span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true"></a><span class="fu">filter</span> <span class="fu">pred</span> []     <span class="ot">=</span> []</span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true"></a><span class="fu">filter</span> <span class="fu">pred</span> (x<span class="op">:</span>xs)</span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">pred</span> x         <span class="ot">=</span> x <span class="op">:</span> <span class="fu">filter</span> <span class="fu">pred</span> xs</span>
<span id="cb34-5"><a href="#cb34-5" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">otherwise</span>      <span class="ot">=</span> <span class="fu">filter</span> <span class="fu">pred</span> xs</span></code></pre></div>
<p>The <code>[]</code> case is obvious. To understand the <code>(x:xs)</code> case we have to know that in addition to simple matching of the type constructors we can also use <em>pattern guards</em> to perform additional testing on the input data. In this case we compute <code>pred x</code> if it evaluates to <code>True</code>, <code>x</code> is a match and will be cons’ed with the result of <code>filter pred xs</code>. If it does not evaluate to <code>True</code>, we will not add <code>x</code> to the result list and thus simply call filter recursively on the remainder of the list.</p>
<p>Now we can use <code>filter</code> to select elements from our sample list:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true"></a><span class="ot">someEvenNumbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true"></a>someEvenNumbers <span class="ot">=</span> <span class="fu">filter</span> <span class="fu">even</span> someNumbers</span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true"></a></span>
<span id="cb35-4"><a href="#cb35-4" aria-hidden="true"></a><span class="co">-- predicates may also be lambda-expresssions</span></span>
<span id="cb35-5"><a href="#cb35-5" aria-hidden="true"></a><span class="ot">someOddNumbers ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb35-6"><a href="#cb35-6" aria-hidden="true"></a>someOddNumbers <span class="ot">=</span> <span class="fu">filter</span> (\n <span class="ot">-&gt;</span> n <span class="ot">`rem`</span> <span class="dv">2</span> <span class="op">/=</span> <span class="dv">0</span>) someNumbers  </span></code></pre></div>
<p>Of course we don’t have to invent functions like <code>filter</code> on our own but can rely on the <a href="https://hackage.haskell.org/package/base-4.12.0.0/docs/Data-List.html">extensive set of predefined functions working on lists</a> in the Haskell base library.</p>
<h4 id="arithmetic-sequences">Arithmetic sequences</h4>
<p>There is a nice feature that often comes in handy when dealing with lists of numbers. It’s called <em>arithmetic sequences</em> and allows you to define lists of numbers with a concise syntax:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true"></a><span class="ot">upToHundred ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true"></a>upToHundred <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">100</span>]</span></code></pre></div>
<p>As expected this assigns <code>upToHundred</code> with a list of integers from 1 to 100.</p>
<p>It’s also possible to define a step width that determines the increment between the subsequent numbers. If we want only the odd numbers we can construct them like this:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true"></a><span class="ot">oddsUpToHundred ::</span> [<span class="dt">Integer</span>]</span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true"></a>oddsUpToHundred <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span><span class="dv">100</span>]</span></code></pre></div>
<p>Arithmetic sequences can also be used in more dynamic cases. For example we can define the <code>factorial</code> function like this:</p>
<pre class="math"><code>n! = 1 * 2 * 3 ... (n-2) * (n-1) * n, for integers &gt; 0</code></pre>
<p>In Haskell we can use an arithmetic sequence to define this function:</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true"></a>fac&#39; n   <span class="ot">=</span> prod [<span class="dv">1</span><span class="op">..</span>n]</span></code></pre></div>
<h2 id="immutability">Immutability</h2>
<blockquote>
<p>In object-oriented and functional programming, an immutable object is an object whose state cannot be modified after it is created. This is in contrast to a mutable object (changeable object), which can be modified after it is created.</p>
<p>Quoted from <a href="https://en.wikipedia.org/wiki/Immutable_object">Wikipedia</a></p>
</blockquote>
<p>This is going to be a very short section. In Haskell all data is immutable. Period.</p>
<p>Let’s look at some interactions with the Haskell GHCi REPL (whenever you see the <code>λ&gt;</code> prompt in this article it is from a GHCi session):</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> a <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> a</span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">reverse</span> a</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true"></a>[<span class="dv">3</span>,<span class="dv">2</span>,<span class="dv">1</span>]</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true"></a>λ<span class="op">&gt;</span> a</span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>]</span></code></pre></div>
<p>In Haskell there is no way to change the value of <code>a</code> after its initial creation. There are no <em>destructive</em> operations available unlike some other functional languages such as Lisp, Scheme or ML.</p>
<p>The huge benefit of this is that refactoring becomes much simpler than in languages where every function or method might mutate data. Thus it will also be easier to reason about a given piece of code.</p>
<p>Of course this also makes programming of concurrent operations much easier. With a <em>shared nothing</em> approach, Haskell programs are automatically thread-safe.</p>
<h2 id="declarative-programming">Declarative programming</h2>
<p>In this section I want to explain how programming with <em>higher order</em> functions can be used to factor out many basic control structures and algorithms from the user code.</p>
<p>This will result in a more <em>declarative programming</em> style where the developer can simply declare <em>what</em> she wants to achieve but is not required to write down <em>how</em> it is to be achieved.</p>
<p>Code that applies this style will be much denser, and it will be more concerned with the actual elements of the problem domain than with the technical implementation details.</p>
<h3 id="mapping">Mapping</h3>
<p>We’ll demonstrate this with some examples working on lists. First we get the task to write a function that doubles all elements of a <code>[Integer]</code> list. We want to reuse the <code>double</code> function we have already defined above.</p>
<p>With all that we have learnt so far, writing a function <code>doubleAll</code> isn’t that hard:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true"></a><span class="co">-- compute the double value for all list elements</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true"></a><span class="ot">doubleAll ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true"></a>doubleAll [] <span class="ot">=</span> []</span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true"></a>doubleAll (n<span class="op">:</span>rest) <span class="ot">=</span> double n <span class="op">:</span> doubleAll rest</span></code></pre></div>
<p>Next we are asked to implement a similar function <code>squareAll</code> that will use <code>square</code> to compute the square of all elements in a list. The naive way would be to implement it in the <em>WET</em> (We Enjoy Typing) approach:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true"></a><span class="co">-- compute squares for all list elements</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true"></a><span class="ot">squareAll ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true"></a>squareAll [] <span class="ot">=</span> []</span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true"></a>squareAll (n<span class="op">:</span>rest) <span class="ot">=</span> square n <span class="op">:</span> squareAll rest</span></code></pre></div>
<p>Of course this is very ugly: both function use the same pattern matching and apply the same recursive iteration strategy. They only differ in the function applied to each element.</p>
<p>As role model developers we don’t want to repeat ourselves. We are thus looking for something that captures the essence of mapping a given function over a list of elements:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true"></a><span class="fu">map</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> [b]</span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true"></a><span class="fu">map</span> f []     <span class="ot">=</span> []</span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true"></a><span class="fu">map</span> f (x<span class="op">:</span>xs) <span class="ot">=</span> f x <span class="op">:</span> <span class="fu">map</span> f xs</span></code></pre></div>
<p>This function abstracts away the implementation details of iterating over a list and allows to provide a user defined mapping function as well.</p>
<p>Now we can use <code>map</code> to simply <em>declare our intention</em> (the ‘what’) and don’t have to detail the ‘how’:</p>
<div class="sourceCode" id="cb44"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb44-1"><a href="#cb44-1" aria-hidden="true"></a><span class="ot">doubleAll&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb44-2"><a href="#cb44-2" aria-hidden="true"></a>doubleAll&#39; <span class="ot">=</span> <span class="fu">map</span> double</span>
<span id="cb44-3"><a href="#cb44-3" aria-hidden="true"></a></span>
<span id="cb44-4"><a href="#cb44-4" aria-hidden="true"></a><span class="ot">squareAll&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> [<span class="dt">Integer</span>]</span>
<span id="cb44-5"><a href="#cb44-5" aria-hidden="true"></a>squareAll&#39; <span class="ot">=</span> <span class="fu">map</span> square</span></code></pre></div>
<h3 id="folding">Folding</h3>
<p>Now let’s have a look at some related problem. Our first task is to add up all elements of a <code>[Integer]</code> list. First the naive approach which uses the already familiar mix of pattern matching plus recursion:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true"></a><span class="ot">sumUp ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true"></a>sumUp [] <span class="ot">=</span> <span class="dv">0</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true"></a>sumUp (n<span class="op">:</span>rest) <span class="ot">=</span> n <span class="op">+</span> sumUp rest</span></code></pre></div>
<p>By looking at the code for a function that computes the product of all elements of a <code>[Integer]</code> list we can again see that we are repeating ourselves:</p>
<div class="sourceCode" id="cb46"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb46-1"><a href="#cb46-1" aria-hidden="true"></a><span class="ot">prod ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb46-2"><a href="#cb46-2" aria-hidden="true"></a>prod [] <span class="ot">=</span> <span class="dv">1</span></span>
<span id="cb46-3"><a href="#cb46-3" aria-hidden="true"></a>prod (n<span class="op">:</span>rest) <span class="ot">=</span> n <span class="op">*</span> prod rest</span></code></pre></div>
<p>So what is the essence of both algorithms? At the core of both algorithms we have a recursive function which</p>
<ul>
<li>takes a binary operator (<code>(+)</code>or <code>(*)</code> in our case),</li>
<li>an initial value that is used as a starting point for the accumulation (typically the identity element (or neutral element) of the binary operator),</li>
<li>the list of elements that should be reduced to a single return value</li>
<li>performs the accumulation by recursively applying the binary operator to all elements of the list until the <code>[]</code> is reached, where the neutral element is returned.</li>
</ul>
<p>This essence is contained in the higher order function <code>foldr</code> which again is part of the Haskell standard library:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true"></a><span class="fu">foldr</span><span class="ot"> ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> b</span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true"></a><span class="fu">foldr</span> f acc []     <span class="ot">=</span>  acc</span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true"></a><span class="fu">foldr</span> f acc (x<span class="op">:</span>xs) <span class="ot">=</span>  f x (<span class="fu">foldr</span> f acc xs)</span></code></pre></div>
<p>Now we can use <code>foldr</code> to simply <em>declare our intention</em> (the ‘what’) and don’t have to detail the ‘how’:</p>
<div class="sourceCode" id="cb48"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true"></a><span class="ot">sumUp&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true"></a>sumUp&#39; <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">+</span>) <span class="dv">0</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true"></a></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true"></a><span class="ot">prod&#39; ::</span> [<span class="dt">Integer</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true"></a>prod&#39; <span class="ot">=</span> <span class="fu">foldr</span> (<span class="op">*</span>) <span class="dv">1</span></span></code></pre></div>
<p>With the functions <code>map</code> and <code>foldr</code> (or <code>reduce</code>) we have now two very powerful tools at hand that can be used in many situation where list data has to be processed.</p>
<p>Both functions can even be composed to form yet another very important programming concept: <em>Map/Reduce</em>. In Haskell this operation is provided by the function <code>foldMap</code>.</p>
<p>I won’t go into details here as it would go beyond the scope of this article, but I’ll invite you to read my <a href="https://github.com/thma/LtuPatternFactory#map-reduce">introduction to Map/Reduce in Haskell</a>.</p>
<h2 id="non-strict-evaluation">Non-strict Evaluation</h2>
<p>Now we come to topic that was one of the main drivers for the Haskell designers: they wanted to get away from the then standard model of strict evaluation.</p>
<p>Non-Strict Evaluation (aka. normal order reduction) has one very important property.</p>
<blockquote>
<p>If a lambda expression has a normal form, then normal order reduction will terminate and find that normal form.</p>
<p>Church-Rosser Theorem II</p>
</blockquote>
<p>This property does not hold true for other reduction strategies (like applicative order or call-by-value reduction).</p>
<p>This result from mathematical research on the <a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda calculus</a> is important as Haskell maintains the semantics of normal order reduction.</p>
<p>The real-world benefits of lazy evaluation include:</p>
<ul>
<li>Avoid endless loops in certain edge cases</li>
<li>The ability to define control flow (structures) as abstractions instead of primitives.</li>
<li>The ability to define potentially infinite data structures. This allows for more straightforward implementation of some algorithms.</li>
</ul>
<p>So let’s have a closer look at those benefits:</p>
<h3 id="avoid-endless-loops">Avoid endless loops</h3>
<p>Consider the following example function:</p>
<div class="sourceCode" id="cb49"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb49-1"><a href="#cb49-1" aria-hidden="true"></a><span class="ot">ignoreY ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb49-2"><a href="#cb49-2" aria-hidden="true"></a>ignoreY x y <span class="ot">=</span> x</span></code></pre></div>
<p>It takes two integer arguments and returns the first one unmodified. The second argument is simply ignored.</p>
<p>In most programming languages both arguments will be evaluated before the function body is executed: they use applicative order reduction aka. eager evaluation or call-by-value semantics.</p>
<p>In Haskell on the other hand it is safe to call the function with a non-terminating expression in the second argument. First we create a non-terminating expression <code>viciousCircle</code>. Any attempt to evaluate it will result in an endless loop:</p>
<div class="sourceCode" id="cb50"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb50-1"><a href="#cb50-1" aria-hidden="true"></a><span class="co">-- it&#39;s possible to define non-terminating expressions like</span></span>
<span id="cb50-2"><a href="#cb50-2" aria-hidden="true"></a><span class="ot">viciousCircle ::</span> a</span>
<span id="cb50-3"><a href="#cb50-3" aria-hidden="true"></a>viciousCircle <span class="ot">=</span> viciousCircle</span></code></pre></div>
<p>But if we use <code>viciousCircle</code> as second argument to the function <code>ignoreY</code> it will simply be ignored and the first argument is returned:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true"></a><span class="co">-- trying it in GHCi:</span></span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true"></a>λ<span class="op">&gt;</span> ignoreY <span class="dv">42</span> viciousCircle</span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true"></a><span class="dv">42</span></span></code></pre></div>
<h3 id="define-potentially-infinite-data-structures">Define potentially infinite data structures</h3>
<p>In the <a href="#lists">section on lists</a> we have already met <em>arithmetic sequences</em> like <code>[1..10]</code>.</p>
<p>Arithmetic sequences can also be used to define infinite lists of numbers. Here are a few examples:</p>
<div class="sourceCode" id="cb52"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb52-1"><a href="#cb52-1" aria-hidden="true"></a><span class="co">-- all natural numbers</span></span>
<span id="cb52-2"><a href="#cb52-2" aria-hidden="true"></a>naturalNumbers <span class="ot">=</span> [<span class="dv">1</span><span class="op">..</span>]</span>
<span id="cb52-3"><a href="#cb52-3" aria-hidden="true"></a></span>
<span id="cb52-4"><a href="#cb52-4" aria-hidden="true"></a><span class="co">-- all even numbers</span></span>
<span id="cb52-5"><a href="#cb52-5" aria-hidden="true"></a>evens <span class="ot">=</span> [<span class="dv">2</span>,<span class="dv">4</span><span class="op">..</span>]</span>
<span id="cb52-6"><a href="#cb52-6" aria-hidden="true"></a></span>
<span id="cb52-7"><a href="#cb52-7" aria-hidden="true"></a><span class="co">-- all odd numbers</span></span>
<span id="cb52-8"><a href="#cb52-8" aria-hidden="true"></a>odds  <span class="ot">=</span> [<span class="dv">1</span>,<span class="dv">3</span><span class="op">..</span>]</span></code></pre></div>
<p>Defining those infinite lists is rather easy. But what can we do with them? Are they useful for any purpose? In the <code>viciousCircle</code> example above we have learnt that defining that expression is fine but any attempt to evaluate it will result in an infinite loop.</p>
<p>If we try to print <code>naturalNumbers</code> we will also end up in an infinite loop of integers printed to the screen.</p>
<p>But if we are bit less greedy than asking for all natural numbers everything will be OK.</p>
<div class="sourceCode" id="cb53"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb53-1"><a href="#cb53-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> naturalNumbers</span>
<span id="cb53-2"><a href="#cb53-2" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">2</span>,<span class="dv">3</span>,<span class="dv">4</span>,<span class="dv">5</span>,<span class="dv">6</span>,<span class="dv">7</span>,<span class="dv">8</span>,<span class="dv">9</span>,<span class="dv">10</span>]</span>
<span id="cb53-3"><a href="#cb53-3" aria-hidden="true"></a></span>
<span id="cb53-4"><a href="#cb53-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> evens</span>
<span id="cb53-5"><a href="#cb53-5" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">14</span>,<span class="dv">16</span>,<span class="dv">18</span>,<span class="dv">20</span>]</span>
<span id="cb53-6"><a href="#cb53-6" aria-hidden="true"></a></span>
<span id="cb53-7"><a href="#cb53-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> odds</span>
<span id="cb53-8"><a href="#cb53-8" aria-hidden="true"></a>[<span class="dv">1</span>,<span class="dv">3</span>,<span class="dv">5</span>,<span class="dv">7</span>,<span class="dv">9</span>,<span class="dv">11</span>,<span class="dv">13</span>,<span class="dv">15</span>,<span class="dv">17</span>,<span class="dv">19</span>]</span></code></pre></div>
<p>We can also peek at a specific position in such an infinite list, using the <code>(!!)</code> operator:</p>
<div class="sourceCode" id="cb54"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb54-1"><a href="#cb54-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> odds <span class="op">!!</span> <span class="dv">5000</span></span>
<span id="cb54-2"><a href="#cb54-2" aria-hidden="true"></a><span class="dv">10001</span></span>
<span id="cb54-3"><a href="#cb54-3" aria-hidden="true"></a></span>
<span id="cb54-4"><a href="#cb54-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> evens <span class="op">!!</span> <span class="dv">10000</span></span>
<span id="cb54-5"><a href="#cb54-5" aria-hidden="true"></a><span class="dv">20002</span></span></code></pre></div>
<h3 id="list-comprehension">List comprehension</h3>
<p>Do you remember <em>set comprehension</em> notation from your math classes?</p>
<p>As simple example would be the definition of the set of even numbers:</p>
<blockquote>
<p>Evens = {i | i = 2n ∧ n ∊ ℕ}</p>
</blockquote>
<p>Which can be read as: Evens is defined as the set of all <code>i</code> where <code>i = 2*n</code> and <code>n</code> is an element of the set of natural numbers.</p>
<p>The Haskell <em>list comprehension</em> allows us to define - potentially infinite - lists with a similar syntax:</p>
<div class="sourceCode" id="cb55"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb55-1"><a href="#cb55-1" aria-hidden="true"></a>evens&#39; <span class="ot">=</span> [<span class="dv">2</span><span class="op">*</span>n <span class="op">|</span> n <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>]]</span></code></pre></div>
<p>Again we can avoid infinite loops by evaluating only a finite subset of <code>evens'</code>:</p>
<div class="sourceCode" id="cb56"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb56-1"><a href="#cb56-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">take</span> <span class="dv">10</span> evens&#39;</span>
<span id="cb56-2"><a href="#cb56-2" aria-hidden="true"></a>[<span class="dv">2</span>,<span class="dv">4</span>,<span class="dv">6</span>,<span class="dv">8</span>,<span class="dv">10</span>,<span class="dv">12</span>,<span class="dv">14</span>,<span class="dv">16</span>,<span class="dv">18</span>,<span class="dv">20</span>]</span></code></pre></div>
<p>List comprehension can be very useful for defining numerical sets and series in a (mostly) declarative way that comes close to the original mathematical definitions.</p>
<p>Take for example the set <code>PT</code> of all pythagorean triples</p>
<blockquote>
<p>PT = { (a,b,c) | a,b,c ∊ ℕ ∧ a² + b² = c² }</p>
</blockquote>
<p>The Haskell definition looks like this:</p>
<div class="sourceCode" id="cb57"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb57-1"><a href="#cb57-1" aria-hidden="true"></a><span class="ot">pt ::</span> [(<span class="dt">Natural</span>,<span class="dt">Natural</span>,<span class="dt">Natural</span>)]</span>
<span id="cb57-2"><a href="#cb57-2" aria-hidden="true"></a>pt <span class="ot">=</span> [(a,b,c) <span class="op">|</span> c <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>],</span>
<span id="cb57-3"><a href="#cb57-3" aria-hidden="true"></a>                b <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>c],</span>
<span id="cb57-4"><a href="#cb57-4" aria-hidden="true"></a>                a <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span>b],</span>
<span id="cb57-5"><a href="#cb57-5" aria-hidden="true"></a>                a<span class="op">^</span><span class="dv">2</span> <span class="op">+</span> b<span class="op">^</span><span class="dv">2</span> <span class="op">==</span> c<span class="op">^</span><span class="dv">2</span>]</span></code></pre></div>
<h3 id="define-control-flow-structures-as-abstractions">Define control flow structures as abstractions</h3>
<p>In most languages it is not possible to define new conditional operations, e.g. your own <code>myIf</code> statement. A conditional operation will evaluate some of its arguments only if certain conditions are met. This is very hard - if not impossible - to implement in language with call-by-value semantics which evaluates all function arguments before actually evaluating the function body.</p>
<p>As Haskell implements call-by-need semantics, it is possible to define new conditional operations. In fact this is quite helpful when writing <em>domain specific languages</em>.</p>
<p>Here comes a very simple version of <code>myIf</code>:</p>
<div class="sourceCode" id="cb58"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb58-1"><a href="#cb58-1" aria-hidden="true"></a><span class="ot">myIf ::</span> <span class="dt">Bool</span> <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b</span>
<span id="cb58-2"><a href="#cb58-2" aria-hidden="true"></a>myIf p x y <span class="ot">=</span> <span class="kw">if</span> p <span class="kw">then</span> x <span class="kw">else</span> y </span>
<span id="cb58-3"><a href="#cb58-3" aria-hidden="true"></a></span>
<span id="cb58-4"><a href="#cb58-4" aria-hidden="true"></a>λ<span class="op">&gt;</span> myIf (<span class="dv">4</span> <span class="op">&gt;</span> <span class="dv">2</span>) <span class="st">&quot;true&quot;</span> viciousCircle</span>
<span id="cb58-5"><a href="#cb58-5" aria-hidden="true"></a><span class="st">&quot;true&quot;</span></span></code></pre></div>
<p>A somewhat more useful control-structure is the <code>cond</code> (for conditional) function that stems from LISP and Scheme languages. It allows you to define a more table-like decision structure, somewhat resembling a <code>switch</code> statement from C-style languages:</p>
<div class="sourceCode" id="cb59"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb59-1"><a href="#cb59-1" aria-hidden="true"></a><span class="ot">cond ::</span> [(<span class="dt">Bool</span>, a)] <span class="ot">-&gt;</span> a</span>
<span id="cb59-2"><a href="#cb59-2" aria-hidden="true"></a>cond []                 <span class="ot">=</span> <span class="fu">error</span> <span class="st">&quot;make sure that at least one condition is true&quot;</span></span>
<span id="cb59-3"><a href="#cb59-3" aria-hidden="true"></a>cond ((<span class="dt">True</span>,  v)<span class="op">:</span>rest)  <span class="ot">=</span> v</span>
<span id="cb59-4"><a href="#cb59-4" aria-hidden="true"></a>cond ((<span class="dt">False</span>, _)<span class="op">:</span>rest)  <span class="ot">=</span> cond rest</span></code></pre></div>
<p>With this function we can implement a signum function <code>sign</code> as follows:</p>
<div class="sourceCode" id="cb60"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb60-1"><a href="#cb60-1" aria-hidden="true"></a><span class="ot">sign ::</span> (<span class="dt">Ord</span> a, <span class="dt">Num</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb60-2"><a href="#cb60-2" aria-hidden="true"></a>sign x <span class="ot">=</span> cond [(x <span class="op">&gt;</span> <span class="dv">0</span>     , <span class="dv">1</span> )</span>
<span id="cb60-3"><a href="#cb60-3" aria-hidden="true"></a>              ,(x <span class="op">&lt;</span> <span class="dv">0</span>     , <span class="op">-</span><span class="dv">1</span>)</span>
<span id="cb60-4"><a href="#cb60-4" aria-hidden="true"></a>              ,(<span class="fu">otherwise</span> , <span class="dv">0</span> )]</span>
<span id="cb60-5"><a href="#cb60-5" aria-hidden="true"></a></span>
<span id="cb60-6"><a href="#cb60-6" aria-hidden="true"></a>λ<span class="op">&gt;</span> sign <span class="dv">5</span></span>
<span id="cb60-7"><a href="#cb60-7" aria-hidden="true"></a><span class="dv">1</span></span>
<span id="cb60-8"><a href="#cb60-8" aria-hidden="true"></a>λ<span class="op">&gt;</span> sign <span class="dv">0</span></span>
<span id="cb60-9"><a href="#cb60-9" aria-hidden="true"></a><span class="dv">0</span></span>
<span id="cb60-10"><a href="#cb60-10" aria-hidden="true"></a>λ<span class="op">&gt;</span> sign (<span class="op">-</span><span class="dv">4</span>)</span>
<span id="cb60-11"><a href="#cb60-11" aria-hidden="true"></a><span class="op">-</span><span class="dv">1</span></span></code></pre></div>
<h2 id="type-classes">Type Classes</h2>
<p>Now we come to one of the most distinguishing features of Haskell: <em>type classes</em>.</p>
<p>In the section <a href="#polymorphic-data-types">Polymorphic Data Types</a> we have seen that type variables (or parameters) allow type declarations to be polymorphic like in:</p>
<div class="sourceCode" id="cb61"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb61-1"><a href="#cb61-1" aria-hidden="true"></a><span class="kw">data</span> [a] <span class="ot">=</span> [] <span class="op">|</span> a <span class="op">:</span> [a]</span></code></pre></div>
<p>This approach is called <em>parametric polymorphism</em> and is used in several programming languages.</p>
<p>Type classes on the other hand address <em>ad hoc polymorphism</em> of data types. This approach is also known as <em>overloading</em>.</p>
<p>To get a first intuition let’s start with a simple example.</p>
<p>We would like to be able to use characters (represented by the data type <code>Char</code>) as if they were numbers. E.g. we would like to be able to things like:</p>
<div class="sourceCode" id="cb62"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb62-1"><a href="#cb62-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="ch">&#39;A&#39;</span> <span class="op">+</span> <span class="dv">25</span></span>
<span id="cb62-2"><a href="#cb62-2" aria-hidden="true"></a><span class="ch">&#39;Z&#39;</span></span>
<span id="cb62-3"><a href="#cb62-3" aria-hidden="true"></a></span>
<span id="cb62-4"><a href="#cb62-4" aria-hidden="true"></a><span class="co">-- please note that in Haskell a string is List of characters: type String = [Char]</span></span>
<span id="cb62-5"><a href="#cb62-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">map</span> (<span class="op">+</span> <span class="dv">5</span>) <span class="st">&quot;hello world&quot;</span></span>
<span id="cb62-6"><a href="#cb62-6" aria-hidden="true"></a><span class="st">&quot;mjqqt%|twqi&quot;</span></span>
<span id="cb62-7"><a href="#cb62-7" aria-hidden="true"></a></span>
<span id="cb62-8"><a href="#cb62-8" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">map</span> (\c <span class="ot">-&gt;</span> c <span class="op">-</span> <span class="dv">5</span>) <span class="st">&quot;mjqqt%|twqi&quot;</span></span>
<span id="cb62-9"><a href="#cb62-9" aria-hidden="true"></a><span class="st">&quot;hello world&quot;</span></span></code></pre></div>
<p>To enable this we will have to <em>overload</em> the infix operators <code>(+)</code> and <code>(-)</code> to work not only on numbers but also on characters. Now, let’s have a look at the type signature of the <code>(+)</code> operator:</p>
<div class="sourceCode" id="cb63"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb63-1"><a href="#cb63-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> (<span class="op">+</span>)</span>
<span id="cb63-2"><a href="#cb63-2" aria-hidden="true"></a><span class="ot">(+) ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>So <code>(+)</code> is not just declared to be of type <code>(+) :: a -&gt; a -&gt; a</code> but it contains a <strong>constraint</strong> on the type variable <code>a</code>, namely <code>Num a =&gt;</code>. The whole type signature of <code>(+)</code> can be read as: for all types <code>a</code> that are members of the type class <code>Num</code> the operator <code>(+)</code> has the type <code>a -&gt; a -&gt; a</code>.</p>
<p>Next we obtain more information on the type class <code>Num</code>:</p>
<div class="sourceCode" id="cb64"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb64-1"><a href="#cb64-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>info <span class="dt">Num</span></span>
<span id="cb64-2"><a href="#cb64-2" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Num</span> a <span class="kw">where</span></span>
<span id="cb64-3"><a href="#cb64-3" aria-hidden="true"></a><span class="ot">  (+) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-4"><a href="#cb64-4" aria-hidden="true"></a><span class="ot">  (-) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-5"><a href="#cb64-5" aria-hidden="true"></a><span class="ot">  (*) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-6"><a href="#cb64-6" aria-hidden="true"></a><span class="ot">  negate ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-7"><a href="#cb64-7" aria-hidden="true"></a><span class="ot">  abs ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-8"><a href="#cb64-8" aria-hidden="true"></a><span class="ot">  signum ::</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb64-9"><a href="#cb64-9" aria-hidden="true"></a><span class="ot">  fromInteger ::</span> <span class="dt">Integer</span> <span class="ot">-&gt;</span> a</span>
<span id="cb64-10"><a href="#cb64-10" aria-hidden="true"></a>  <span class="ot">{-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}</span></span>
<span id="cb64-11"><a href="#cb64-11" aria-hidden="true"></a>  	<span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-12"><a href="#cb64-12" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Word</span> <span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-13"><a href="#cb64-13" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Integer</span> <span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-14"><a href="#cb64-14" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Int</span> <span class="co">-- Defined in `GHC.Num&#39;</span></span>
<span id="cb64-15"><a href="#cb64-15" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Float</span> <span class="co">-- Defined in `GHC.Float&#39;</span></span>
<span id="cb64-16"><a href="#cb64-16" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Double</span> <span class="co">-- Defined in `GHC.Float&#39;</span></span></code></pre></div>
<p>This information details what functions a type <code>a</code> has to implement to be used as an instance of the <code>Num</code> type class. The line <code>{-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}</code> tells us what a minimal complete implementation has to provide. It also tells us that the types <code>Word</code>, <code>Integer</code>, <code>Int</code>, <code>Float</code> and <code>Double</code> are instances of the <code>Num</code> type class.</p>
<p>This is all we need to know to make the type <code>Char</code> an instance of the <code>Num</code> type class, so without further ado we dive into the implementation (please note that <code>fromEnum</code> converts a <code>Char</code> into an <code>Int</code> and <code>toEnum</code> converts an <code>Int</code> into an <code>Char</code>):</p>
<div class="sourceCode" id="cb65"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb65-1"><a href="#cb65-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Num</span> <span class="dt">Char</span> <span class="kw">where</span></span>
<span id="cb65-2"><a href="#cb65-2" aria-hidden="true"></a>  a <span class="op">+</span> b       <span class="ot">=</span> <span class="fu">toEnum</span> (<span class="fu">fromEnum</span> a <span class="op">+</span> <span class="fu">fromEnum</span> b)</span>
<span id="cb65-3"><a href="#cb65-3" aria-hidden="true"></a>  a <span class="op">-</span> b       <span class="ot">=</span> <span class="fu">toEnum</span> (<span class="fu">fromEnum</span> a <span class="op">-</span> <span class="fu">fromEnum</span> b)</span>
<span id="cb65-4"><a href="#cb65-4" aria-hidden="true"></a>  a <span class="op">*</span> b       <span class="ot">=</span> <span class="fu">toEnum</span> (<span class="fu">fromEnum</span> a <span class="op">*</span> <span class="fu">fromEnum</span> b)</span>
<span id="cb65-5"><a href="#cb65-5" aria-hidden="true"></a>  <span class="fu">abs</span> c       <span class="ot">=</span> c</span>
<span id="cb65-6"><a href="#cb65-6" aria-hidden="true"></a>  <span class="fu">signum</span>      <span class="ot">=</span> <span class="fu">toEnum</span> <span class="op">.</span> <span class="fu">signum</span> <span class="op">.</span> <span class="fu">fromEnum</span></span>
<span id="cb65-7"><a href="#cb65-7" aria-hidden="true"></a>  <span class="fu">fromInteger</span> <span class="ot">=</span> <span class="fu">toEnum</span> <span class="op">.</span> <span class="fu">fromInteger</span></span>
<span id="cb65-8"><a href="#cb65-8" aria-hidden="true"></a>  <span class="fu">negate</span> c    <span class="ot">=</span> c</span></code></pre></div>
<p>This piece of code makes the type <code>Char</code> an instance of the <code>Num</code> type class. We can then use <code>(+)</code> and `(-) as demonstrated above.</p>
<p>Originally the idea for type classes came up to provide overloading of arithmetic operators in order to use the same operators across all numeric types.</p>
<p>But the type classes concept proved to be useful in a variety of other cases as well. This has lead to a rich sets of type classes provided by the Haskell base library and a wealth of programming techniques that make use of this powerful concept.</p>
<p>Here comes a graphic overview of some of the most important type classes in the Haskell base library:</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/04/Base-classes.svg/510px-Base-classes.svg.png" alt="" /><figcaption>The hierarchy of basic type classes</figcaption>
</figure>
<p>I won’t go over all of these but I’ll cover some of the most important ones.</p>
<p>Let’s start with Eq:</p>
<div class="sourceCode" id="cb66"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb66-1"><a href="#cb66-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Eq</span> a <span class="kw">where</span></span>
<span id="cb66-2"><a href="#cb66-2" aria-hidden="true"></a>   (<span class="op">==</span>),<span class="ot"> (/=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb66-3"><a href="#cb66-3" aria-hidden="true"></a></span>
<span id="cb66-4"><a href="#cb66-4" aria-hidden="true"></a>       <span class="co">-- Minimal complete definition:</span></span>
<span id="cb66-5"><a href="#cb66-5" aria-hidden="true"></a>       <span class="co">--      (==) or (/=)</span></span>
<span id="cb66-6"><a href="#cb66-6" aria-hidden="true"></a>   x <span class="op">/=</span> y     <span class="ot">=</span>  <span class="fu">not</span> (x <span class="op">==</span> y)</span>
<span id="cb66-7"><a href="#cb66-7" aria-hidden="true"></a>   x <span class="op">==</span> y     <span class="ot">=</span>  <span class="fu">not</span> (x <span class="op">/=</span> y)</span></code></pre></div>
<p>This definition states two things:</p>
<ul>
<li>if a type <code>a</code> is to be made an instance of the class <code>Eq</code> it must support the functions <code>(==)</code> and <code>(/=)</code> both of them having type <code>a -&gt; a -&gt; Bool</code>.<br />
</li>
<li><code>Eq</code> provides <em>default definitions</em> for <code>(==)</code> and <code>(/=)</code> in terms of each other. As a consequence, there is no need for a type in <code>Eq</code> to provide both definitions - given one of them, the other will work automatically.</li>
</ul>
<p>Now we can turn some of the data types that we defined in the section on <a href="#algebraic-data-types">Algebraic Data Types</a> into instances of the <code>Eq</code> type class.</p>
<p>Here the type declarations as a recap:</p>
<div class="sourceCode" id="cb67"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb67-1"><a href="#cb67-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span>   <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span></span>
<span id="cb67-2"><a href="#cb67-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span> </span>
<span id="cb67-3"><a href="#cb67-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span></span></code></pre></div>
<p>First, we create Eq instances for the simple types <code>Status</code> and <code>Severity</code> by defining the <code>(==)</code> operator for each of them:</p>
<div class="sourceCode" id="cb68"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb68-1"><a href="#cb68-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Status</span> <span class="kw">where</span></span>
<span id="cb68-2"><a href="#cb68-2" aria-hidden="true"></a>  <span class="dt">Green</span>  <span class="op">==</span> <span class="dt">Green</span>  <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-3"><a href="#cb68-3" aria-hidden="true"></a>  <span class="dt">Yellow</span> <span class="op">==</span> <span class="dt">Yellow</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-4"><a href="#cb68-4" aria-hidden="true"></a>  <span class="dt">Red</span>    <span class="op">==</span> <span class="dt">Red</span>    <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-5"><a href="#cb68-5" aria-hidden="true"></a>  _      <span class="op">==</span> _      <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb68-6"><a href="#cb68-6" aria-hidden="true"></a>  </span>
<span id="cb68-7"><a href="#cb68-7" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Severity</span> <span class="kw">where</span></span>
<span id="cb68-8"><a href="#cb68-8" aria-hidden="true"></a>  <span class="dt">Low</span>    <span class="op">==</span> <span class="dt">Low</span>    <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-9"><a href="#cb68-9" aria-hidden="true"></a>  <span class="dt">Middle</span> <span class="op">==</span> <span class="dt">Middle</span> <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-10"><a href="#cb68-10" aria-hidden="true"></a>  <span class="dt">High</span>   <span class="op">==</span> <span class="dt">High</span>   <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb68-11"><a href="#cb68-11" aria-hidden="true"></a>  _      <span class="op">==</span> _      <span class="ot">=</span> <span class="dt">False</span></span></code></pre></div>
<p>Next, we create an <code>Eq</code> instance for <code>PairStatusSeverity</code> by defining the <code>(==)</code> operator:</p>
<div class="sourceCode" id="cb69"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb69-1"><a href="#cb69-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">PairStatusSeverity</span> <span class="kw">where</span></span>
<span id="cb69-2"><a href="#cb69-2" aria-hidden="true"></a>   (<span class="dt">PSS</span> sta1 sev1) <span class="op">==</span> (<span class="dt">PSS</span> sta2 sev2) <span class="ot">=</span> (sta1 <span class="op">==</span> sta2) <span class="op">&amp;&amp;</span> (sev1 <span class="op">==</span> sev2)</span></code></pre></div>
<p>With these definitions it is now possible to use the <code>(==)</code> and <code>(/=)</code> on our three types.</p>
<p>As you will have noticed, the code for implementing <code>Eq</code> is quite boring. Even a machine could do it!</p>
<p>That’s why the language designers have provided a <code>deriving</code> mechanism to let the compiler automatically implement type class instances if it’s automatically derivable as in the <code>Eq</code> case.</p>
<p>With this syntax it much easier to let a type implement the <code>Eq</code> type class:</p>
<div class="sourceCode" id="cb70"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb70-1"><a href="#cb70-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span>   <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span>          <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb70-2"><a href="#cb70-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span>           <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span>
<span id="cb70-3"><a href="#cb70-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span> <span class="kw">deriving</span> (<span class="dt">Eq</span>)</span></code></pre></div>
<p>This automatic deriving of type class instances works for many cases and reduces a lof of repetitive code.</p>
<p>For example, its possible to automatically derive instances of the <code>Ord</code> type class, which provides ordering functionality:</p>
<div class="sourceCode" id="cb71"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb71-1"><a href="#cb71-1" aria-hidden="true"></a><span class="kw">class</span> (<span class="dt">Eq</span> a) <span class="ot">=&gt;</span> <span class="dt">Ord</span> a <span class="kw">where</span></span>
<span id="cb71-2"><a href="#cb71-2" aria-hidden="true"></a><span class="ot">    compare              ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Ordering</span></span>
<span id="cb71-3"><a href="#cb71-3" aria-hidden="true"></a>    (<span class="op">&lt;</span>), (<span class="op">&lt;=</span>), (<span class="op">&gt;</span>),<span class="ot"> (&gt;=) ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb71-4"><a href="#cb71-4" aria-hidden="true"></a>    <span class="fu">max</span>,<span class="ot"> min             ::</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb71-5"><a href="#cb71-5" aria-hidden="true"></a>    <span class="op">...</span></span></code></pre></div>
<p>If you are using <code>deriving</code> for the <code>Status</code> and <code>Severity</code> types, the Compiler will implement the ordering according to the ordering of the constructors in the type declaration. That is <code>Green &lt; Yellow &lt; Red</code> and <code>Low &lt; Middle &lt; High</code>:</p>
<div class="sourceCode" id="cb72"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb72-1"><a href="#cb72-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span>   <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span>          <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span>
<span id="cb72-2"><a href="#cb72-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span>           <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<h3 id="read-and-show">Read and Show</h3>
<p>Two other quite useful type classes are <code>Read</code> and <code>Show</code> that also support automatic deriving.</p>
<p><code>Show</code> provides a function <code>show</code> with the following type signature:</p>
<div class="sourceCode" id="cb73"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb73-1"><a href="#cb73-1" aria-hidden="true"></a><span class="fu">show</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">String</span></span></code></pre></div>
<p>This means that any type implementing <code>Show</code> can be converted (or <em>marshalled</em>) into a <code>String</code> representation. Creation of a <code>Show</code> instance can be achieved by adding a <code>deriving (Show)</code> clause to the type declaration.</p>
<div class="sourceCode" id="cb74"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb74-1"><a href="#cb74-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb74-2"><a href="#cb74-2" aria-hidden="true"></a></span>
<span id="cb74-3"><a href="#cb74-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">show</span> (<span class="dt">PSS</span> <span class="dt">Green</span> <span class="dt">Low</span>)</span>
<span id="cb74-4"><a href="#cb74-4" aria-hidden="true"></a><span class="st">&quot;PSS Green Low&quot;</span></span></code></pre></div>
<p>The <code>Read</code> type class is used to do the opposite: <em>unmarshalling</em> data from a String with the function <code>read</code>:</p>
<div class="sourceCode" id="cb75"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb75-1"><a href="#cb75-1" aria-hidden="true"></a><span class="fu">read</span><span class="ot"> ::</span> <span class="dt">Read</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>This signature says that for any type <code>a</code> implementing the <code>Read</code> type class the function <code>read</code> can reconstruct an instance of <code>a</code> from its String representation:</p>
<div class="sourceCode" id="cb76"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb76-1"><a href="#cb76-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">PairStatusSeverity</span> <span class="ot">=</span> <span class="dt">PSS</span> <span class="dt">Status</span> <span class="dt">Severity</span> <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb76-2"><a href="#cb76-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Status</span> <span class="ot">=</span> <span class="dt">Green</span> <span class="op">|</span> <span class="dt">Yellow</span> <span class="op">|</span> <span class="dt">Red</span>            <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb76-3"><a href="#cb76-3" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Severity</span> <span class="ot">=</span> <span class="dt">Low</span> <span class="op">|</span> <span class="dt">Middle</span> <span class="op">|</span> <span class="dt">High</span>           <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Read</span>)</span>
<span id="cb76-4"><a href="#cb76-4" aria-hidden="true"></a></span>
<span id="cb76-5"><a href="#cb76-5" aria-hidden="true"></a>λ<span class="op">&gt;</span> marshalled <span class="ot">=</span> <span class="fu">show</span> (<span class="dt">PSS</span> <span class="dt">Green</span> <span class="dt">Low</span>)</span>
<span id="cb76-6"><a href="#cb76-6" aria-hidden="true"></a></span>
<span id="cb76-7"><a href="#cb76-7" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">read</span><span class="ot"> marshalled ::</span> <span class="dt">PairStatusSeverity</span></span>
<span id="cb76-8"><a href="#cb76-8" aria-hidden="true"></a><span class="dt">PSS</span> <span class="dt">Green</span> <span class="dt">Low</span></span></code></pre></div>
<p>Please note that it is required to specify the expected target type with the <code>:: PairStatusSeverity</code> clause. Haskell uses static compile time typing. At compile time there is no way to determine which type an expression <code>read "some string content"</code> will return. Thus the expected type must be specified at compile time. Either by an implicit declaration given by some function type signature, or as in the example above, by an explicit declaration.</p>
<p>Together <code>show</code> and <code>read</code> provide a convenient way to serialize (marshal) and deserialize (unmarshal) Haskell data structures. This mechanism does not provide any optimized binary representation, but it is still good enough for many practical purposes, the format is more compact than JSON, and it does not require a parser library.</p>
<h3 id="functor-and-foldable">Functor and Foldable</h3>
<p>The most interesting type classes are those derived from abstract algebra or category theory. Studying them is a very rewarding process that I highly recommend. However, it is definitely beyond the scope of this article. Thus, I’m only pointing to two resources covering this part of the Haskell type class hierarchy. The first one is the legendary <a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a> by Brent Yorgey. The second one is <a href="https://github.com/thma/LtuPatternFactory">Lambda the ultimate Pattern Factory</a> by myself. This text relates the algebraic type classes to software design patterns, and therefore we will only cover some of these type classes.</p>
<p>In the section on <a href="#declarative-programming">declarative programming</a> we came across two very useful concepts:</p>
<ul>
<li>mapping a function over all elements in a list (<code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code>)</li>
<li>reducing a list with a binary operation and the neutral (identity) element of that operation (<code>foldr :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</code>)</li>
</ul>
<p>These concepts are not only useful for lists, but also for many other data structures. So it doesn’t come as a surprise that there are type classes that abstract these concepts.</p>
<h4 id="functor">Functor</h4>
<p>The <code>Functor</code> type class generalizes the functionality of applying a function to a value in a context without altering the context, (e.g. mapping a function over a list <code>[a]</code> which returns a new list <code>[b]</code> of the same length):</p>
<div class="sourceCode" id="cb77"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb77-1"><a href="#cb77-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Functor</span> f <span class="kw">where</span></span>
<span id="cb77-2"><a href="#cb77-2" aria-hidden="true"></a><span class="ot">  fmap ::</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> f a <span class="ot">-&gt;</span> f b</span></code></pre></div>
<p>Let’s take a closer look at this idea by playing with a simple binary tree:</p>
<div class="sourceCode" id="cb78"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb78-1"><a href="#cb78-1" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Show</span>)</span>
<span id="cb78-2"><a href="#cb78-2" aria-hidden="true"></a></span>
<span id="cb78-3"><a href="#cb78-3" aria-hidden="true"></a><span class="co">-- a simple instance binary tree:</span></span>
<span id="cb78-4"><a href="#cb78-4" aria-hidden="true"></a><span class="ot">statusTree ::</span> <span class="dt">Tree</span> <span class="dt">Status</span></span>
<span id="cb78-5"><a href="#cb78-5" aria-hidden="true"></a>statusTree <span class="ot">=</span> <span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Green</span>) (<span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Red</span>) (<span class="dt">Leaf</span> <span class="dt">Yellow</span>))</span>
<span id="cb78-6"><a href="#cb78-6" aria-hidden="true"></a></span>
<span id="cb78-7"><a href="#cb78-7" aria-hidden="true"></a><span class="co">-- a function mapping Status to Severity</span></span>
<span id="cb78-8"><a href="#cb78-8" aria-hidden="true"></a><span class="ot">toSeverity ::</span> <span class="dt">Status</span> <span class="ot">-&gt;</span> <span class="dt">Severity</span></span>
<span id="cb78-9"><a href="#cb78-9" aria-hidden="true"></a>toSeverity <span class="dt">Green</span>  <span class="ot">=</span> <span class="dt">Low</span></span>
<span id="cb78-10"><a href="#cb78-10" aria-hidden="true"></a>toSeverity <span class="dt">Yellow</span> <span class="ot">=</span> <span class="dt">Middle</span></span>
<span id="cb78-11"><a href="#cb78-11" aria-hidden="true"></a>toSeverity <span class="dt">Red</span>    <span class="ot">=</span> <span class="dt">High</span></span></code></pre></div>
<p>We want to use the function <code>toSeverity :: Status -&gt; Severity</code> to convert all <code>Status</code> elements of the <code>statusTree</code> into <code>Severity</code> instances.</p>
<p>Therefore, we let <code>Tree</code> instantiate the <code>Functor</code> class:</p>
<div class="sourceCode" id="cb79"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb79-1"><a href="#cb79-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Functor</span> <span class="dt">Tree</span> <span class="kw">where</span></span>
<span id="cb79-2"><a href="#cb79-2" aria-hidden="true"></a>  <span class="fu">fmap</span> f (<span class="dt">Leaf</span> a)   <span class="ot">=</span> <span class="dt">Leaf</span> (f a)</span>
<span id="cb79-3"><a href="#cb79-3" aria-hidden="true"></a>  <span class="fu">fmap</span> f (<span class="dt">Node</span> a b) <span class="ot">=</span> <span class="dt">Node</span> (<span class="fu">fmap</span> f a) (<span class="fu">fmap</span> f b)</span></code></pre></div>
<p>We can now use <code>fmap</code> on <code>Tree</code> data structures:</p>
<div class="sourceCode" id="cb80"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb80-1"><a href="#cb80-1" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">fmap</span> toSeverity statusTree</span>
<span id="cb80-2"><a href="#cb80-2" aria-hidden="true"></a><span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Low</span>) (<span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">High</span>) (<span class="dt">Leaf</span> <span class="dt">Middle</span>))</span>
<span id="cb80-3"><a href="#cb80-3" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span><span class="kw">type</span> it</span>
<span id="cb80-4"><a href="#cb80-4" aria-hidden="true"></a><span class="ot">it ::</span> <span class="dt">Tree</span> <span class="dt">Severity</span></span></code></pre></div>
<p>As already described above, fmap maintains the tree structure unchanged but converts the type of each <code>Leaf</code> element, which effectively changes the type of the tree to <code>Tree Severity</code>.</p>
<p>As derivation of <code>Functor</code> instances is a boring task, it is again possible to use the <code>deriving</code> clause to let data types instantiate <code>Functor</code>:</p>
<div class="sourceCode" id="cb81"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb81-1"><a href="#cb81-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveFunctor #-}</span> <span class="co">-- this pragma allows automatic deriving of Functor instances</span></span>
<span id="cb81-2"><a href="#cb81-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Functor</span>)</span></code></pre></div>
<h4 id="foldable">Foldable</h4>
<p>As already mentioned, <code>Foldable</code> provides the ability to perform <em>folding</em> operations on any data type instantiating the <code>Foldable</code> type class:</p>
<div class="sourceCode" id="cb82"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb82-1"><a href="#cb82-1" aria-hidden="true"></a><span class="kw">class</span> <span class="dt">Foldable</span> t <span class="kw">where</span></span>
<span id="cb82-2"><a href="#cb82-2" aria-hidden="true"></a><span class="ot">  fold    ::</span> <span class="dt">Monoid</span> m <span class="ot">=&gt;</span> t m <span class="ot">-&gt;</span> m</span>
<span id="cb82-3"><a href="#cb82-3" aria-hidden="true"></a><span class="ot">  foldMap ::</span> <span class="dt">Monoid</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> m</span>
<span id="cb82-4"><a href="#cb82-4" aria-hidden="true"></a><span class="ot">  foldr   ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-5"><a href="#cb82-5" aria-hidden="true"></a><span class="ot">  foldr&#39;  ::</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-6"><a href="#cb82-6" aria-hidden="true"></a><span class="ot">  foldl   ::</span> (b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-7"><a href="#cb82-7" aria-hidden="true"></a><span class="ot">  foldl&#39;  ::</span> (b <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> b</span>
<span id="cb82-8"><a href="#cb82-8" aria-hidden="true"></a><span class="ot">  foldr1  ::</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-9"><a href="#cb82-9" aria-hidden="true"></a><span class="ot">  foldl1  ::</span> (a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-10"><a href="#cb82-10" aria-hidden="true"></a><span class="ot">  toList  ::</span> t a <span class="ot">-&gt;</span> [a]</span>
<span id="cb82-11"><a href="#cb82-11" aria-hidden="true"></a><span class="ot">  null    ::</span> t a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb82-12"><a href="#cb82-12" aria-hidden="true"></a><span class="ot">  length  ::</span> t a <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb82-13"><a href="#cb82-13" aria-hidden="true"></a><span class="ot">  elem    ::</span> <span class="dt">Eq</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> t a <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb82-14"><a href="#cb82-14" aria-hidden="true"></a><span class="ot">  maximum ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-15"><a href="#cb82-15" aria-hidden="true"></a><span class="ot">  minimum ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-16"><a href="#cb82-16" aria-hidden="true"></a><span class="ot">  sum     ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span>
<span id="cb82-17"><a href="#cb82-17" aria-hidden="true"></a><span class="ot">  product ::</span> <span class="dt">Num</span> a <span class="ot">=&gt;</span> t a <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>besides the abstraction of the <code>foldr</code> function, <code>Foldable</code> provides several other useful operations when dealing with <em>container</em>-like structures.</p>
<p>Because of the regular structure algebraic data types it is again possible to automatically derive <code>Foldable</code> instances by using the <code>deriving</code> clause:</p>
<div class="sourceCode" id="cb83"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb83-1"><a href="#cb83-1" aria-hidden="true"></a><span class="ot">{-# LANGUAGE DeriveFunctor, DeriveFoldable #-}</span> <span class="co">-- allows automatic deriving of Functor and Foldable</span></span>
<span id="cb83-2"><a href="#cb83-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Tree</span> a <span class="ot">=</span> <span class="dt">Leaf</span> a <span class="op">|</span> <span class="dt">Node</span> (<span class="dt">Tree</span> a) (<span class="dt">Tree</span> a) <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Show</span>, <span class="dt">Read</span>, <span class="dt">Functor</span>, <span class="dt">Foldable</span>)</span></code></pre></div>
<p>Of course, we can also implement the <code>foldr</code> function on our own:</p>
<div class="sourceCode" id="cb84"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb84-1"><a href="#cb84-1" aria-hidden="true"></a><span class="kw">instance</span> <span class="dt">Foldable</span> <span class="dt">Tree</span> <span class="kw">where</span></span>
<span id="cb84-2"><a href="#cb84-2" aria-hidden="true"></a>  <span class="fu">foldr</span> f acc (<span class="dt">Leaf</span> a)   <span class="ot">=</span> f a acc</span>
<span id="cb84-3"><a href="#cb84-3" aria-hidden="true"></a>  <span class="fu">foldr</span> f acc (<span class="dt">Node</span> a b) <span class="ot">=</span> <span class="fu">foldr</span> f (<span class="fu">foldr</span> f acc b) a</span></code></pre></div>
<p>We can now use <code>foldr</code> and other class methods of <code>Foldable</code>:</p>
<div class="sourceCode" id="cb85"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb85-1"><a href="#cb85-1" aria-hidden="true"></a><span class="ot">statusTree ::</span> <span class="dt">Tree</span> <span class="dt">Status</span></span>
<span id="cb85-2"><a href="#cb85-2" aria-hidden="true"></a>statusTree <span class="ot">=</span> <span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Green</span>) (<span class="dt">Node</span> (<span class="dt">Leaf</span> <span class="dt">Red</span>) (<span class="dt">Leaf</span> <span class="dt">Yellow</span>))</span>
<span id="cb85-3"><a href="#cb85-3" aria-hidden="true"></a></span>
<span id="cb85-4"><a href="#cb85-4" aria-hidden="true"></a>maxStatus <span class="ot">=</span> <span class="fu">foldr</span> <span class="fu">max</span> <span class="dt">Green</span> statusTree</span>
<span id="cb85-5"><a href="#cb85-5" aria-hidden="true"></a>maxStatus&#39; <span class="ot">=</span> <span class="fu">maximum</span> statusTree</span>
<span id="cb85-6"><a href="#cb85-6" aria-hidden="true"></a></span>
<span id="cb85-7"><a href="#cb85-7" aria-hidden="true"></a><span class="co">-- using length from Foldable type class</span></span>
<span id="cb85-8"><a href="#cb85-8" aria-hidden="true"></a>treeSize <span class="ot">=</span> <span class="fu">length</span> statusTree</span>
<span id="cb85-9"><a href="#cb85-9" aria-hidden="true"></a></span>
<span id="cb85-10"><a href="#cb85-10" aria-hidden="true"></a><span class="co">-- in GHCi:</span></span>
<span id="cb85-11"><a href="#cb85-11" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t <span class="fu">max</span></span>
<span id="cb85-12"><a href="#cb85-12" aria-hidden="true"></a><span class="fu">max</span><span class="ot"> ::</span> <span class="dt">Ord</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> a</span>
<span id="cb85-13"><a href="#cb85-13" aria-hidden="true"></a></span>
<span id="cb85-14"><a href="#cb85-14" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">foldr</span> <span class="fu">max</span> <span class="dt">Green</span> statusTree</span>
<span id="cb85-15"><a href="#cb85-15" aria-hidden="true"></a><span class="dt">Red</span></span>
<span id="cb85-16"><a href="#cb85-16" aria-hidden="true"></a><span class="co">-- using maximum from Foldable type class:</span></span>
<span id="cb85-17"><a href="#cb85-17" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="fu">maximum</span> statusTree</span>
<span id="cb85-18"><a href="#cb85-18" aria-hidden="true"></a><span class="dt">Red</span></span>
<span id="cb85-19"><a href="#cb85-19" aria-hidden="true"></a>λ<span class="op">&gt;</span> treeSize</span>
<span id="cb85-20"><a href="#cb85-20" aria-hidden="true"></a><span class="dv">3</span></span>
<span id="cb85-21"><a href="#cb85-21" aria-hidden="true"></a><span class="co">-- using toList from Foldable type class:</span></span>
<span id="cb85-22"><a href="#cb85-22" aria-hidden="true"></a>λ<span class="op">&gt;</span> toList statusTree</span>
<span id="cb85-23"><a href="#cb85-23" aria-hidden="true"></a>[<span class="dt">Green</span>,<span class="dt">Red</span>,<span class="dt">Yellow</span>]</span></code></pre></div>
<h3 id="the-maybe-monad">The Maybe Monad</h3>
<p>Now we will take the data type <code>Maybe</code> as an example to dive deeper into the more complex parts of the Haskell type class system.</p>
<p>The <code>Maybe</code> type is quite simple, it can be either a null value, called <code>Nothing</code> or a value of type <code>a</code> constructed by <code>Just a</code>:</p>
<div class="sourceCode" id="cb86"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb86-1"><a href="#cb86-1" aria-hidden="true"></a><span class="kw">data</span>  <span class="dt">Maybe</span> a  <span class="ot">=</span>  <span class="dt">Nothing</span> <span class="op">|</span> <span class="dt">Just</span> a <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p>The Maybe type is helpful in situations where certain operation <em>may</em> return a valid result. Take for instance the function <code>lookup</code> from the Haskell base library. It looks up a key in a list of key-value pairs. If it finds the key, the associated value <code>val</code> is returned - but wrapped in a Maybe: <code>Just val</code>. If it doesn’t find the key, <code>Nothing</code> is returned:</p>
<div class="sourceCode" id="cb87"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb87-1"><a href="#cb87-1" aria-hidden="true"></a><span class="fu">lookup</span><span class="ot"> ::</span> (<span class="dt">Eq</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> [(a,b)] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb87-2"><a href="#cb87-2" aria-hidden="true"></a><span class="fu">lookup</span> _key []  <span class="ot">=</span>  <span class="dt">Nothing</span></span>
<span id="cb87-3"><a href="#cb87-3" aria-hidden="true"></a><span class="fu">lookup</span>  key ((k,val)<span class="op">:</span>rest)</span>
<span id="cb87-4"><a href="#cb87-4" aria-hidden="true"></a>    <span class="op">|</span> key <span class="op">==</span> k  <span class="ot">=</span>  <span class="dt">Just</span> val</span>
<span id="cb87-5"><a href="#cb87-5" aria-hidden="true"></a>    <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span>  <span class="fu">lookup</span> key rest</span></code></pre></div>
<p>The <code>Maybe</code> type is a simple way to avoid NullPointer errors or similar issues with undefined results. Thus, many languages have adopted it under different names. In Java for instance, it is called <code>Optional</code>.</p>
<h4 id="total-functions">Total functions</h4>
<p>In Haskell, it is considered good practise to use <em>total functions</em> - that is functions that have defined return values for all possible input values - where ever possible to avoid runtime errors.</p>
<p>Typical examples for <em>partial</em> (i.e. non-total) functions are division and square roots. We can use <code>Maybe</code> to make them total:</p>
<div class="sourceCode" id="cb88"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb88-1"><a href="#cb88-1" aria-hidden="true"></a><span class="ot">safeDiv ::</span> (<span class="dt">Eq</span> a, <span class="dt">Fractional</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb88-2"><a href="#cb88-2" aria-hidden="true"></a>safeDiv _ <span class="dv">0</span> <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb88-3"><a href="#cb88-3" aria-hidden="true"></a>safeDiv x y <span class="ot">=</span> <span class="dt">Just</span> (x <span class="op">/</span> y)</span>
<span id="cb88-4"><a href="#cb88-4" aria-hidden="true"></a></span>
<span id="cb88-5"><a href="#cb88-5" aria-hidden="true"></a><span class="ot">safeRoot ::</span> (<span class="dt">Ord</span> a, <span class="dt">Floating</span> a) <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb88-6"><a href="#cb88-6" aria-hidden="true"></a>safeRoot x</span>
<span id="cb88-7"><a href="#cb88-7" aria-hidden="true"></a>  <span class="op">|</span> x <span class="op">&lt;</span> <span class="dv">0</span>     <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb88-8"><a href="#cb88-8" aria-hidden="true"></a>  <span class="op">|</span> <span class="fu">otherwise</span> <span class="ot">=</span> <span class="dt">Just</span> (<span class="fu">sqrt</span> x)</span></code></pre></div>
<p>In fact, there are alternative base libraries that don’t provide any partial functions.</p>
<h4 id="composition-of-maybe-operations">Composition of Maybe operations</h4>
<p>Now let’s consider a situation where we want to combine several of those functions. Say for example we first want to lookup the divisor from a key-value table, then perform a division with it and finally compute the square root of the quotient:</p>
<div class="sourceCode" id="cb89"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb89-1"><a href="#cb89-1" aria-hidden="true"></a><span class="ot">findDivRoot ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [(<span class="dt">String</span>, <span class="dt">Double</span>)] <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Double</span></span>
<span id="cb89-2"><a href="#cb89-2" aria-hidden="true"></a>findDivRoot x key <span class="fu">map</span> <span class="ot">=</span></span>
<span id="cb89-3"><a href="#cb89-3" aria-hidden="true"></a>  <span class="kw">case</span> <span class="fu">lookup</span> key <span class="fu">map</span> <span class="kw">of</span></span>
<span id="cb89-4"><a href="#cb89-4" aria-hidden="true"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb89-5"><a href="#cb89-5" aria-hidden="true"></a>      <span class="dt">Just</span> y  <span class="ot">-&gt;</span> <span class="kw">case</span> safeDiv x y <span class="kw">of</span></span>
<span id="cb89-6"><a href="#cb89-6" aria-hidden="true"></a>          <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb89-7"><a href="#cb89-7" aria-hidden="true"></a>          <span class="dt">Just</span> d  <span class="ot">-&gt;</span> <span class="kw">case</span> safeRoot d <span class="kw">of</span></span>
<span id="cb89-8"><a href="#cb89-8" aria-hidden="true"></a>              <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span>
<span id="cb89-9"><a href="#cb89-9" aria-hidden="true"></a>              <span class="dt">Just</span> r  <span class="ot">-&gt;</span> <span class="dt">Just</span> r</span>
<span id="cb89-10"><a href="#cb89-10" aria-hidden="true"></a></span>
<span id="cb89-11"><a href="#cb89-11" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb89-12"><a href="#cb89-12" aria-hidden="true"></a>λ<span class="op">&gt;</span> findDivRoot <span class="dv">27</span> <span class="st">&quot;val&quot;</span> [(<span class="st">&quot;val&quot;</span>, <span class="dv">3</span>)]</span>
<span id="cb89-13"><a href="#cb89-13" aria-hidden="true"></a><span class="dt">Just</span> <span class="fl">3.0</span></span>
<span id="cb89-14"><a href="#cb89-14" aria-hidden="true"></a>λ<span class="op">&gt;</span> findDivRoot <span class="dv">27</span> <span class="st">&quot;val&quot;</span> [(<span class="st">&quot;val&quot;</span>, <span class="dv">0</span>)]</span>
<span id="cb89-15"><a href="#cb89-15" aria-hidden="true"></a><span class="dt">Nothing</span></span>
<span id="cb89-16"><a href="#cb89-16" aria-hidden="true"></a>λ<span class="op">&gt;</span> findDivRoot <span class="dv">27</span> <span class="st">&quot;val&quot;</span> [(<span class="st">&quot;val&quot;</span>, <span class="op">-</span><span class="dv">3</span>)]</span>
<span id="cb89-17"><a href="#cb89-17" aria-hidden="true"></a><span class="dt">Nothing</span></span></code></pre></div>
<p>The resulting control flow is depicted in the following diagram, which was inspired by the <a href="https://fsharpforfunandprofit.com/rop/">Railroad Oriented Programming</a> presentation: <img src="/img/maybe.png" width="924" alt="The Maybe Railroad"/></p>
<p>In each single step we have to check for <code>Nothing</code>, in that case we directly short circuit to an overall <code>Nothing</code> result value. In the <code>Just</code> case we proceed to the next processing step.</p>
<p>This kind of handling is repetitive and buries the actual intention under a lot of boilerplate. As Haskell uses layout (i.e. indentation) instead of curly brackets to separate blocks the code will end up in what is called the <em>dreaded staircase</em>: it marches to the right of the screen.</p>
<p>So we are looking for a way to improve the code by abstracting away the chaining of functions that return <code>Maybe</code> values and providing a way to <em>short circuit</em> the <code>Nothing</code> cases.</p>
<p>We need an operator <code>andThen</code> that takes the <code>Maybe</code> result of a first function application as first argument, and a function as second argument that will be used in the <code>Just x</code> case and again returns a <code>Maybe</code> result. In case that the input is <code>Nothing</code> the operator will directly return <code>Nothing</code> without any further processing. In case that the input is <code>Just x</code> the operator will apply the argument function <code>fun</code> to <code>x</code> and return its result:</p>
<div class="sourceCode" id="cb90"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb90-1"><a href="#cb90-1" aria-hidden="true"></a><span class="ot">andThen ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span>
<span id="cb90-2"><a href="#cb90-2" aria-hidden="true"></a>andThen <span class="dt">Nothing</span> _fun <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb90-3"><a href="#cb90-3" aria-hidden="true"></a>andThen (<span class="dt">Just</span> x) fun <span class="ot">=</span> fun x</span></code></pre></div>
<p>We can then rewrite <code>findDivRoot</code> as follows:</p>
<div class="sourceCode" id="cb91"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb91-1"><a href="#cb91-1" aria-hidden="true"></a>findDivRoot&#39;&#39;&#39;&#39; x key <span class="fu">map</span> <span class="ot">=</span></span>
<span id="cb91-2"><a href="#cb91-2" aria-hidden="true"></a>  <span class="fu">lookup</span> key <span class="fu">map</span> <span class="ot">`andThen`</span> \y <span class="ot">-&gt;</span></span>
<span id="cb91-3"><a href="#cb91-3" aria-hidden="true"></a>  safeDiv x y    <span class="ot">`andThen`</span> \d <span class="ot">-&gt;</span></span>
<span id="cb91-4"><a href="#cb91-4" aria-hidden="true"></a>  safeRoot d</span></code></pre></div>
<p>(Side note: In Java the <code>Optional</code> type has a corresponding method: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html#flatMap-java.util.function.Function-">Optional.flatmap</a>)</p>
<p>This kind of chaining of functions in the context of a specific data type is quite common. So, it doesn’t surprise us that there exists an even more abstract <code>andThen</code> operator that works for arbitrary parameterized data types:</p>
<div class="sourceCode" id="cb92"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb92-1"><a href="#cb92-1" aria-hidden="true"></a><span class="ot">(&gt;&gt;=) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m b</span></code></pre></div>
<p>When we compare this <em>bind</em> operator with the type signature of the <code>andThen</code> operator:</p>
<div class="sourceCode" id="cb93"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb93-1"><a href="#cb93-1" aria-hidden="true"></a><span class="ot">andThen ::</span> <span class="dt">Maybe</span> a <span class="ot">-&gt;</span> (a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> b</span></code></pre></div>
<p>We can see that both operators bear the same structure. The only difference is that instead of the concrete type <code>Maybe</code> the signature of <code>(&gt;&gt;=)</code> uses a type variable <code>m</code> with a <code>Monad</code> type class constraint. We can read this type signature as:</p>
<p>For any type <code>m</code> of the type class <code>Monad</code> the operator <code>(&gt;&gt;=)</code> is defined as <code>m a -&gt; (a -&gt; m b) -&gt; m b</code> Based on <code>(&gt;&gt;=)</code> we can rewrite the <code>findDivRoot</code> function as follows:</p>
<div class="sourceCode" id="cb94"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb94-1"><a href="#cb94-1" aria-hidden="true"></a>findDivRoot&#39; x key <span class="fu">map</span> <span class="ot">=</span></span>
<span id="cb94-2"><a href="#cb94-2" aria-hidden="true"></a>  <span class="fu">lookup</span> key <span class="fu">map</span> <span class="op">&gt;&gt;=</span> \y <span class="ot">-&gt;</span></span>
<span id="cb94-3"><a href="#cb94-3" aria-hidden="true"></a>  safeDiv x y    <span class="op">&gt;&gt;=</span> \d <span class="ot">-&gt;</span></span>
<span id="cb94-4"><a href="#cb94-4" aria-hidden="true"></a>  safeRoot d</span></code></pre></div>
<p>Monads are a central element of the Haskell type class ecosystem. In fact the monadic composition based on <code>(&gt;&gt;=)</code> is so frequently used that there exists some specific syntactic sugar for it. It’s called the do-Notation. Using do-Notation <code>findDivRoot</code> looks like this:</p>
<div class="sourceCode" id="cb95"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb95-1"><a href="#cb95-1" aria-hidden="true"></a>findDivRoot&#39;&#39;&#39; x key <span class="fu">map</span> <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb95-2"><a href="#cb95-2" aria-hidden="true"></a>  y <span class="ot">&lt;-</span> <span class="fu">lookup</span> key <span class="fu">map</span></span>
<span id="cb95-3"><a href="#cb95-3" aria-hidden="true"></a>  d <span class="ot">&lt;-</span> safeDiv x y</span>
<span id="cb95-4"><a href="#cb95-4" aria-hidden="true"></a>  safeRoot d</span></code></pre></div>
<p>This looks quite like a sequence of statements (including variable assignments) in an imperative language. Due to this similarity Monads have been aptly called <a href="http://book.realworldhaskell.org/read/monads.html#id642960">programmable semicolons</a>. But as we have seen: below the syntactic sugar it’s a purely functional composition!</p>
<h3 id="purity">Purity</h3>
<p>A function is called pure if it corresponds to a function in the mathematical sense: it associates each possible input value with an output value, and does nothing else. In particular,</p>
<ul>
<li>it has no side effects, that is to say, invoking it produces no observable effect other than the result it returns; it cannot also e.g. write to disk, or print to a screen.</li>
<li>it does not depend on anything other than its parameters, so when invoked in a different context or at a different time with the same arguments, it will produce the same result.</li>
</ul>
<p>Purity makes it easy to reason about code, as it is so close to mathematical calculus. The properties of a Haskell program can thus often be determined with equational reasoning. (As an example I have provided an <a href="https://github.com/thma/WhyHaskellMatters/blob/master/functor-proof.md">example for equational reasoning in Haskell</a>).</p>
<p>Purity also improves testability: It is much easier to set up tests without worrying about mocks or stubs to factor out access to backend layers.</p>
<p>All the functions that we have seen so far are all <em>pure</em> code that is free from side effects.</p>
<p>So how can we achieve side effects like writing to a database or serving HTTP requests in Haskell?</p>
<p>The Haskell language designers came up with a solution that distinguishes Haskell from most other languages: Side effects are always explicitly declared in the function type signature. In the next section we will learn how exactly this works.</p>
<h3 id="explicit-side-effects-with-the-io-monad">Explicit side effects with the IO Monad</h3>
<blockquote>
<p>Monadic I/O is a clever trick for encapsulating sequential, imperative computation, so that it can “do no evil” to the part that really does have precise semantics and good compositional properties.</p>
<p><a href="http://conal.net/blog/posts/is-haskell-a-purely-functional-language">Conal Elliott</a></p>
</blockquote>
<p>The most prominent Haskell Monad is the <code>IO</code> monad. It is used to compose operations that perform I/O. We’ll study this with a simple example.</p>
<p>In an imperative language, reading a String from the console simply returns a String value (e.g. <code>BufferedReader.readline()</code> in Java: <code>public String readLine() throws IOException</code>).</p>
<p>In Haskell the function <code>getLine</code> does not return a <code>String</code> value but an <code>IO String</code>:</p>
<div class="sourceCode" id="cb96"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb96-1"><a href="#cb96-1" aria-hidden="true"></a><span class="fu">getLine</span><span class="ot"> ::</span> <span class="dt">IO</span> <span class="dt">String</span></span></code></pre></div>
<p>This could be interpreted as: <code>getLine</code> returns a String in an IO context. In Haskell, it is not possible to extract the String value from its IO context (In Java on the other hand you could always catch away the <code>IOException</code>).</p>
<p>So how can we use the result of <code>getLine</code> in a function that takes a <code>String</code> value as input parameter?</p>
<p>We need the monadic bind operation <code>(&gt;&gt;=)</code> to do this in the same as we already saw in the <code>Maybe</code> monad:</p>
<div class="sourceCode" id="cb97"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb97-1"><a href="#cb97-1" aria-hidden="true"></a><span class="co">-- convert a string to upper case</span></span>
<span id="cb97-2"><a href="#cb97-2" aria-hidden="true"></a><span class="ot">strToUpper ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb97-3"><a href="#cb97-3" aria-hidden="true"></a>strToUpper <span class="ot">=</span> <span class="fu">map</span> <span class="fu">toUpper</span> </span>
<span id="cb97-4"><a href="#cb97-4" aria-hidden="true"></a> </span>
<span id="cb97-5"><a href="#cb97-5" aria-hidden="true"></a><span class="ot">up ::</span> <span class="dt">IO</span> () </span>
<span id="cb97-6"><a href="#cb97-6" aria-hidden="true"></a>up <span class="ot">=</span> </span>
<span id="cb97-7"><a href="#cb97-7" aria-hidden="true"></a>  <span class="fu">getLine</span> <span class="op">&gt;&gt;=</span> \str <span class="ot">-&gt;</span></span>
<span id="cb97-8"><a href="#cb97-8" aria-hidden="true"></a>  <span class="fu">print</span> (strToUpper str)</span>
<span id="cb97-9"><a href="#cb97-9" aria-hidden="true"></a></span>
<span id="cb97-10"><a href="#cb97-10" aria-hidden="true"></a><span class="co">-- and then in GHCi:</span></span>
<span id="cb97-11"><a href="#cb97-11" aria-hidden="true"></a>λ<span class="op">&gt;</span> <span class="op">:</span>t <span class="fu">print</span></span>
<span id="cb97-12"><a href="#cb97-12" aria-hidden="true"></a><span class="fu">print</span><span class="ot"> ::</span> <span class="dt">Show</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb97-13"><a href="#cb97-13" aria-hidden="true"></a>λ<span class="op">&gt;</span> up</span>
<span id="cb97-14"><a href="#cb97-14" aria-hidden="true"></a>hello world</span>
<span id="cb97-15"><a href="#cb97-15" aria-hidden="true"></a><span class="st">&quot;HELLO WORLD&quot;</span></span></code></pre></div>
<p>or with do-Notation:</p>
<div class="sourceCode" id="cb98"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb98-1"><a href="#cb98-1" aria-hidden="true"></a><span class="ot">up&#39; ::</span> <span class="dt">IO</span> () </span>
<span id="cb98-2"><a href="#cb98-2" aria-hidden="true"></a>up&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb98-3"><a href="#cb98-3" aria-hidden="true"></a>  str <span class="ot">&lt;-</span> <span class="fu">getLine</span></span>
<span id="cb98-4"><a href="#cb98-4" aria-hidden="true"></a>  <span class="fu">print</span> (strToUpper str)</span></code></pre></div>
<p>Making side effects explicit in function type signatures is one of the most outstanding achievements of Haskell. This feature will lead to a very rigid distinction between code that is free of side effects (aka <em>pure</em> code) and code that has side effects (aka <em>impure</em> code).</p>
<p>Keeping domain logic <em>pure</em> - particularly when working only with <em>total</em> functions - will dramatically improve reliability and testability as tests can be run without setting up mocks or stubbed backends.</p>
<p>It’s not possible to introduce side effects without making them explicit in type signatures. There is nothing like the <em>invisible</em> Java <code>RuntimeExceptions</code>. So you can rely on the compiler to detect any violations of a rule like “No impure code in domain logic”.</p>
<p>I’ve written a simple Restaurant Booking REST Service API that explains how Haskell helps you to keep domain logic pure by organizing your code according to the <a href="https://github.com/thma/RestaurantReservation">ports and adapters pattern</a>.</p>
<p>The section on type classes (and on Monads in particular) have been quite lengthy. Yet, they have hardly shown more than the tip of the iceberg. If you want to dive deeper into type classes, I recommend <a href="https://wiki.haskell.org/Typeclassopedia">The Typeclassopedia</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We have covered quite a bit of terrain in the course of this article.</p>
<p>It may seem that Haskell has invented an intimidating mass of programming concepts. But in fact, Haskell inherits much from earlier functional programming languages.</p>
<p>Features like first class functions, comprehensive list APIs or declarative programming had already been introduced with Lisp and Scheme.</p>
<p>Several others, like pattern matching, non-strict evaluation, immutability, purity, static and strong typing, type inference, algebraic data types and polymorphic data types have been invented in languages like Hope, Miranda and ML.</p>
<p>Only a few features like type classes and explicit side effects / monadic I/O were first introduced in Haskell.</p>
<p>So if you already know some functional language concepts, Haskell shouldn’t seem too alien to you. For developers with a background in OO languages, the conceptual gap will be much larger.</p>
<p>I hope that this article helped to bridge that gap a bit and to better explain <a href="https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">why functional programming</a> - and Haskell in particular - matters.</p>
<p>Using functional programming languages - or applying some of their techniques - will help to create designs that are closer to the problem domain (as intented by domain driven design), more readable (due to their declarative character), allow equational reasoning, will provide more rigid separation of business logic and side effects, are more flexible for future changes or extensions, provide better testability (supporting BDD, TDD and property based testing), will need much less debugging, are better to maintain and, last but not least, will be more fun to write.</p>
]]></summary>
</entry>
<entry>
    <title>Writing Haskell native GUI Applications with Threepenny GUI and Electron</title>
    <link href="https://thma.github.io//posts/2019-12-10-threepenny-gui-and-electron.html" />
    <id>https://thma.github.io//posts/2019-12-10-threepenny-gui-and-electron.html</id>
    <published>2019-12-10T00:00:00Z</published>
    <updated>2019-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="info">
    <em>Posted on December 10, 2019
    
        by Thomas Mahler
    </em><br/><br/>
</div>

<p><a href="https://github.com/thma/ThreepennyElectron/actions"><img src="https://github.com/thma/ThreepennyElectron/workflows/Haskell%20CI/badge.svg" alt="Actions Status" /></a> <a href="https://snyk.io/test/github/thma/ThreepennyElectron?targetFile=package.json"><img src="https://snyk.io/test/github/thma/ThreepennyElectron/badge.svg?targetFile=package.json" alt="Known Vulnerabilities" /></a></p>
<h2 id="tldr">tl;dr</h2>
<p>Threepenny is an awesome Haskell library for creating browser based applications running on localhost.</p>
<p>By combining it with the Electron.js framework you have a great toolset for writing cross-platform standalone GUI applications — completely in Haskell with a great functional reactive programming API.</p>
<p>See it in action:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="fu">git</span> clone https://github.com/thma/ThreepennyElectron.git</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="bu">cd</span> ThreepennyElectron</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="ex">stack</span> init</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="ex">npm</span> install</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="ex">npm</span> start</span></code></pre></div>
<p>Prerequisites: - <a href="https://git-scm.com/">Git</a> - <a href="https://docs.haskellstack.org/en/stable/README/">Haskell Stack</a> - <a href="https://nodejs.org">Nodejs</a></p>
<h2 id="immature-support-for-writing-desktop-applications-in-haskell">Immature support for writing Desktop Applications in Haskell ?</h2>
<p>Since reading The GUI chapter in <a href="http://book.realworldhaskell.org/read/gui-programming-with-gtk-hs.html">Real World Haskell</a> I had the impression that Haskell does not excel in GUI programming. The GUI examples in Real World Haskell are based on <a href="https://github.com/gtk2hs/gtk2hs">gtk2hs</a>. Gtk2hs is a Haskell library that allows to write platform-independent GUI applications based on the GTK library. There are some large applications based on gtk2hs or its successor <a href="https://github.com/haskell-gi/gi-gtk-hs">gi-gtk-hs</a> like the Haskell IDE <a href="http://leksah.org/">Leksah</a>. It’s rock solid technology. But it’s also quite dated and the imperative programming model is not an ideal fit for a purely functional language like Haskell.</p>
<p>So even though I’m a Haskell enthusiast I tended to agree with <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#standalone-gui-applications">Gabriel Gonzales “Immature” rating</a> of Haskell’s support for standalone GUI Applications.</p>
<h2 id="threepenny-to-the-rescue">Threepenny to the rescue</h2>
<p>A few weeks back I was asked to write a standalone GUI version of an existing Haskell commandline app. So I had to make up my mind about choosing a GUI library with an optimal fit to my needs:</p>
<ul>
<li>provide a multi-platform (Windows, MacOS, Linux) standalone GUI application.</li>
<li>use functional reactive programming instead of event handler callbacks</li>
<li>provide a modern look and feel e.g. material design</li>
</ul>
<p>I never was satisfied with the look and feel of GTK based applications. And I also wasn’t keen on going back to callback based UI programming. So I had a look at Gabriel Gonzalez great resource <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md">State of the Haskell ecosystem</a>.</p>
<p>In the <a href="https://github.com/Gabriel439/post-rfc/blob/master/sotu.md#standalone-gui-applications">section on Standalone GUI applications</a> he mainly mentions GTK and Qt bindings but also some other libraries. One of them is <a href="http://wiki.haskell.org/Threepenny-gui">Threepenny GUI</a> which caught my attention because it uses the web browser as a display. And it comes with an (optional) functional reactive programming model!</p>
<blockquote>
<p>A program written with Threepenny is essentially a small web server that displays the user interface as a web page to any browser that connects to it. You can freely manipulate the HTML DOM and handle JavaScript events from your Haskell code.</p>
<p>(Quoted from the <a href="https://hackage.haskell.org/package/threepenny-gui">hackage documentation</a>)</p>
</blockquote>
<p>My next thought was: It would be cool to use <a href="https://electronjs.org/">Electron</a> to host the Threepenny HTML/Javascript frontend against the Threepenny Haskell backend. By making use of the <a href="https://www.npmjs.com/package/electron-packager">electron packager</a> this would allow to package platform specific standalone GUI application for Windows, MacOS and Linux.</p>
<p>I really got excited when I found out that Jeremy Barisch-Rooney already had already written a short <a href="https://github.com/HeinrichApfelmus/threepenny-gui/blob/master/doc/electron.md">HOWTO document</a> that explains the required steps to glue an ELectron frontend to a Threepenny backend.</p>
<p>Based on this Howto I was able to deliver a native windows GUI Application with an embed Haskell backend within just a few days. I received very good feedback from the endusers and my impression was:</p>
<blockquote>
<p>“Thanks to Threepenny GUI support in Haskell has just become a bit more mature!”</p>
</blockquote>
<p>As I did not find much coverage of this specific Electron / Threepenny GUI combination in blogs or tutorials I thought it would be a good idea to spread the word by writing a short tutorial featuring the basic building blocks of this approach.</p>
<p>So without further ado let’s get started:</p>
<h2 id="writing-a-platform-independent-standalone-calculator-app">Writing a platform independent standalone calculator app</h2>
<p>In order to provide a bit more than just a hello world example I’m showcasing a simple pocket calculator app. This allows to demonstrate basic features of writing real world UI applications. The calculator is based on an earlier <a href="https://bitbucket.org/astynax/threep/src/default/">Threepenny GUI demo by Aleksey Pirogov</a>.</p>
<p>The UI of the calculator is shown in the screenshot below. It features a display, a numeric block for entering digits and a decimal point, buttons for the four basic arithmetical operations, a <strong>clear</strong> button and a <strong>clear error</strong> button:</p>
<figure>
<img src="/img/screenshot.png" alt="" /><figcaption>screenshot of the calculator</figcaption>
</figure>
<h3 id="the-calculator">The calculator</h3>
<p>At the heart of an application sits the model. In this case the <a href="https://github.com/thma/ThreepennyElectron/tree/master/src/Calc.hs">calculator</a>. It is implemented as a simple state machine. The state machine knows five different states:</p>
<ol type="1">
<li>Entering a number into the first register A</li>
<li>Finishing the entry of the first number by entering an Operation (+, -, *, /)</li>
<li>Entering a number into the second register B</li>
<li>Finishing the Operation of the second number by entering <strong>=</strong> or another arithmetic operation</li>
<li>an Error state in case of divison by zero or by entering a wrong sequence of buttons</li>
</ol>
<p>This is reflected in the following data type declaration:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co">-- | a data type representing all possible states of the calculator</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">State</span> <span class="ot">=</span> <span class="dt">EnteringA</span>     <span class="dt">Entering</span>                   <span class="co">-- ^ entering register A</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">EnteredAandOp</span> <span class="dt">Double</span>  <span class="dt">Operation</span>          <span class="co">-- ^ A, Op</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">EnteringB</span>     <span class="dt">Double</span>  <span class="dt">Operation</span> <span class="dt">Entering</span> <span class="co">-- ^ A, Op, entering register B</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Calculated</span>    <span class="dt">Double</span>  <span class="dt">Operation</span> <span class="dt">Double</span>   <span class="co">-- ^ A, Op, B</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>           <span class="op">|</span> <span class="dt">Error</span>         <span class="dt">Double</span>  <span class="dt">String</span>             <span class="co">-- ^ A, Message</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>           <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co">-- | Entering is a tuple used while entering numbers. It consists of</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Entering</span> <span class="ot">=</span> (<span class="dt">String</span>, <span class="dt">Bool</span>) <span class="co">-- A tuple of the String representation of the entered digits</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>                               <span class="co">-- and a flag signalling that Dot was already pressed.</span></span></code></pre></div>
<p>Starting with an initial state</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="ot">initialState ::</span> <span class="dt">State</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>initialState <span class="ot">=</span> <span class="dt">EnteringA</span> (<span class="st">&quot;0&quot;</span>, <span class="dt">False</span>)</span></code></pre></div>
<p>we can operate the calculator by populating it with Button events:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co">-- in GHCi:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;9&quot;</span> initialState</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="dt">EnteringA</span> (<span class="st">&quot;09&quot;</span>,<span class="dt">False</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;9&quot;</span> it</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="dt">EnteringA</span> (<span class="st">&quot;099&quot;</span>,<span class="dt">False</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;/&quot;</span> it</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="dt">EnteredAandOp</span> <span class="fl">99.0</span> <span class="dt">Div</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;7&quot;</span> it</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="dt">EnteringB</span> <span class="fl">99.0</span> <span class="dt">Div</span> (<span class="st">&quot;7&quot;</span>,<span class="dt">False</span>)</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a><span class="op">&gt;</span> populate <span class="st">&quot;=&quot;</span> it</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a><span class="dt">Calculated</span> <span class="fl">14.142857142857142</span> <span class="dt">Div</span> <span class="fl">7.0</span></span></code></pre></div>
<p>The <code>populate</code> function is defined as :</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="ot">populate ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="ot">-&gt;</span> <span class="dt">State</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>populate <span class="ot">=</span> processCommand <span class="op">.</span> parseInput</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a><span class="co">-- | process a calculator command. That is: compute a calculator state transition    </span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a><span class="ot">processCommand ::</span> <span class="dt">Command</span> <span class="ot">-&gt;</span> <span class="dt">State</span> <span class="ot">-&gt;</span> <span class="dt">State</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>processCommand cmd <span class="ot">=</span> <span class="kw">case</span> cmd <span class="kw">of</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>  <span class="dt">Digit</span> x      <span class="ot">-&gt;</span> addDigit x</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>  <span class="dt">Dot</span>          <span class="ot">-&gt;</span> addDot</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>  <span class="dt">Operation</span> op <span class="ot">-&gt;</span> applyOp op</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>  command      <span class="ot">-&gt;</span> applyCmd command</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a><span class="co">-- | parse a Command from an input string</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a><span class="ot">parseInput ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Command</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>parseInput x <span class="ot">=</span> <span class="kw">case</span> x <span class="kw">of</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>  <span class="st">&quot;0&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Zero</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>  <span class="st">&quot;1&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">One</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>  <span class="st">&quot;2&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Two</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>  <span class="st">&quot;3&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Three</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>  <span class="st">&quot;4&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Four</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>  <span class="st">&quot;5&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Five</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>  <span class="st">&quot;6&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Six</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>  <span class="st">&quot;7&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Seven</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>  <span class="st">&quot;8&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Eight</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>  <span class="st">&quot;9&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Digit</span> <span class="dt">Nine</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true"></a>  <span class="st">&quot;.&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Dot</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true"></a>  <span class="st">&quot;+&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Add</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true"></a>  <span class="st">&quot;-&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Sub</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true"></a>  <span class="st">&quot;*&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Mul</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true"></a>  <span class="st">&quot;/&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Operation</span> <span class="dt">Div</span></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true"></a>  <span class="st">&quot;=&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Flush</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true"></a>  <span class="st">&quot;C&quot;</span>  <span class="ot">-&gt;</span> <span class="dt">Clear</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true"></a>  <span class="st">&quot;CE&quot;</span> <span class="ot">-&gt;</span> <span class="dt">ClearError</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true"></a>  _    <span class="ot">-&gt;</span> <span class="fu">undefined</span></span></code></pre></div>
<p>First the input is parsed to a Command. Based on the parsed Command (either a digit, a dot, an arithmetic operation or <code>=</code>, <code>C</code> or <code>CE</code>) the current state is modified by one of the functions <code>addDigit</code>, <code>addDot</code>, <code>applyOp</code> or <code>applyCmd</code>.</p>
<p>I won’t dive deeper into those functions, as you will easily grasp the mechanism by studying the <a href="https://github.com/thma/ThreepennyElectron/tree/master/src/Calc.hs">source code</a>.</p>
<h2 id="the-threepenny-gui">The Threepenny GUI</h2>
<p>I will not give an introduction to the Threepenny GUI programming model here as Threepenny already ships with <a href="https://github.com/HeinrichApfelmus/threepenny-gui/tree/master/samples">plenty of samples</a> and a good <a href="https://github.com/HeinrichApfelmus/threepenny-gui/tree/master/doc/hal-2017">getting started tutorial</a>. Instead I will focus on presenting only those parts that are necessary to understand the calculator GUI.</p>
<p>The application Main module consists of a single function <code>main</code>. It reads a port number from the commandline an then call <code>Ui.start</code> to launch a WebServer hosting the Ui application on that port:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>  [port] <span class="ot">&lt;-</span> getArgs</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>  Ui.start (<span class="fu">read</span> port)</span></code></pre></div>
<p>This function will either be called when starting the application with <code>stack exec ThreepennyElectron 8080</code> or by the electron launch script main.js (which we will discuss later).</p>
<p>The <code>Ui</code> module contains all code for rendering the HTML dom, setting up the event binding to GUI widgets and the respective interaction with application backend.</p>
<p>Let’s start with the main entry point <code>Ui.start</code> which is called on application launch:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true"></a><span class="ot">start ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true"></a>start port <span class="ot">=</span> startGUI defaultConfig</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true"></a>    { jsPort   <span class="ot">=</span> <span class="dt">Just</span> port</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true"></a>    , jsStatic <span class="ot">=</span> <span class="dt">Just</span> <span class="st">&quot;static&quot;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true"></a>    } setup</span></code></pre></div>
<p>It takes the port number as parameter and starts up a web server with the Threepenny <code>startGUI</code> function. <code>startGUI</code> has the folloing type signature:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true"></a><span class="co">-- | Start server for GUI sessions.</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true"></a>startGUI</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true"></a><span class="ot">    ::</span> <span class="dt">Config</span>               <span class="co">-- ^ Server configuration.</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true"></a>    <span class="ot">-&gt;</span> (<span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">UI</span> ())    <span class="co">-- ^ Action to run whenever a client browser connects.</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true"></a>    <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span></code></pre></div>
<p>We build our server configuration by starting with the default configuration <code>defaultConfig</code> and then modifying two properties:</p>
<ol type="1">
<li>setting the port number to the one read from the command line.</li>
<li>declaring the static content (i.e any html, JavaScript and CSS content) to reside in the directory <code>./static</code>.</li>
</ol>
<p>The <code>(Window -&gt; UI ())</code> action parameter is filled with the function <code>setup</code>.</p>
<p>Obviously this function must have the following signature:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true"></a><span class="co">-- | setup window layout and event handling</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true"></a><span class="ot">setup ::</span> <span class="dt">Window</span> <span class="ot">-&gt;</span> <span class="dt">UI</span> ()</span></code></pre></div>
<p>As this function defines the whole layout and user interaction we will inspect it step by step.</p>
<h3 id="creating-the-threepenny-ui-design">Creating the Threepenny UI design</h3>
<p>The first step is to define the UI elements the overall window layout:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true"></a>setup win <span class="ot">=</span> void <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true"></a>  <span class="co">-- define page + stylesheet</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true"></a>  <span class="fu">return</span> win <span class="op">#</span> set title <span class="st">&quot;3PennyCalc&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true"></a>  UI.addStyleSheet win <span class="st">&quot;semantic.css&quot;</span></span></code></pre></div>
<p>We start by assigning a title to the window <code>win</code> and adding a stylesheet. In our example we are using the <a href="https://semantic-ui.com/">Semantic UI</a> stylesheet. (You could of course use any other css framework or roll your own.)</p>
<p>Next we define the calculator display element <code>outputBox</code> as a <code>UI.input</code> element. These elements willbe rendered as HTML DOM elements in the browser. Threepenny provides combinators to define css classes and other html attributes. In this case we set the input field to readonly, make the text align to the right and set its width:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true"></a>  <span class="co">-- define UI controls</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true"></a>  outputBox <span class="ot">&lt;-</span> UI.input</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true"></a>                <span class="op">#</span> set (attr <span class="st">&quot;readonly&quot;</span>) <span class="st">&quot;true&quot;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true"></a>                <span class="op">#</span> set (attr <span class="st">&quot;style&quot;</span>) <span class="st">&quot;text-align: right; min-width: 324px&quot;</span></span></code></pre></div>
<p>This is resulting HTML DOM element:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true"></a><span class="kw">&lt;input</span><span class="ot"> readonly=</span><span class="st">&quot;readonly&quot;</span><span class="ot"> style=</span><span class="st">&quot;text-align: right; min-width: 324px&quot;</span><span class="kw">&gt;</span></span></code></pre></div>
<p>In the next step we define the calculator buttons for digits, operations and commands:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true"></a>  <span class="co">-- define the button grid</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true"></a>  buttons   <span class="ot">&lt;-</span> <span class="fu">mapM</span> (<span class="fu">mapM</span> mkButton) buttonLabels</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true"></a><span class="ot">    mkButton ::</span> (<span class="dt">Command</span>, <span class="dt">Color</span>) <span class="ot">-&gt;</span> <span class="dt">UI</span> <span class="dt">Element</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true"></a>    mkButton (cmd, clr) <span class="ot">=</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true"></a>      <span class="kw">let</span> btnLabel <span class="ot">=</span> lbl cmd <span class="co">-- get the button text</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true"></a>      <span class="kw">in</span>  UI.button <span class="op">#.</span> (<span class="st">&quot;ui &quot;</span> <span class="op">++</span> color clr <span class="op">++</span> <span class="st">&quot; button&quot;</span>)</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true"></a>                    <span class="op">#</span> set text btnLabel <span class="op">#</span> set value btnLabel</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true"></a>                    <span class="op">#</span> set (attr <span class="st">&quot;type&quot;</span>)  <span class="st">&quot;button&quot;</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true"></a>                    <span class="op">#</span> set (attr <span class="st">&quot;style&quot;</span>) <span class="st">&quot;min-width: 60px&quot;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true"></a><span class="ot">    color ::</span> <span class="dt">Color</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true"></a>    color <span class="ot">=</span> <span class="fu">map</span> <span class="fu">toLower</span> <span class="op">.</span> <span class="fu">show</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true"></a></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true"></a><span class="ot">    buttonDefinitions ::</span> [[(<span class="dt">Command</span>, <span class="dt">Color</span>)]]</span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true"></a>    buttonDefinitions <span class="ot">=</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true"></a>      [ [(<span class="dt">Digit</span> <span class="dt">Seven</span>, <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Eight</span>, <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Nine</span>,  <span class="dt">Grey</span>), (<span class="dt">ClearError</span>,   <span class="dt">Orange</span>), (<span class="dt">Clear</span>,        <span class="dt">Orange</span>)]</span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true"></a>      , [(<span class="dt">Digit</span> <span class="dt">Four</span>,  <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Five</span>,  <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Six</span>,   <span class="dt">Grey</span>), (<span class="dt">Operation</span> <span class="dt">Add</span>, <span class="dt">Brown</span>), (<span class="dt">Operation</span> <span class="dt">Sub</span>, <span class="dt">Brown</span>)]</span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true"></a>      , [(<span class="dt">Digit</span> <span class="dt">One</span>,   <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Two</span>,   <span class="dt">Grey</span>), (<span class="dt">Digit</span> <span class="dt">Three</span>, <span class="dt">Grey</span>), (<span class="dt">Operation</span> <span class="dt">Mul</span>, <span class="dt">Brown</span>), (<span class="dt">Operation</span> <span class="dt">Div</span>, <span class="dt">Brown</span>)]</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true"></a>      , [(<span class="dt">Dot</span>,  <span class="dt">Grey</span>),        (<span class="dt">Digit</span> <span class="dt">Zero</span>,  <span class="dt">Grey</span>), (<span class="dt">Flush</span>, <span class="dt">Black</span>)] ]</span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true"></a></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true"></a><span class="co">-- | Button colors</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true"></a><span class="kw">data</span> <span class="dt">Color</span> <span class="ot">=</span> <span class="dt">Grey</span> <span class="op">|</span> <span class="dt">Orange</span> <span class="op">|</span> <span class="dt">Brown</span> <span class="op">|</span> <span class="dt">Black</span> <span class="kw">deriving</span> (<span class="dt">Show</span>)</span></code></pre></div>
<p>To understand this piece of code let’s start with <code>buttonDefinitions :: [[(Command, Color)]]</code>: a list of lists of <code>(Command, Color)</code> tuples. The outer list represents the rows, the inner list the columns in each row. The tuples represent the button commands and colors we want to see on the calculator buttons.</p>
<p>Mapping the function <code>mkButton</code> over the <code>buttonDefinitions</code> is then used to create the <code>buttons :: [[UI Element]]</code>. Where <code>mkButton</code> defines each button as a <code>UI.button</code>, assigns a semantic.ui css class <code>("ui " ++ color c ++ " button")</code> to it (using the <code>#.</code> combinator) and sets text and other attributes by using the <code># set</code> combinator.</p>
<p>To give an example the first element from <code>buttonDefinitions</code>: <code>(Digit Seven, Grey)</code> will be rendered in the HTML DOM as:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true"></a><span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;7&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>7<span class="kw">&lt;/button&gt;</span></span></code></pre></div>
<p>As the last step of the layouting stage we glue everything together to a nice grid and place it as the HTML body into the DOM tree. Again we use css classes from the Semantic UI framework to create a pleasant look and feel:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true"></a>  UI.getBody win <span class="op">#</span> set (attr <span class="st">&quot;style&quot;</span>) <span class="st">&quot;overflow: hidden&quot;</span> <span class="op">#+</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true"></a>    [ UI.div <span class="op">#.</span> <span class="st">&quot;ui raised very padded text container segment&quot;</span> <span class="op">#+</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true"></a>      [UI.table <span class="op">#+</span> [UI.row [UI.div <span class="op">#.</span> <span class="st">&quot;ui input&quot;</span> <span class="op">#+</span> [element outputBox]]] <span class="op">#+</span> </span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true"></a>                    <span class="fu">map</span> (UI.row <span class="op">.</span> <span class="fu">map</span> element) buttons]</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true"></a>    ]</span></code></pre></div>
<p>The resulting HTML looks like follows (for brevity I’m showing only everything up to the first row of buttons):</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true"></a><span class="kw">&lt;body</span><span class="ot"> style=</span><span class="st">&quot;overflow: hidden&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true"></a><span class="kw">&lt;noscript&gt;</span>Please enable JavaScript.<span class="kw">&lt;/noscript&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true"></a><span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;ui raised very padded text container segment&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true"></a>    <span class="kw">&lt;table&gt;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true"></a>        <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true"></a>            <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-row&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true"></a>                    <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;ui input&quot;</span><span class="kw">&gt;&lt;input</span><span class="ot"> readonly=</span><span class="st">&quot;readonly&quot;</span><span class="ot"> style=</span><span class="st">&quot;text-align: right; min-width: 324px&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true"></a>                    <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true"></a>            <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true"></a>        <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true"></a>            <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-row&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;7&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>7<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;8&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>8<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui grey button&quot;</span><span class="ot"> value=</span><span class="st">&quot;9&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>9<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui orange button&quot;</span><span class="ot"> value=</span><span class="st">&quot;CE&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>CE<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true"></a>                <span class="kw">&lt;div</span><span class="ot"> class=</span><span class="st">&quot;table-cell&quot;</span><span class="kw">&gt;</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true"></a>                    <span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;ui orange button&quot;</span><span class="ot"> value=</span><span class="st">&quot;C&quot;</span><span class="ot"> type=</span><span class="st">&quot;button&quot;</span><span class="ot"> style=</span><span class="st">&quot;min-width: 60px&quot;</span><span class="kw">&gt;</span>C<span class="kw">&lt;/button&gt;</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true"></a>                <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true"></a>            <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true"></a>        <span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true"></a></span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true"></a>        ...</span>
<span id="cb16-35"><a href="#cb16-35" aria-hidden="true"></a></span>
<span id="cb16-36"><a href="#cb16-36" aria-hidden="true"></a>    <span class="kw">&lt;/table&gt;</span></span>
<span id="cb16-37"><a href="#cb16-37" aria-hidden="true"></a><span class="kw">&lt;/div&gt;</span></span>
<span id="cb16-38"><a href="#cb16-38" aria-hidden="true"></a><span class="kw">&lt;/body&gt;</span></span></code></pre></div>
<p>This was everything we need to create the HTML UI as shown in the <a href="#writing-a-platform-independent-standalone-calculator-app">screenshot</a> above.</p>
<h3 id="defining-the-application-behaviour">Defining the application behaviour</h3>
<p>Now we come to the interesting part of UI interaction. Threepenny comes with support for functional reactive programming based on the concepts of <a href="https://wiki.haskell.org/Reactive-banana">reactive banana</a>, a cool FRP framework by Heinrich Apfelmus.</p>
<p>So I promise we will not see any old-school event-handling in the following code:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true"></a>  <span class="kw">let</span>  </span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true"></a>      <span class="co">-- map buttons to Command. (buttonMap :: [(Element, Command)] )</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true"></a>      buttonMap <span class="ot">=</span> <span class="fu">zip</span> (<span class="fu">concat</span> buttons) (<span class="fu">concatMap</span> (<span class="fu">map</span> <span class="fu">fst</span>) buttonDefinitions)</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true"></a>      <span class="co">-- register mouse click events to all buttons. (clicks :: Event Command )</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true"></a>      clicks  <span class="ot">=</span> buttonClicks buttonMap</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true"></a>      <span class="co">-- use (processCommand :: Command -&gt; State -&gt; State) to build a function that computes a</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true"></a>      <span class="co">-- calculator state transition (commands :: Event (State -&gt; State))</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true"></a>      commands  <span class="ot">=</span> <span class="fu">fmap</span> processCommand clicks</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true"></a></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true"></a>  <span class="co">-- calculate behaviour by accumulating all commands, starting with the initial state    </span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true"></a>  calcBehaviour <span class="ot">&lt;-</span> accumB initialState commands</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true"></a>  <span class="co">-- use Calc.toString to extract the display string from the calculator state</span></span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true"></a>  <span class="kw">let</span> outText  <span class="ot">=</span> <span class="fu">fmap</span> toString calcBehaviour</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true"></a>  <span class="co">-- write outText to the outputBox UI element</span></span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true"></a>  element outputBox <span class="op">#</span> sink value outText</span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true"></a>  <span class="kw">where</span></span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true"></a><span class="ot">    buttonClicks ::</span> [(<span class="dt">Element</span>, <span class="dt">Command</span>)] <span class="ot">-&gt;</span> <span class="dt">Event</span> <span class="dt">Command</span></span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true"></a>    buttonClicks <span class="ot">=</span> <span class="fu">foldr1</span> (UI.unionWith <span class="fu">const</span>) <span class="op">.</span> <span class="fu">map</span> makeClick</span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true"></a>      <span class="kw">where</span></span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true"></a>        makeClick (element, cmd) <span class="ot">=</span> UI.pure cmd <span class="op">&lt;@</span> UI.click element</span></code></pre></div>
<p>We’ll walk through this code from top to bottom. First <code>buttonMap</code> is defined as an associative list mapping all calculator buttons to their respective <code>Command</code>s.</p>
<p>Next we define <code>clicks :: Event Command</code>. Where <code>Event a</code> represents a stream of events as they occur in time.</p>
<p>This <code>clicks</code> event stream is generated by applying <code>buttonClicks</code> to the button map we created in the first step.</p>
<p>So effectively each time a calculator button is clicked we receive the <code>Command</code> represented by the button.</p>
<p>In the next step we use <code>processCommand</code> to generate calculator state transition functions based on each command in the stream.</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true"></a>commands  <span class="ot">=</span> <span class="fu">fmap</span> processCommand clicks</span></code></pre></div>
<p>We have to use <code>fmap</code> to access the command in the <code>Event</code> container. The resulting type of <code>commands</code> is thus <code>commands :: Event (State -&gt; State)</code>.</p>
<p>Now effectively <code>commands</code> is a stream of <code>(State -&gt; State)</code> calculator state transitions.</p>
<p>In the following step we define a <code>Behaviour</code> based on the <code>commands</code> stream of state transitions. In Threepenny <code>Behavior a</code> represents a value that varies in time. Think of it as</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true"></a><span class="kw">type</span> <span class="dt">Behavior</span> a <span class="ot">=</span> <span class="dt">Time</span> <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>The Threepenny function <code>accumB</code> can be used to compute behaviour starting from an initial state and a stream of state transition events:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true"></a><span class="ot">accumB ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> a <span class="op">--^</span> the initial value</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true"></a>       <span class="ot">-&gt;</span> <span class="dt">Event</span> (a <span class="ot">-&gt;</span> a) <span class="op">--^</span> the stream state transitions</span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true"></a>       <span class="ot">-&gt;</span> m (<span class="dt">Behavior</span> a) <span class="op">--^</span> the resulting <span class="dt">Behaviour</span> (that is a value varrying <span class="kw">in</span> time )</span></code></pre></div>
<p>So once <code>calcBehaviour &lt;- accumB initialState commands</code> did all the heavy lifting we just have to extract the display text from the state and to render it in the outputBox:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true"></a>  <span class="co">-- use Calc.toString to extract the display string from the calculator state </span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true"></a>  <span class="kw">let</span> outText  <span class="ot">=</span> <span class="fu">fmap</span> toString calcBehaviour</span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true"></a>  <span class="co">-- write outText to the outputBox UI element</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true"></a>  element outputBox <span class="op">#</span> sink value outText</span></code></pre></div>
<h2 id="recap-what-weve-got-so-far">Recap: what we’ve got so far</h2>
<p>Until now we have written a calculator as a Threepenny GUI application. We can build and execute it with the following stack commands:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true"></a><span class="ex">stack</span> init</span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true"></a><span class="ex">stack</span> install</span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true"></a><span class="ex">stack</span> exec ThreepennyElectron 8023</span></code></pre></div>
<p>If you now navigate your WebBrowser to <code>http://127.0.0.1:8023</code> you’ll see the calculator in action.</p>
<p>To ease the usage of this basic Threepenny application when working in GHCi I have provided a short helper function <code>up</code> which will automatically open the Threepenny application in your default web browser:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true"></a><span class="co">-- | launch application in default web browser</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true"></a><span class="ot">up ::</span> <span class="dt">IO</span> ()</span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true"></a>up <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true"></a>  <span class="kw">let</span> port <span class="ot">=</span> <span class="dv">8023</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true"></a>  launchAppInBrowser port</span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true"></a>  start port</span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true"></a></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true"></a><span class="co">-- | convenience function that opens the 3penny UI in the default web browser</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true"></a><span class="ot">launchAppInBrowser::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Maybe</span> <span class="dt">Handle</span>, <span class="dt">Maybe</span> <span class="dt">Handle</span>, <span class="dt">Maybe</span> <span class="dt">Handle</span>, <span class="dt">ProcessHandle</span>)</span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true"></a>launchAppInBrowser port <span class="ot">=</span> <span class="kw">case</span> os <span class="kw">of</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true"></a>  <span class="st">&quot;mingw32&quot;</span> <span class="ot">-&gt;</span> createProcess  (shell <span class="op">$</span> <span class="st">&quot;start &quot;</span>    <span class="op">++</span> url)</span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true"></a>  <span class="st">&quot;darwin&quot;</span>  <span class="ot">-&gt;</span> createProcess  (shell <span class="op">$</span> <span class="st">&quot;open &quot;</span>     <span class="op">++</span> url)</span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true"></a>  _         <span class="ot">-&gt;</span> createProcess  (shell <span class="op">$</span> <span class="st">&quot;xdg-open &quot;</span> <span class="op">++</span> url)</span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true"></a>  <span class="kw">where</span> url <span class="ot">=</span> <span class="st">&quot;http://localhost:&quot;</span> <span class="op">++</span> <span class="fu">show</span> port</span></code></pre></div>
<h2 id="electron-integration">Electron Integration</h2>
<p>So now we are able to execute our calculator as a local web application in our web browser. But our aim was to have a local standalone application that does not rely on a browser.</p>
<p>That’s where we bring in Electron to bundle the Threepenny GUI Haskell backend with a Chromium based fronted.</p>
<h3 id="providing-a-very-straightforward-wrapper-script">Providing a very straightforward wrapper script</h3>
<p><a href="https://electronjs.org/">Electron</a> is a popular JavaScript framework that allows to write cross platform desktop applications based on Chromium. Real world applications like <a href="https://atom.io/">Atom</a>, <a href="https://code.visualstudio.com/">Visual Studio Code</a> or <a href="https://slack.com/intl/de-de/downloads/windows">Slack</a> are good <a href="https://electronjs.org/apps">examples of what can be achieved with it</a>.</p>
<p>As I already mentioned in the introduction, Heinrich Apfelmus already <a href="https://github.com/HeinrichApfelmus/threepenny-gui/blob/master/doc/electron.md">created a tutorial</a> on how to write an electron wrapper around a Threepenny GUI application.</p>
<p>Let’s start with a short look at the <a href="https://github.com/thma/ThreepennyElectron/tree/master/main.js">Javascript code in</a>.</p>
<p>This script detects a free tcp/ip port on localhost and spawns the ThreepennyElectron applications as a separate processes. The free port is handed over to the ThreepennyELectron app as a commandline parameter.</p>
<p>Once the ThreepennyElectron server is accepting connections we can safely open the application window and load the local url as it’s content.</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true"></a><span class="co">// Relative path to the Threepenny binary.</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true"></a><span class="kw">const</span> relBin <span class="op">=</span> <span class="st">&#39;./build/ThreepennyElectron&#39;</span><span class="op">;</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true"></a></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true"></a><span class="co">// Assign a random port to run on.</span></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true"></a><span class="fu">freeport</span>((err<span class="op">,</span> port) <span class="kw">=&gt;</span> {</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true"></a>  <span class="cf">if</span> (err) <span class="cf">throw</span> err<span class="op">;</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true"></a></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true"></a>  <span class="kw">const</span> url <span class="op">=</span> <span class="vs">`http://localhost:</span><span class="sc">${</span>port<span class="sc">}</span><span class="vs">`</span><span class="op">;</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true"></a>  <span class="kw">let</span> child <span class="op">=</span> <span class="kw">null</span><span class="op">;</span> <span class="co">// the Threepenny Server process we will spawn</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true"></a></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true"></a>  <span class="co">// Keep a global reference of the window object, if we don&#39;t, the window will</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true"></a>  <span class="co">// be closed automatically when the JavaScript object is garbage collected.</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true"></a>  <span class="kw">let</span> win<span class="op">;</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true"></a></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true"></a>  <span class="co">// Called when Electron has finished initialization and is ready to create</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true"></a>  <span class="co">// browser windows. Some APIs can only be used after this event occurs. We</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true"></a>  <span class="co">// start the child process and wait before loading the web page.</span></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true"></a>  app<span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;ready&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true"></a>    child <span class="op">=</span> <span class="fu">spawn</span>(path<span class="op">.</span><span class="fu">join</span>(<span class="bu">__dirname</span><span class="op">,</span> relBin)<span class="op">,</span> [port])<span class="op">;</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stdout</span><span class="op">.</span><span class="fu">setEncoding</span>(<span class="st">&#39;utf8&#39;</span>)<span class="op">;</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stderr</span><span class="op">.</span><span class="fu">setEncoding</span>(<span class="st">&#39;utf8&#39;</span>)<span class="op">;</span></span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stdout</span><span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;data&#39;</span><span class="op">,</span> <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>)<span class="op">;</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true"></a>    child<span class="op">.</span><span class="at">stderr</span><span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;data&#39;</span><span class="op">,</span> <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>)<span class="op">;</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true"></a>    child<span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;close&#39;</span><span class="op">,</span> code <span class="kw">=&gt;</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true"></a>      <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`Threepenny app exited with code </span><span class="sc">${</span>code<span class="sc">}</span><span class="vs">`</span>))<span class="op">;</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true"></a></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true"></a>    <span class="co">// Wait until the Threepenny server is ready for connections.</span></span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true"></a>    <span class="fu">waitOn</span>({ <span class="dt">resources</span><span class="op">:</span> [url]<span class="op">,</span> timeout }<span class="op">,</span> (err_) <span class="kw">=&gt;</span> {</span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true"></a>      <span class="cf">if</span> (err_) <span class="cf">throw</span> err_<span class="op">;</span></span>
<span id="cb24-30"><a href="#cb24-30" aria-hidden="true"></a>      <span class="fu">createWindow</span>()<span class="op">;</span></span>
<span id="cb24-31"><a href="#cb24-31" aria-hidden="true"></a>    })<span class="op">;</span></span>
<span id="cb24-32"><a href="#cb24-32" aria-hidden="true"></a>  })<span class="op">;</span></span>
<span id="cb24-33"><a href="#cb24-33" aria-hidden="true"></a></span>
<span id="cb24-34"><a href="#cb24-34" aria-hidden="true"></a>  <span class="kw">function</span> <span class="fu">createWindow</span>() {</span>
<span id="cb24-35"><a href="#cb24-35" aria-hidden="true"></a>      <span class="co">// Create the browser window.</span></span>
<span id="cb24-36"><a href="#cb24-36" aria-hidden="true"></a>      win <span class="op">=</span> <span class="kw">new</span> <span class="fu">BrowserWindow</span>({</span>
<span id="cb24-37"><a href="#cb24-37" aria-hidden="true"></a>          <span class="dt">width</span><span class="op">:</span> <span class="dv">470</span><span class="op">,</span></span>
<span id="cb24-38"><a href="#cb24-38" aria-hidden="true"></a>          <span class="dt">height</span><span class="op">:</span> <span class="dv">370</span><span class="op">,</span></span>
<span id="cb24-39"><a href="#cb24-39" aria-hidden="true"></a>          <span class="dt">maximizable</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></span>
<span id="cb24-40"><a href="#cb24-40" aria-hidden="true"></a>          <span class="dt">resizable</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></span>
<span id="cb24-41"><a href="#cb24-41" aria-hidden="true"></a>          <span class="dt">icon</span><span class="op">:</span> <span class="st">&#39;calc.ico&#39;</span><span class="op">,</span></span>
<span id="cb24-42"><a href="#cb24-42" aria-hidden="true"></a>          <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;3PennyCalc...&#39;</span></span>
<span id="cb24-43"><a href="#cb24-43" aria-hidden="true"></a>      })<span class="op">;</span></span>
<span id="cb24-44"><a href="#cb24-44" aria-hidden="true"></a></span>
<span id="cb24-45"><a href="#cb24-45" aria-hidden="true"></a>      win<span class="op">.</span><span class="fu">removeMenu</span>()<span class="op">;</span></span>
<span id="cb24-46"><a href="#cb24-46" aria-hidden="true"></a>      <span class="bu">console</span><span class="op">.</span><span class="fu">log</span>(<span class="vs">`Loading URL: </span><span class="sc">${</span>url<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb24-47"><a href="#cb24-47" aria-hidden="true"></a>      win<span class="op">.</span><span class="fu">loadURL</span>(url)<span class="op">;</span></span>
<span id="cb24-48"><a href="#cb24-48" aria-hidden="true"></a></span>
<span id="cb24-49"><a href="#cb24-49" aria-hidden="true"></a>      <span class="co">// Emitted when the window is closed.</span></span>
<span id="cb24-50"><a href="#cb24-50" aria-hidden="true"></a>      win<span class="op">.</span><span class="fu">on</span>(<span class="st">&#39;closed&#39;</span><span class="op">,</span> () <span class="kw">=&gt;</span> {</span>
<span id="cb24-51"><a href="#cb24-51" aria-hidden="true"></a>          <span class="co">// Dereference the window object for garbage collection.</span></span>
<span id="cb24-52"><a href="#cb24-52" aria-hidden="true"></a>          win <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span>
<span id="cb24-53"><a href="#cb24-53" aria-hidden="true"></a>      })<span class="op">;</span></span>
<span id="cb24-54"><a href="#cb24-54" aria-hidden="true"></a>  }</span>
<span id="cb24-55"><a href="#cb24-55" aria-hidden="true"></a></span>
<span id="cb24-56"><a href="#cb24-56" aria-hidden="true"></a>})<span class="op">;</span></span></code></pre></div>
<h3 id="npm-handling">NPM handling</h3>
<p>To make things easier to handle I’ve improved the npm integration a bit. Once you have initialized stack with <code>stack init</code> you can build and run the calculator app (including the haskell backend) with just two npm commands:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true"></a><span class="ex">npm</span> install</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true"></a><span class="ex">npm</span> start</span></code></pre></div>
<p>The trick was to define a prestart script in <a href="https://github.com/thma/ThreepennyElectron/tree/master/package.json">package.json</a></p>
<div class="sourceCode" id="cb26"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true"></a><span class="st">&quot;prestart&quot;</span><span class="op">:</span> <span class="st">&quot;node ./stack-install.js&quot;</span><span class="op">,</span></span></code></pre></div>
<p>This script simply does a <code>stack install --local-bin-path build</code>. This guarantees that the ThreepennyElectron binary is residing under <code>./build/ThreepennyElectron</code> as expected by the <code>main.js</code> script.</p>
<p>With the following npm command you can create application package ready for deployment on your platform:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true"></a><span class="ex">npm</span> run pack-app</span></code></pre></div>
<p>You can use the parameters <code>--platform</code> and <code>--arch</code> to create packages for other platforms as well.</p>
]]></summary>
</entry>

</feed>
